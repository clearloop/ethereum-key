var N = null;var searchIndex = {};
searchIndex["arrayvec"]={"doc":"arrayvec provides the types `ArrayVec` and `ArrayString`:  array-backed vector and string types, which store their contents inline.","items":[[3,"ArrayString","arrayvec","A string with a fixed capacity.",N,N],[3,"CapacityError","","Error value indicating insufficient capacity",N,N],[3,"ArrayVec","","A vector with a fixed capacity.",N,N],[3,"IntoIter","","By-value iterator for `ArrayVec`.",N,N],[3,"Drain","","A draining iterator for `ArrayVec`.",N,N],[11,"default","","Return an empty `ArrayString`",0,[[],["arraystring"]]],[11,"new","","Create a new empty `ArrayString`.",0,[[],["arraystring"]]],[11,"from","","Create a new `ArrayString` from a `str`.",0,[[["str"]],["result",["capacityerror"]]]],[11,"from_byte_string","","Create a new `ArrayString` from a byte string literal.",0,[[["a"]],["result",["utf8error"]]]],[11,"capacity","","Return the capacity of the `ArrayString`.",0,[[["self"]],["usize"]]],[11,"is_full","","Return if the `ArrayString` is completely filled.",0,[[["self"]],["bool"]]],[11,"push","","Adds the given char to the end of the string.",0,[[["self"],["char"]]]],[11,"try_push","","Adds the given char to the end of the string.",0,[[["self"],["char"]],["result",["capacityerror"]]]],[11,"push_str","","Adds the given string slice to the end of the string.",0,[[["self"],["str"]]]],[11,"try_push_str","","Adds the given string slice to the end of the string.",0,[[["self"],["str"]],["result",["capacityerror"]]]],[11,"pop","","Removes the last character from the string and returns it.",0,[[["self"]],["option",["char"]]]],[11,"truncate","","Shortens this `ArrayString` to the specified length.",0,[[["self"],["usize"]]]],[11,"remove","","Removes a `char` from this `ArrayString` at a byte position and returns it.",0,[[["self"],["usize"]],["char"]]],[11,"clear","","Make the string empty.",0,[[["self"]]]],[11,"set_len","","Set the strings’s length.",0,[[["self"],["usize"]]]],[11,"as_str","","Return a string slice of the whole `ArrayString`.",0,[[["self"]],["str"]]],[11,"deref","","",0,[[["self"]],["str"]]],[11,"deref_mut","","",0,[[["self"]],["str"]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"borrow","","",0,[[["self"]],["str"]]],[11,"as_ref","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"write_char","","",0,[[["self"],["char"]],["result"]]],[11,"write_str","","",0,[[["self"],["str"]],["result"]]],[11,"clone","","",0,[[["self"]],["arraystring"]]],[11,"clone_from","","",0,[[["self"],["self"]]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["self"]],["bool"]]],[11,"le","","",0,[[["self"],["self"]],["bool"]]],[11,"gt","","",0,[[["self"],["self"]],["bool"]]],[11,"ge","","",0,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["str"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["str"]],["bool"]]],[11,"le","","",0,[[["self"],["str"]],["bool"]]],[11,"gt","","",0,[[["self"],["str"]],["bool"]]],[11,"ge","","",0,[[["self"],["str"]],["bool"]]],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"clone","","",1,[[["self"]],["capacityerror"]]],[11,"cmp","","",1,[[["self"],["capacityerror"]],["ordering"]]],[11,"eq","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"ne","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["capacityerror"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"le","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"gt","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"ge","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"new","","Create a new `CapacityError` from `element`.",1,[[["t"]],["capacityerror"]]],[11,"element","","Extract the overflowing element",1,[[["self"]],["t"]]],[11,"simplify","","Convert into a `CapacityError` that does not carry an element.",1,[[["self"]],["capacityerror"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[8,"Array","","Trait for fixed size arrays.",N,N],[16,"Item","","The array’s element type",2,N],[8,"RangeArgument","","`RangeArgument` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",N,N],[11,"start","","Start index (inclusive)",3,[[["self"]],["option",["usize"]]]],[11,"end","","End index (exclusive)",3,[[["self"]],["option",["usize"]]]],[11,"drop","","",4,[[["self"]]]],[11,"new","","Create a new empty `ArrayVec`.",4,[[],["arrayvec"]]],[11,"len","","Return the number of elements in the `ArrayVec`.",4,[[["self"]],["usize"]]],[11,"capacity","","Return the capacity of the `ArrayVec`.",4,[[["self"]],["usize"]]],[11,"is_full","","Return if the `ArrayVec` is completely filled.",4,[[["self"]],["bool"]]],[11,"push","","Push `element` to the end of the vector.",4,N],[11,"try_push","","Push `element` to the end of the vector.",4,N],[11,"push_unchecked","","Push `element` to the end of the vector without checking the capacity.",4,N],[11,"insert","","Insert `element` at position `index`.",4,N],[11,"try_insert","","Insert `element` at position `index`.",4,N],[11,"pop","","Remove the last element in the vector and return it.",4,[[["self"]],["option"]]],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",4,N],[11,"swap_pop","","Remove the element at `index` and swap the last element into its place.",4,[[["self"],["usize"]],["option"]]],[11,"remove","","Remove the element at `index` and shift down the following elements.",4,N],[11,"pop_at","","Remove the element at `index` and shift down the following elements.",4,[[["self"],["usize"]],["option"]]],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",4,[[["self"],["usize"]]]],[11,"clear","","Remove all elements in the vector.",4,[[["self"]]]],[11,"retain","","Retains only the elements specified by the predicate.",4,[[["self"],["f"]]]],[11,"set_len","","Set the vector’s length without dropping or moving out elements",4,[[["self"],["usize"]]]],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items from start to end. The element range is removed even if the iterator is not consumed until the end.",4,[[["self"],["r"]],["drain"]]],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",4,[[["self"]],["result"]]],[11,"dispose","","Dispose of `self` without the overwriting that is needed in Drop.",4,[[["self"]]]],[11,"as_slice","","Return a slice containing all elements of the vector.",4,N],[11,"as_mut_slice","","Return a mutable slice containing all elements of the vector.",4,N],[11,"deref","","",4,N],[11,"deref_mut","","",4,N],[11,"from","","",4,[[["a"]],["self"]]],[11,"into_iter","","",4,[[["self"]],["intoiter"]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"drop","","",5,[[["self"]]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"drop","","",6,[[["self"]]]],[11,"extend","","",4,[[["self"],["t"]]]],[11,"from_iter","","",4,[[["t"]],["self"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"clone_from","","",4,[[["self"],["self"]]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"eq","","",4,[[["self"],["self"]],["bool"]]],[11,"eq","","",4,N],[11,"borrow","","",4,N],[11,"borrow_mut","","",4,N],[11,"as_ref","","",4,N],[11,"as_mut","","",4,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"default","","Return an empty array",4,[[],["arrayvec"]]],[11,"partial_cmp","","",4,[[["self"],["arrayvec"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["self"]],["bool"]]],[11,"le","","",4,[[["self"],["self"]],["bool"]]],[11,"ge","","",4,[[["self"],["self"]],["bool"]]],[11,"gt","","",4,[[["self"],["self"]],["bool"]]],[11,"cmp","","",4,[[["self"],["arrayvec"]],["ordering"]]],[11,"write","","",4,N],[11,"flush","","",4,[[["self"]],["result"]]],[11,"start","","Start index (inclusive)",3,[[["self"]],["option",["usize"]]]],[11,"end","","End index (exclusive)",3,[[["self"]],["option",["usize"]]]]],"paths":[[3,"ArrayString"],[3,"CapacityError"],[8,"Array"],[8,"RangeArgument"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["byteorder"]={"doc":"This crate provides convenience methods for encoding and decoding numbers in either [big-endian or little-endian order].","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",N,N],[4,"LittleEndian","","Defines little-endian serialization.",N,N],[6,"BE","","A type alias for [`BigEndian`].",N,N],[6,"LE","","A type alias for [`LittleEndian`].",N,N],[6,"NetworkEndian","","Defines network byte order serialization.",N,N],[6,"NativeEndian","","Defines system native-endian serialization.",N,N],[8,"ReadBytesExt","","Extends [`Read`] with methods for reading numbers. (For `std::io`.)",N,N],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,[[["self"]],["result",["u8"]]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[["self"]],["result",["i8"]]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,[[["self"]],["result",["u16"]]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[["self"]],["result",["i16"]]]],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["u64"]]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["i64"]]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f32"]]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f64"]]]],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,N],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,N],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,N],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,N],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,N],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,N],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f32_into_unchecked","","DEPRECATED.",0,N],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f64_into_unchecked","","DEPRECATED.",0,N],[8,"WriteBytesExt","","Extends [`Write`] with methods for writing numbers. (For `std::io`.)",N,N],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[["self"],["u8"]],["result"]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[["self"],["i8"]],["result"]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,[[["self"],["u16"]],["result"]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[["self"],["i16"]],["result"]]],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["u64"],["usize"]],["result"]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[["self"],["i64"],["usize"]],["result"]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,[[["self"],["f32"]],["result"]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,[[["self"],["f64"]],["result"]]],[8,"ByteOrder","","`ByteOrder` describes types that can serialize integers as bytes.",N,N],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,N],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,N],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,N],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,N],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,N],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,N],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,N],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,N],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,N],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,N],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,N],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,N],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,N],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,N],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,N],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,N],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,N],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,N],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,N],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,N],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,N],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,N],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,N],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,N],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,N],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,N],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,N],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,N],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,N],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,N],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,N],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,N],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,N],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,N],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,N],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,N],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,N],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,N],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,N],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,N],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,N],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,N],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,N],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,N],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,N],[11,"clone","","",3,[[["self"]],["bigendian"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"hash","","",3,N],[11,"cmp","","",3,[[["self"],["bigendian"]],["ordering"]]],[11,"eq","","",3,[[["self"],["bigendian"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["bigendian"]],["option",["ordering"]]]],[11,"default","","",3,[[],["bigendian"]]],[11,"clone","","",4,[[["self"]],["littleendian"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"hash","","",4,N],[11,"cmp","","",4,[[["self"],["littleendian"]],["ordering"]]],[11,"eq","","",4,[[["self"],["littleendian"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["littleendian"]],["option",["ordering"]]]],[11,"default","","",4,[[],["littleendian"]]],[11,"read_u16","","",3,N],[11,"read_u32","","",3,N],[11,"read_u64","","",3,N],[11,"read_uint","","",3,N],[11,"write_u16","","",3,N],[11,"write_u32","","",3,N],[11,"write_u64","","",3,N],[11,"write_uint","","",3,N],[11,"read_u16_into","","",3,N],[11,"read_u32_into","","",3,N],[11,"read_u64_into","","",3,N],[11,"write_u16_into","","",3,N],[11,"write_u32_into","","",3,N],[11,"write_u64_into","","",3,N],[11,"from_slice_u16","","",3,N],[11,"from_slice_u32","","",3,N],[11,"from_slice_u64","","",3,N],[11,"from_slice_f32","","",3,N],[11,"from_slice_f64","","",3,N],[11,"read_u16","","",4,N],[11,"read_u32","","",4,N],[11,"read_u64","","",4,N],[11,"read_uint","","",4,N],[11,"write_u16","","",4,N],[11,"write_u32","","",4,N],[11,"write_u64","","",4,N],[11,"write_uint","","",4,N],[11,"read_u16_into","","",4,N],[11,"read_u32_into","","",4,N],[11,"read_u64_into","","",4,N],[11,"write_u16_into","","",4,N],[11,"write_u32_into","","",4,N],[11,"write_u64_into","","",4,N],[11,"from_slice_u16","","",4,N],[11,"from_slice_u32","","",4,N],[11,"from_slice_u64","","",4,N],[11,"from_slice_f32","","",4,N],[11,"from_slice_f64","","",4,N],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,[[["self"]],["result",["u8"]]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[["self"]],["result",["i8"]]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,[[["self"]],["result",["u16"]]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[["self"]],["result",["i16"]]]],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["u64"]]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["i64"]]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f32"]]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f64"]]]],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,N],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,N],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,N],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,N],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,N],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,N],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f32_into_unchecked","","DEPRECATED.",0,N],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f64_into_unchecked","","DEPRECATED.",0,N],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[["self"],["u8"]],["result"]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[["self"],["i8"]],["result"]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,[[["self"],["u16"]],["result"]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[["self"],["i16"]],["result"]]],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["u64"],["usize"]],["result"]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[["self"],["i64"],["usize"]],["result"]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,[[["self"],["f32"]],["result"]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,[[["self"],["f64"]],["result"]]]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"]={"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",N,N]],"paths":[]};
searchIndex["crunchy"]={"doc":"The crunchy unroller - deterministically unroll constant loops. For number \"crunching\".","items":[[14,"unroll","crunchy","Unroll the given for loop",N,N]],"paths":[]};
searchIndex["crypto"]={"doc":"","items":[[0,"aead","crypto","",N,N],[8,"AeadEncryptor","crypto::aead","",N,N],[10,"encrypt","","",0,N],[8,"AeadDecryptor","","",N,N],[10,"decrypt","","",1,N],[0,"aes","crypto","",N,N],[4,"KeySize","crypto::aes","AES key size",N,N],[13,"KeySize128","","",2,N],[13,"KeySize192","","",2,N],[13,"KeySize256","","",2,N],[5,"ecb_encryptor","","Get the best implementation of an EcbEncryptor",N,N],[5,"ecb_decryptor","","Get the best implementation of an EcbDecryptor",N,N],[5,"cbc_encryptor","","Get the best implementation of a CbcEncryptor",N,N],[5,"cbc_decryptor","","Get the best implementation of a CbcDecryptor",N,N],[5,"ctr","","Get the best implementation of a Ctr",N,N],[11,"clone","","",2,[[["self"]],["keysize"]]],[0,"aes_gcm","crypto","",N,N],[3,"AesGcm","crypto::aes_gcm","",N,N],[11,"new","","",3,N],[11,"encrypt","","",3,N],[11,"decrypt","","",3,N],[0,"aessafe","crypto","The `aessafe` module implements the AES algorithm completely in software without using any table lookups or other timing dependant mechanisms. This module actually contains two seperate implementations - an implementation that works on a single block at a time and a second implementation that processes 8 blocks in parallel. Some block encryption modes really only work if you are processing a single blocks (CFB, OFB, and CBC encryption for example) while other modes are trivially parallelizable (CTR and CBC decryption). Processing more blocks at once allows for greater efficiency, especially when using wide registers, such as the XMM registers available in x86 processors.",N,N],[3,"AesSafe128Encryptor","crypto::aessafe","",N,N],[3,"AesSafe128Decryptor","","",N,N],[3,"AesSafe192Encryptor","","",N,N],[3,"AesSafe192Decryptor","","",N,N],[3,"AesSafe256Encryptor","","",N,N],[3,"AesSafe256Decryptor","","",N,N],[3,"AesSafe128EncryptorX8","","",N,N],[3,"AesSafe128DecryptorX8","","",N,N],[3,"AesSafe192EncryptorX8","","",N,N],[3,"AesSafe192DecryptorX8","","",N,N],[3,"AesSafe256EncryptorX8","","",N,N],[3,"AesSafe256DecryptorX8","","",N,N],[11,"clone","","",4,[[["self"]],["aessafe128encryptor"]]],[11,"clone","","",5,[[["self"]],["aessafe128decryptor"]]],[11,"new","","",4,N],[11,"new","","",5,N],[11,"block_size","","",4,[[["self"]],["usize"]]],[11,"encrypt_block","","",4,N],[11,"block_size","","",5,[[["self"]],["usize"]]],[11,"decrypt_block","","",5,N],[11,"clone","","",6,[[["self"]],["aessafe192encryptor"]]],[11,"clone","","",7,[[["self"]],["aessafe192decryptor"]]],[11,"new","","",6,N],[11,"new","","",7,N],[11,"block_size","","",6,[[["self"]],["usize"]]],[11,"encrypt_block","","",6,N],[11,"block_size","","",7,[[["self"]],["usize"]]],[11,"decrypt_block","","",7,N],[11,"clone","","",8,[[["self"]],["aessafe256encryptor"]]],[11,"clone","","",9,[[["self"]],["aessafe256decryptor"]]],[11,"new","","",8,N],[11,"new","","",9,N],[11,"block_size","","",8,[[["self"]],["usize"]]],[11,"encrypt_block","","",8,N],[11,"block_size","","",9,[[["self"]],["usize"]]],[11,"decrypt_block","","",9,N],[11,"clone","","",10,[[["self"]],["aessafe128encryptorx8"]]],[11,"clone","","",11,[[["self"]],["aessafe128decryptorx8"]]],[11,"new","","",10,N],[11,"new","","",11,N],[11,"block_size","","",10,[[["self"]],["usize"]]],[11,"encrypt_block_x8","","",10,N],[11,"block_size","","",11,[[["self"]],["usize"]]],[11,"decrypt_block_x8","","",11,N],[11,"clone","","",12,[[["self"]],["aessafe192encryptorx8"]]],[11,"clone","","",13,[[["self"]],["aessafe192decryptorx8"]]],[11,"new","","",12,N],[11,"new","","",13,N],[11,"block_size","","",12,[[["self"]],["usize"]]],[11,"encrypt_block_x8","","",12,N],[11,"block_size","","",13,[[["self"]],["usize"]]],[11,"decrypt_block_x8","","",13,N],[11,"clone","","",14,[[["self"]],["aessafe256encryptorx8"]]],[11,"clone","","",15,[[["self"]],["aessafe256decryptorx8"]]],[11,"new","","",14,N],[11,"new","","",15,N],[11,"block_size","","",14,[[["self"]],["usize"]]],[11,"encrypt_block_x8","","",14,N],[11,"block_size","","",15,[[["self"]],["usize"]]],[11,"decrypt_block_x8","","",15,N],[0,"bcrypt","crypto","",N,N],[5,"bcrypt","crypto::bcrypt","",N,N],[0,"bcrypt_pbkdf","crypto","",N,N],[5,"bcrypt_pbkdf","crypto::bcrypt_pbkdf","",N,N],[0,"blake2b","crypto","",N,N],[3,"Blake2b","crypto::blake2b","",N,N],[11,"clone","","",16,[[["self"]],["blake2b"]]],[11,"new","","",16,[[["usize"]],["blake2b"]]],[11,"new_keyed","","",16,N],[11,"reset","","",16,[[["self"]]]],[11,"blake2b","","",16,N],[11,"reset","","",16,[[["self"]]]],[11,"input","","",16,N],[11,"result","","",16,N],[11,"output_bits","","",16,[[["self"]],["usize"]]],[11,"block_size","","",16,[[["self"]],["usize"]]],[11,"input","","Process input data.",16,N],[11,"reset","","Reset the Mac state to begin processing another input stream.",16,[[["self"]]]],[11,"result","","Obtain the result of a Mac computation as a MacResult.",16,[[["self"]],["macresult"]]],[11,"raw_result","","Obtain the result of a Mac computation as [u8]. This method should be used very carefully since incorrect use of the Mac code could result in permitting a timing attack which defeats the security provided by a Mac function.",16,N],[11,"output_bytes","","Get the size of the Mac code, in bytes.",16,[[["self"]],["usize"]]],[0,"blake2s","crypto","",N,N],[3,"Blake2s","crypto::blake2s","",N,N],[11,"clone","","",17,[[["self"]],["blake2s"]]],[11,"new","","",17,[[["usize"]],["blake2s"]]],[11,"new_keyed","","",17,N],[11,"reset","","",17,[[["self"]]]],[11,"blake2s","","",17,N],[11,"reset","","",17,[[["self"]]]],[11,"input","","",17,N],[11,"result","","",17,N],[11,"output_bits","","",17,[[["self"]],["usize"]]],[11,"block_size","","",17,[[["self"]],["usize"]]],[11,"input","","Process input data.",17,N],[11,"reset","","Reset the Mac state to begin processing another input stream.",17,[[["self"]]]],[11,"result","","Obtain the result of a Mac computation as a MacResult.",17,[[["self"]],["macresult"]]],[11,"raw_result","","Obtain the result of a Mac computation as [u8]. This method should be used very carefully since incorrect use of the Mac code could result in permitting a timing attack which defeats the security provided by a Mac function.",17,N],[11,"output_bytes","","Get the size of the Mac code, in bytes.",17,[[["self"]],["usize"]]],[0,"blockmodes","crypto","",N,N],[3,"NoPadding","crypto::blockmodes","No padding mode for ECB and CBC encryption",N,N],[3,"PkcsPadding","","PKCS padding mode for ECB and CBC encryption",N,N],[3,"EncPadding","","Wraps a PaddingProcessor so that only pad_input() will actually be called.",N,N],[3,"DecPadding","","Wraps a PaddingProcessor so that only strip_output() will actually be called.",N,N],[3,"EcbEncryptor","","ECB Encryption mode",N,N],[3,"EcbDecryptor","","ECB Decryption mode",N,N],[3,"CbcEncryptor","","CBC encryption mode",N,N],[3,"CbcDecryptor","","CBC decryption mode",N,N],[3,"CtrMode","","CTR Mode",N,N],[3,"CtrModeX8","","CTR Mode that operates on 8 blocks at a time",N,N],[8,"PaddingProcessor","","A PaddingProcessor handles adding or removing padding",N,N],[10,"pad_input","","Add padding to the last block of input data If the mode can't handle a non-full block, it signals that error by simply leaving the block as it is which will be detected as an InvalidLength error.",18,[[["self"],["w"]]]],[10,"strip_output","","Remove padding from the last block of output data If false is returned, the processing fails",18,[[["self"],["r"]],["bool"]]],[11,"clone","","",19,[[["self"]],["nopadding"]]],[11,"pad_input","","",19,[[["self"],["w"]]]],[11,"strip_output","","",19,[[["self"],["r"]],["bool"]]],[11,"clone","","",20,[[["self"]],["pkcspadding"]]],[11,"pad_input","","",20,[[["self"],["w"]]]],[11,"strip_output","","",20,[[["self"],["r"]],["bool"]]],[11,"pad_input","","",21,[[["self"],["w"]]]],[11,"strip_output","","",21,[[["self"],["r"]],["bool"]]],[11,"pad_input","","",22,[[["self"],["w"]]]],[11,"strip_output","","",22,[[["self"],["r"]],["bool"]]],[11,"new","","Create a new ECB encryption mode object",23,[[["t"],["x"]],["ecbencryptor",["encpadding"]]]],[11,"reset","","",23,[[["self"]]]],[11,"encrypt","","",23,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[11,"new","","Create a new ECB decryption mode object",24,[[["t"],["x"]],["ecbdecryptor",["decpadding"]]]],[11,"reset","","",24,[[["self"]]]],[11,"decrypt","","",24,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[11,"new","","Create a new CBC encryption mode object",25,[[["t"],["x"],["vec",["u8"]]],["cbcencryptor",["encpadding"]]]],[11,"reset","","",25,N],[11,"encrypt","","",25,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[11,"new","","Create a new CBC decryption mode object",26,[[["t"],["x"],["vec",["u8"]]],["cbcdecryptor",["decpadding"]]]],[11,"reset","","",26,N],[11,"decrypt","","",26,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[11,"new","","Create a new CTR object",27,[[["a"],["vec",["u8"]]],["ctrmode"]]],[11,"reset","","",27,N],[11,"process","","",27,N],[11,"encrypt","","",27,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[11,"decrypt","","",27,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[11,"new","","Create a new CTR object that operates on 8 blocks at a time",28,N],[11,"reset","","",28,N],[11,"process","","",28,N],[11,"encrypt","","",28,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[11,"decrypt","","",28,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[0,"blowfish","crypto","",N,N],[3,"Blowfish","crypto::blowfish","",N,N],[11,"clone","","",29,[[["self"]],["blowfish"]]],[11,"new","","",29,N],[11,"init_state","","",29,[[],["blowfish"]]],[11,"expand_key","","",29,N],[11,"salted_expand_key","","",29,N],[11,"encrypt","","",29,N],[11,"block_size","","",29,[[["self"]],["usize"]]],[11,"encrypt_block","","",29,N],[11,"block_size","","",29,[[["self"]],["usize"]]],[11,"decrypt_block","","",29,N],[0,"buffer","crypto","",N,N],[3,"RefReadBuffer","crypto::buffer","",N,N],[3,"OwnedReadBuffer","","",N,N],[3,"RefWriteBuffer","","",N,N],[3,"BorrowedWriteBuffer","","",N,N],[3,"OwnedWriteBuffer","","",N,N],[4,"BufferResult","","",N,N],[13,"BufferUnderflow","","",30,N],[13,"BufferOverflow","","",30,N],[8,"ReadBuffer","","",N,N],[10,"is_empty","","",31,[[["self"]],["bool"]]],[10,"is_full","","",31,[[["self"]],["bool"]]],[10,"remaining","","",31,[[["self"]],["usize"]]],[10,"capacity","","",31,[[["self"]],["usize"]]],[11,"position","","",31,[[["self"]],["usize"]]],[10,"rewind","","",31,[[["self"],["usize"]]]],[10,"truncate","","",31,[[["self"],["usize"]]]],[10,"reset","","",31,[[["self"]]]],[10,"peek_next","","",31,N],[11,"peek_remaining","","",31,N],[10,"take_next","","",31,N],[11,"take_remaining","","",31,N],[11,"push_to","","",31,[[["self"],["w"]]]],[8,"WriteBuffer","","",N,N],[10,"is_empty","","",32,[[["self"]],["bool"]]],[10,"is_full","","",32,[[["self"]],["bool"]]],[10,"remaining","","",32,[[["self"]],["usize"]]],[10,"capacity","","",32,[[["self"]],["usize"]]],[11,"position","","",32,[[["self"]],["usize"]]],[10,"rewind","","",32,[[["self"],["usize"]]]],[10,"reset","","",32,[[["self"]]]],[10,"peek_read_buffer","","",32,[[["self"]],["refreadbuffer"]]],[10,"take_next","","",32,N],[11,"take_remaining","","",32,N],[10,"take_read_buffer","","",32,[[["self"]],["refreadbuffer"]]],[11,"clone","","",30,[[["self"]],["bufferresult"]]],[11,"new","","",33,N],[11,"is_empty","","",33,[[["self"]],["bool"]]],[11,"is_full","","",33,[[["self"]],["bool"]]],[11,"remaining","","",33,[[["self"]],["usize"]]],[11,"capacity","","",33,[[["self"]],["usize"]]],[11,"rewind","","",33,[[["self"],["usize"]]]],[11,"truncate","","",33,[[["self"],["usize"]]]],[11,"reset","","",33,[[["self"]]]],[11,"peek_next","","",33,N],[11,"take_next","","",33,N],[11,"new","","",34,[[["vec",["u8"]]],["ownedreadbuffer"]]],[11,"new_with_len","","",34,[[["vec",["u8"]],["usize"]],["ownedreadbuffer"]]],[11,"into_write_buffer","","",34,[[["self"]],["ownedwritebuffer"]]],[11,"borrow_write_buffer","","",34,[[["self"]],["borrowedwritebuffer"]]],[11,"is_empty","","",34,[[["self"]],["bool"]]],[11,"is_full","","",34,[[["self"]],["bool"]]],[11,"remaining","","",34,[[["self"]],["usize"]]],[11,"capacity","","",34,[[["self"]],["usize"]]],[11,"rewind","","",34,[[["self"],["usize"]]]],[11,"truncate","","",34,[[["self"],["usize"]]]],[11,"reset","","",34,[[["self"]]]],[11,"peek_next","","",34,N],[11,"take_next","","",34,N],[11,"new","","",35,N],[11,"is_empty","","",35,[[["self"]],["bool"]]],[11,"is_full","","",35,[[["self"]],["bool"]]],[11,"remaining","","",35,[[["self"]],["usize"]]],[11,"capacity","","",35,[[["self"]],["usize"]]],[11,"rewind","","",35,[[["self"],["usize"]]]],[11,"reset","","",35,[[["self"]]]],[11,"peek_read_buffer","","",35,[[["self"]],["refreadbuffer"]]],[11,"take_next","","",35,N],[11,"take_read_buffer","","",35,[[["self"]],["refreadbuffer"]]],[11,"is_empty","","",36,[[["self"]],["bool"]]],[11,"is_full","","",36,[[["self"]],["bool"]]],[11,"remaining","","",36,[[["self"]],["usize"]]],[11,"capacity","","",36,[[["self"]],["usize"]]],[11,"rewind","","",36,[[["self"],["usize"]]]],[11,"reset","","",36,[[["self"]]]],[11,"peek_read_buffer","","",36,[[["self"]],["refreadbuffer"]]],[11,"take_next","","",36,N],[11,"take_read_buffer","","",36,[[["self"]],["refreadbuffer"]]],[11,"new","","",37,[[["vec",["u8"]]],["ownedwritebuffer"]]],[11,"into_read_buffer","","",37,[[["self"]],["ownedreadbuffer"]]],[11,"is_empty","","",37,[[["self"]],["bool"]]],[11,"is_full","","",37,[[["self"]],["bool"]]],[11,"remaining","","",37,[[["self"]],["usize"]]],[11,"capacity","","",37,[[["self"]],["usize"]]],[11,"rewind","","",37,[[["self"],["usize"]]]],[11,"reset","","",37,[[["self"]]]],[11,"peek_read_buffer","","",37,[[["self"]],["refreadbuffer"]]],[11,"take_next","","",37,N],[11,"take_read_buffer","","",37,[[["self"]],["refreadbuffer"]]],[0,"chacha20","crypto","",N,N],[3,"ChaCha20","crypto::chacha20","",N,N],[11,"clone","","",38,[[["self"]],["chacha20"]]],[11,"new","","",38,N],[11,"new_xchacha20","","",38,N],[11,"process","","",38,N],[11,"encrypt","","",38,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[11,"decrypt","","",38,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[0,"chacha20poly1305","crypto","",N,N],[3,"ChaCha20Poly1305","crypto::chacha20poly1305","",N,N],[11,"clone","","",39,[[["self"]],["chacha20poly1305"]]],[11,"new","","",39,N],[11,"encrypt","","",39,N],[11,"decrypt","","",39,N],[0,"curve25519","crypto","",N,N],[3,"Fe","crypto::curve25519","",N,N],[12,"0","","",40,N],[3,"GeP2","","",N,N],[3,"GeP3","","",N,N],[3,"GeP1P1","","",N,N],[3,"GePrecomp","","",N,N],[3,"GeCached","","",N,N],[5,"ge_scalarmult_base","","",N,N],[5,"sc_reduce","","",N,N],[5,"sc_muladd","","",N,N],[5,"curve25519","","",N,N],[5,"curve25519_base","","",N,N],[11,"clone","","",40,[[["self"]],["fe"]]],[11,"eq","","",40,[[["self"],["fe"]],["bool"]]],[11,"add","","",40,[[["self"],["fe"]],["fe"]]],[11,"sub","","",40,[[["self"],["fe"]],["fe"]]],[11,"mul","","",40,[[["self"],["fe"]],["fe"]]],[11,"from_bytes","","",40,N],[11,"to_bytes","","",40,N],[11,"maybe_swap_with","","",40,[[["self"],["fe"],["i32"]]]],[11,"maybe_set","","",40,[[["self"],["fe"],["i32"]]]],[11,"invert","","",40,[[["self"]],["fe"]]],[11,"clone","","",41,[[["self"]],["gep2"]]],[11,"clone","","",42,[[["self"]],["gep3"]]],[11,"clone","","",43,[[["self"]],["gep1p1"]]],[11,"clone","","",44,[[["self"]],["geprecomp"]]],[11,"clone","","",45,[[["self"]],["gecached"]]],[11,"to_bytes","","",41,N],[11,"double_scalarmult_vartime","","",41,N],[11,"from_bytes_negate_vartime","","",42,N],[11,"to_bytes","","",42,N],[11,"add","","",42,[[["self"],["gecached"]],["gep1p1"]]],[11,"add","","",42,[[["self"],["geprecomp"]],["gep1p1"]]],[11,"sub","","",42,[[["self"],["gecached"]],["gep1p1"]]],[11,"sub","","",42,[[["self"],["geprecomp"]],["gep1p1"]]],[11,"maybe_set","","",44,[[["self"],["geprecomp"],["i32"]]]],[11,"select","","",44,[[["usize"],["i8"]],["geprecomp"]]],[0,"digest","crypto","",N,N],[8,"Digest","crypto::digest","The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2 family of digest functions.",N,N],[10,"input","","Provide message data.",46,N],[10,"result","","Retrieve the digest result. This method may be called multiple times.",46,N],[10,"reset","","Reset the digest. This method must be called after result() and before supplying more data.",46,[[["self"]]]],[10,"output_bits","","Get the output size in bits.",46,[[["self"]],["usize"]]],[11,"output_bytes","","Get the output size in bytes.",46,[[["self"]],["usize"]]],[10,"block_size","","Get the block size in bytes.",46,[[["self"]],["usize"]]],[11,"input_str","","Convenience function that feeds a string into a digest.",46,[[["self"],["str"]]]],[11,"result_str","","Convenience function that retrieves the result of a digest as a String in hexadecimal format.",46,[[["self"]],["string"]]],[0,"ed25519","crypto","",N,N],[5,"keypair","crypto::ed25519","",N,N],[5,"signature","","",N,N],[5,"verify","","",N,N],[5,"exchange","","",N,N],[0,"fortuna","crypto","An implementation of the Fortuna CSPRNG",N,N],[3,"Fortuna","crypto::fortuna","The `Fortuna` CSPRNG (PC 9.5)",N,N],[17,"MIN_POOL_SIZE","","Length in bytes that the first pool must be before a \"catastrophic reseed\" is allowed to happen. (A direct reseed through the `SeedableRng` API is not affected by this limit.)",N,N],[11,"new_unseeded","","Creates a new unseeded `Fortuna` (PC 9.5.4)",47,[[],["fortuna"]]],[11,"add_random_event","","Adds a random event `e` from source `s` to entropy pool `i` (PC 9.5.6)",47,N],[11,"fill_bytes","","Generate a bunch of random data into `dest` (PC 9.5.5)",47,N],[11,"next_u32","","",47,[[["self"]],["u32"]]],[11,"from_seed","","",47,N],[11,"reseed","","",47,N],[0,"ghash","crypto","",N,N],[3,"Ghash","crypto::ghash","A structure representing the state of a GHASH computation",N,N],[3,"GhashWithC","","A structure representing the state of a GHASH computation, after input for C was provided",N,N],[11,"clone","","",48,[[["self"]],["ghash"]]],[11,"clone","","",49,[[["self"]],["ghashwithc"]]],[11,"new","","Creates a new GHASH state, with `h` as the key",48,N],[11,"input_a","","Feeds data for GHASH's A input",48,N],[11,"input_c","","Feeds data for GHASH's C input",48,N],[11,"result","","Retrieve the digest result",48,N],[11,"input_c","","Feeds data for GHASH's C input",49,N],[11,"result","","Retrieve the digest result",49,N],[11,"input","","",48,N],[11,"reset","","",48,[[["self"]]]],[11,"result","","",48,[[["self"]],["macresult"]]],[11,"raw_result","","",48,N],[11,"output_bytes","","",48,[[["self"]],["usize"]]],[0,"hc128","crypto","",N,N],[3,"Hc128","crypto::hc128","",N,N],[11,"clone","","",50,[[["self"]],["hc128"]]],[11,"new","","",50,N],[11,"process","","",50,N],[11,"encrypt","","",50,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[11,"decrypt","","",50,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[0,"hmac","crypto","This module implements the Hmac function - a Message Authentication Code using a Digest.",N,N],[3,"Hmac","crypto::hmac","The Hmac struct represents an Hmac function - a Message Authentication Code using a Digest.",N,N],[11,"new","","Create a new Hmac instance.",51,N],[11,"input","","",51,N],[11,"reset","","",51,[[["self"]]]],[11,"result","","",51,[[["self"]],["macresult"]]],[11,"raw_result","","",51,N],[11,"output_bytes","","",51,[[["self"]],["usize"]]],[0,"hkdf","crypto","This module implements the HMAC-based Extract-and-Expand Key Derivation Function as specified by  https://tools.ietf.org/html/rfc5869.",N,N],[5,"hkdf_extract","crypto::hkdf","Execute the HKDF-Extract function.  Applications MUST NOT use this for password hashing.",N,N],[5,"hkdf_expand","","Execute the HKDF-Expand function.  Applications MUST NOT use this for password hashing.",N,N],[0,"mac","crypto","The mac module defines the Message Authentication Code (Mac) trait.",N,N],[3,"MacResult","crypto::mac","A MacResult wraps a Mac code and provides a safe Eq implementation that runs in fixed time.",N,N],[8,"Mac","","The Mac trait defines methods for a Message Authentication function.",N,N],[10,"input","","Process input data.",52,N],[10,"reset","","Reset the Mac state to begin processing another input stream.",52,[[["self"]]]],[10,"result","","Obtain the result of a Mac computation as a MacResult.",52,[[["self"]],["macresult"]]],[10,"raw_result","","Obtain the result of a Mac computation as [u8]. This method should be used very carefully since incorrect use of the Mac code could result in permitting a timing attack which defeats the security provided by a Mac function.",52,N],[10,"output_bytes","","Get the size of the Mac code, in bytes.",52,[[["self"]],["usize"]]],[11,"new","","Create a new MacResult.",53,N],[11,"new_from_owned","","Create a new MacResult taking ownership of the specified code value.",53,[[["vec",["u8"]]],["macresult"]]],[11,"code","","Get the code value. Be very careful using this method, since incorrect use of the code value may permit timing attacks which defeat the security provided by the Mac function.",53,N],[11,"eq","","",53,[[["self"],["macresult"]],["bool"]]],[0,"md5","crypto","",N,N],[3,"Md5","crypto::md5","The MD5 Digest algorithm",N,N],[11,"clone","","",54,[[["self"]],["md5"]]],[11,"new","","Construct a new instance of the MD5 Digest.",54,[[],["md5"]]],[11,"input","","",54,N],[11,"reset","","",54,[[["self"]]]],[11,"result","","",54,N],[11,"output_bits","","",54,[[["self"]],["usize"]]],[11,"block_size","","",54,[[["self"]],["usize"]]],[0,"pbkdf2","crypto","This module implements the PBKDF2 Key Derivation Function as specified by http://tools.ietf.org/html/rfc2898.",N,N],[5,"pbkdf2","crypto::pbkdf2","Execute the PBKDF2 Key Derivation Function. The Scrypt Key Derivation Function generally provides better security, so, applications that do not have a requirement to use PBKDF2 specifically should consider using that function instead.",N,N],[5,"pbkdf2_simple","","pbkdf2_simple is a helper function that should be sufficient for the majority of cases where an application needs to use PBKDF2 to hash a password for storage. The result is a String that contains the parameters used as part of its encoding. The pbkdf2_check function may be used on a password to check if it is equal to a hashed value.",N,[[["str"],["u32"]],["result",["string"]]]],[5,"pbkdf2_check","","pbkdf2_check compares a password against the result of a previous call to pbkdf2_simple and returns true if the passed in password hashes to the same value.",N,[[["str"],["str"]],["result",["bool","str"]]]],[0,"poly1305","crypto","",N,N],[3,"Poly1305","crypto::poly1305","",N,N],[11,"clone","","",55,[[["self"]],["poly1305"]]],[11,"new","","",55,N],[11,"input","","",55,N],[11,"reset","","",55,[[["self"]]]],[11,"result","","",55,[[["self"]],["macresult"]]],[11,"raw_result","","",55,N],[11,"output_bytes","","",55,[[["self"]],["usize"]]],[0,"rc4","crypto","An implementation of the RC4 (also sometimes called ARC4) stream cipher. THIS IMPLEMENTATION IS NOT A FIXED TIME IMPLEMENTATION.",N,N],[3,"Rc4","crypto::rc4","",N,N],[11,"clone","","",56,[[["self"]],["rc4"]]],[11,"new","","",56,N],[11,"process","","",56,N],[11,"encrypt","","",56,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[11,"decrypt","","",56,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[0,"ripemd160","crypto","An implementation of the RIPEMD-160 cryptographic hash.",N,N],[3,"Ripemd160","crypto::ripemd160","Structure representing the state of a Ripemd160 computation",N,N],[11,"clone","","",57,[[["self"]],["ripemd160"]]],[11,"new","","",57,[[],["ripemd160"]]],[11,"reset","","Resets the hash to its original state also clearing the buffer. To be used in between hashing separate messages to avoid having to recreate and allocate the whole structure.",57,[[["self"]]]],[11,"input","","Adds the input `msg` to the hash. This method can be called repeatedly for use with streaming messages.",57,N],[11,"result","","Returns the resulting digest of the entire message. Note: `out` must be at least 20 bytes (160 bits)",57,N],[11,"output_bits","","Returns the size of the digest in bits",57,[[["self"]],["usize"]]],[11,"block_size","","Returns the block size the hash operates on in bytes",57,[[["self"]],["usize"]]],[0,"salsa20","crypto","",N,N],[3,"Salsa20","crypto::salsa20","",N,N],[5,"hsalsa20","","",N,N],[11,"clone","","",58,[[["self"]],["salsa20"]]],[11,"new","","",58,N],[11,"new_xsalsa20","","",58,N],[11,"process","","",58,N],[11,"encrypt","","",58,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[11,"decrypt","","",58,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[0,"scrypt","crypto","This module implements the Scrypt key derivation function as specified in [1].",N,N],[3,"ScryptParams","crypto::scrypt","The Scrypt parameter values.",N,N],[5,"scrypt","","The scrypt key derivation function.",N,N],[5,"scrypt_simple","","scrypt_simple is a helper function that should be sufficient for the majority of cases where an application needs to use Scrypt to hash a password for storage. The result is a String that contains the parameters used as part of its encoding. The scrypt_check function may be used on a password to check if it is equal to a hashed value.",N,[[["str"],["scryptparams"]],["result",["string"]]]],[5,"scrypt_check","","scrypt_check compares a password against the result of a previous call to scrypt_simple and returns true if the passed in password hashes to the same value.",N,[[["str"],["str"]],["result",["bool","str"]]]],[11,"clone","","",59,[[["self"]],["scryptparams"]]],[11,"new","","Create a new instance of ScryptParams.",59,[[["u8"],["u32"],["u32"]],["scryptparams"]]],[0,"sha1","crypto","An implementation of the SHA-1 cryptographic hash algorithm.",N,N],[3,"Sha1","crypto::sha1","Structure representing the state of a Sha1 computation",N,N],[5,"sha1_first","","Not an intrinsic, but gets the first element of a vector.",N,[[["u32x4"]],["u32"]]],[5,"sha1_first_add","","Not an intrinsic, but adds a word to the first element of a vector.",N,[[["u32"],["u32x4"]],["u32x4"]]],[5,"sha1_schedule_x4","","Performs 4 rounds of the message schedule update.",N,[[["u32x4"],["u32x4"],["u32x4"],["u32x4"]],["u32x4"]]],[5,"sha1_first_half","","Emulates `llvm.x86.sha1nexte` intrinsic.",N,[[["u32x4"],["u32x4"]],["u32x4"]]],[5,"sha1_digest_round_x4","","Emulates `llvm.x86.sha1rnds4` intrinsic. Performs 4 rounds of the message block digest.",N,[[["u32x4"],["u32x4"],["i8"]],["u32x4"]]],[5,"sha1_digest_block_u32","","Process a block with the SHA-1 algorithm.",N,N],[5,"sha1_digest_block","","Process a block with the SHA-1 algorithm. (See more...)",N,N],[11,"clone","","",60,[[["self"]],["sha1"]]],[11,"new","","Construct a `sha` object",60,[[],["sha1"]]],[11,"reset","","",60,[[["self"]]]],[11,"input","","",60,N],[11,"result","","",60,N],[11,"output_bits","","",60,[[["self"]],["usize"]]],[11,"block_size","","",60,[[["self"]],["usize"]]],[0,"sha2","crypto","An implementation of the SHA-2 cryptographic hash algorithms.",N,N],[3,"Sha512","crypto::sha2","The SHA-512 hash algorithm with the SHA-512 initial hash value.",N,N],[3,"Sha384","","The SHA-512 hash algorithm with the SHA-384 initial hash value. The result is truncated to 384 bits.",N,N],[3,"Sha512Trunc256","","The SHA-512 hash algorithm with the SHA-512/256 initial hash value. The result is truncated to 256 bits.",N,N],[3,"Sha512Trunc224","","The SHA-512 hash algorithm with the SHA-512/224 initial hash value. The result is truncated to 224 bits.",N,N],[3,"Sha256","","The SHA-256 hash algorithm with the SHA-256 initial hash value.",N,N],[3,"Sha224","","The SHA-256 hash algorithm with the SHA-224 initial hash value. The result is truncated to 224 bits.",N,N],[5,"sha256_schedule_x4","","Performs 4 rounds of the SHA-256 message schedule update.",N,[[["u32x4"],["u32x4"],["u32x4"],["u32x4"]],["u32x4"]]],[5,"sha256_digest_round_x2","","Emulates `llvm.x86.sha256rnds2` intrinsic.",N,[[["u32x4"],["u32x4"],["u32x4"]],["u32x4"]]],[5,"sha256_digest_block_u32","","Process a block with the SHA-256 algorithm.",N,N],[5,"sha256_digest_block","","Process a block with the SHA-256 algorithm. (See more...)",N,N],[5,"sha512_schedule_x2","","Performs 2 rounds of the SHA-512 message schedule update.",N,[[["u64x2"],["u64x2"],["u64x2"],["u64x2"]],["u64x2"]]],[5,"sha512_digest_round","","Performs one round of the SHA-512 message block digest.",N,[[["u64x2"],["u64x2"],["u64x2"],["u64x2"],["u64"]],["u64x2"]]],[5,"sha512_digest_block_u64","","Process a block with the SHA-512 algorithm.",N,N],[5,"sha512_digest_block","","Process a block with the SHA-512 algorithm. (See more...)",N,N],[17,"K64","","Constants necessary for SHA-512 family of digests.",N,N],[17,"K64X2","","Constants necessary for SHA-512 family of digests.",N,N],[17,"K32","","Constants necessary for SHA-256 family of digests.",N,N],[17,"K32X4","","Constants necessary for SHA-256 family of digests.",N,N],[11,"clone","","",61,[[["self"]],["sha512"]]],[11,"new","","Construct an new instance of a SHA-512 digest.",61,[[],["sha512"]]],[11,"input","","",61,N],[11,"result","","",61,N],[11,"reset","","",61,[[["self"]]]],[11,"output_bits","","",61,[[["self"]],["usize"]]],[11,"block_size","","",61,[[["self"]],["usize"]]],[11,"clone","","",62,[[["self"]],["sha384"]]],[11,"new","","Construct an new instance of a SHA-384 digest.",62,[[],["sha384"]]],[11,"input","","",62,N],[11,"result","","",62,N],[11,"reset","","",62,[[["self"]]]],[11,"output_bits","","",62,[[["self"]],["usize"]]],[11,"block_size","","",62,[[["self"]],["usize"]]],[11,"clone","","",63,[[["self"]],["sha512trunc256"]]],[11,"new","","Construct an new instance of a SHA-512/256 digest.",63,[[],["sha512trunc256"]]],[11,"input","","",63,N],[11,"result","","",63,N],[11,"reset","","",63,[[["self"]]]],[11,"output_bits","","",63,[[["self"]],["usize"]]],[11,"block_size","","",63,[[["self"]],["usize"]]],[11,"clone","","",64,[[["self"]],["sha512trunc224"]]],[11,"new","","Construct an new instance of a SHA-512/224 digest.",64,[[],["sha512trunc224"]]],[11,"input","","",64,N],[11,"result","","",64,N],[11,"reset","","",64,[[["self"]]]],[11,"output_bits","","",64,[[["self"]],["usize"]]],[11,"block_size","","",64,[[["self"]],["usize"]]],[11,"clone","","",65,[[["self"]],["sha256"]]],[11,"new","","Construct an new instance of a SHA-256 digest.",65,[[],["sha256"]]],[11,"input","","",65,N],[11,"result","","",65,N],[11,"reset","","",65,[[["self"]]]],[11,"output_bits","","",65,[[["self"]],["usize"]]],[11,"block_size","","",65,[[["self"]],["usize"]]],[11,"clone","","",66,[[["self"]],["sha224"]]],[11,"new","","Construct an new instance of a SHA-224 digest.",66,[[],["sha224"]]],[11,"input","","",66,N],[11,"result","","",66,N],[11,"reset","","",66,[[["self"]]]],[11,"output_bits","","",66,[[["self"]],["usize"]]],[11,"block_size","","",66,[[["self"]],["usize"]]],[0,"sha3","crypto","An implementation of the SHA-3 cryptographic hash algorithms.",N,N],[3,"Sha3","crypto::sha3","",N,N],[4,"Sha3Mode","","SHA-3 Modes.",N,N],[13,"Sha3_224","","",67,N],[13,"Sha3_256","","",67,N],[13,"Sha3_384","","",67,N],[13,"Sha3_512","","",67,N],[13,"Shake128","","",67,N],[13,"Shake256","","",67,N],[13,"Keccak224","","",67,N],[13,"Keccak256","","",67,N],[13,"Keccak384","","",67,N],[13,"Keccak512","","",67,N],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"clone","","",67,[[["self"]],["sha3mode"]]],[11,"digest_length","","Return the expected hash size in bytes specified for `mode`, or 0 for modes with variable output as for shake functions.",67,[[["self"]],["usize"]]],[11,"is_shake","","Return `true` if `mode` is a SHAKE mode.",67,[[["self"]],["bool"]]],[11,"is_keccak","","Return `true` if `mode` is a Keccak mode.",67,[[["self"]],["bool"]]],[11,"new","","New SHA-3 instanciated from specified SHA-3 `mode`.",68,[[["sha3mode"]],["sha3"]]],[11,"sha3_224","","New SHA3-224 instance.",68,[[],["sha3"]]],[11,"sha3_256","","New SHA3-256 instance.",68,[[],["sha3"]]],[11,"sha3_384","","New SHA3-384 instance.",68,[[],["sha3"]]],[11,"sha3_512","","New SHA3-512 instance.",68,[[],["sha3"]]],[11,"shake_128","","New SHAKE-128 instance.",68,[[],["sha3"]]],[11,"shake_256","","New SHAKE-256 instance.",68,[[],["sha3"]]],[11,"keccak224","","New Keccak224 instance.",68,[[],["sha3"]]],[11,"keccak256","","New Keccak256 instance.",68,[[],["sha3"]]],[11,"keccak384","","New Keccak384 instance.",68,[[],["sha3"]]],[11,"keccak512","","New Keccak512 instance.",68,[[],["sha3"]]],[11,"input","","",68,N],[11,"result","","",68,N],[11,"reset","","",68,[[["self"]]]],[11,"output_bits","","",68,[[["self"]],["usize"]]],[11,"block_size","","",68,[[["self"]],["usize"]]],[11,"clone","","",68,[[["self"]],["self"]]],[0,"sosemanuk","crypto","",N,N],[3,"Sosemanuk","crypto::sosemanuk","",N,N],[11,"clone","","",69,[[["self"]],["sosemanuk"]]],[11,"new","","",69,N],[11,"process","","",69,N],[11,"encrypt","","",69,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[11,"decrypt","","",69,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[0,"symmetriccipher","crypto","",N,N],[4,"SymmetricCipherError","crypto::symmetriccipher","",N,N],[13,"InvalidLength","","",70,N],[13,"InvalidPadding","","",70,N],[8,"BlockEncryptor","","",N,N],[10,"block_size","","",71,[[["self"]],["usize"]]],[10,"encrypt_block","","",71,N],[8,"BlockEncryptorX8","","",N,N],[10,"block_size","","",72,[[["self"]],["usize"]]],[10,"encrypt_block_x8","","",72,N],[8,"BlockDecryptor","","",N,N],[10,"block_size","","",73,[[["self"]],["usize"]]],[10,"decrypt_block","","",73,N],[8,"BlockDecryptorX8","","",N,N],[10,"block_size","","",74,[[["self"]],["usize"]]],[10,"decrypt_block_x8","","",74,N],[8,"Encryptor","","",N,N],[10,"encrypt","","",75,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[8,"Decryptor","","",N,N],[10,"decrypt","","",76,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[8,"SynchronousStreamCipher","","",N,N],[10,"process","","",77,N],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"clone","","",70,[[["self"]],["symmetricciphererror"]]],[0,"util","crypto","",N,N],[5,"supports_aesni","crypto::util","",N,[[],["bool"]]],[5,"secure_memset","","",N,N],[5,"fixed_time_eq","","Compare two vectors using a fixed number of operations. If the two vectors are not of equal length, the function returns false immediately.",N,N],[5,"rust_crypto_util_supports_aesni","","",N,N],[5,"rust_crypto_util_fixed_time_eq_asm","","",N,N],[5,"rust_crypto_util_secure_memset","","",N,N],[0,"whirlpool","crypto","An implementation of the Whirlpool cryptographic hash algorithm.",N,N],[3,"Whirlpool","crypto::whirlpool","",N,N],[11,"clone","","",78,[[["self"]],["whirlpool"]]],[11,"new","","",78,[[],["whirlpool"]]],[11,"input","","",78,N],[11,"result","","",78,N],[11,"reset","","",78,[[["self"]]]],[11,"output_bits","","",78,[[["self"]],["usize"]]],[11,"block_size","","",78,[[["self"]],["usize"]]],[0,"aesni","crypto","",N,N],[3,"AesNiEncryptor","crypto::aesni","",N,N],[3,"AesNiDecryptor","","",N,N],[11,"clone","","",79,[[["self"]],["aesniencryptor"]]],[11,"clone","","",80,[[["self"]],["aesnidecryptor"]]],[11,"new","","",79,N],[11,"new","","",80,N],[11,"block_size","","",79,[[["self"]],["usize"]]],[11,"encrypt_block","","",79,N],[11,"block_size","","",80,[[["self"]],["usize"]]],[11,"decrypt_block","","",80,N]],"paths":[[8,"AeadEncryptor"],[8,"AeadDecryptor"],[4,"KeySize"],[3,"AesGcm"],[3,"AesSafe128Encryptor"],[3,"AesSafe128Decryptor"],[3,"AesSafe192Encryptor"],[3,"AesSafe192Decryptor"],[3,"AesSafe256Encryptor"],[3,"AesSafe256Decryptor"],[3,"AesSafe128EncryptorX8"],[3,"AesSafe128DecryptorX8"],[3,"AesSafe192EncryptorX8"],[3,"AesSafe192DecryptorX8"],[3,"AesSafe256EncryptorX8"],[3,"AesSafe256DecryptorX8"],[3,"Blake2b"],[3,"Blake2s"],[8,"PaddingProcessor"],[3,"NoPadding"],[3,"PkcsPadding"],[3,"EncPadding"],[3,"DecPadding"],[3,"EcbEncryptor"],[3,"EcbDecryptor"],[3,"CbcEncryptor"],[3,"CbcDecryptor"],[3,"CtrMode"],[3,"CtrModeX8"],[3,"Blowfish"],[4,"BufferResult"],[8,"ReadBuffer"],[8,"WriteBuffer"],[3,"RefReadBuffer"],[3,"OwnedReadBuffer"],[3,"RefWriteBuffer"],[3,"BorrowedWriteBuffer"],[3,"OwnedWriteBuffer"],[3,"ChaCha20"],[3,"ChaCha20Poly1305"],[3,"Fe"],[3,"GeP2"],[3,"GeP3"],[3,"GeP1P1"],[3,"GePrecomp"],[3,"GeCached"],[8,"Digest"],[3,"Fortuna"],[3,"Ghash"],[3,"GhashWithC"],[3,"Hc128"],[3,"Hmac"],[8,"Mac"],[3,"MacResult"],[3,"Md5"],[3,"Poly1305"],[3,"Rc4"],[3,"Ripemd160"],[3,"Salsa20"],[3,"ScryptParams"],[3,"Sha1"],[3,"Sha512"],[3,"Sha384"],[3,"Sha512Trunc256"],[3,"Sha512Trunc224"],[3,"Sha256"],[3,"Sha224"],[4,"Sha3Mode"],[3,"Sha3"],[3,"Sosemanuk"],[4,"SymmetricCipherError"],[8,"BlockEncryptor"],[8,"BlockEncryptorX8"],[8,"BlockDecryptor"],[8,"BlockDecryptorX8"],[8,"Encryptor"],[8,"Decryptor"],[8,"SynchronousStreamCipher"],[3,"Whirlpool"],[3,"AesNiEncryptor"],[3,"AesNiDecryptor"]]};
searchIndex["edit_distance"]={"doc":"Edit distance","items":[[5,"edit_distance","edit_distance","Returns the edit distance between strings `a` and `b`.",N,[[["str"],["str"]],["usize"]]]],"paths":[]};
searchIndex["either"]={"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",N,N],[13,"Left","","A value of type `L`.",0,N],[13,"Right","","A value of type `R`.",0,N],[11,"clone","","",0,[[["self"]],["either"]]],[11,"eq","","",0,[[["self"],["either"]],["bool"]]],[11,"ne","","",0,[[["self"],["either"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["either"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["either"]],["bool"]]],[11,"le","","",0,[[["self"],["either"]],["bool"]]],[11,"gt","","",0,[[["self"],["either"]],["bool"]]],[11,"ge","","",0,[[["self"],["either"]],["bool"]]],[11,"cmp","","",0,[[["self"],["either"]],["ordering"]]],[11,"hash","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"is_left","","Return true if the value is the `Left` variant.",0,[[["self"]],["bool"]]],[11,"is_right","","Return true if the value is the `Right` variant.",0,[[["self"]],["bool"]]],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,[[["self"]],["option"]]],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,[[["self"]],["option"]]],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,[[["self"]],["either"]]],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,[[["self"]],["either"]]],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,[[["self"]],["either"]]],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,[[["self"],["f"]],["either"]]],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,[[["self"],["f"]],["either"]]],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,[[["self"],["f"],["g"]],["t"]]],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,[[["self"],["ctx"],["f"],["g"]],["t"]]],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"into_iter","","Convert the inner value to an iterator.",0,[[["self"]],["either"]]],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,[[["self"]],["t"]]],[11,"from","","",0,[[["result"]],["self"]]],[11,"into","","",0,[[["self"]],["result"]]],[11,"extend","","",0,[[["self"],["t"]]]],[11,"next","","",0,[[["self"]],["option"]]],[11,"size_hint","","",0,N],[11,"fold","","",0,[[["self"],["acc"],["g"]],["acc"]]],[11,"count","","",0,[[["self"]],["usize"]]],[11,"last","","",0,[[["self"]],["option"]]],[11,"nth","","",0,[[["self"],["usize"]],["option"]]],[11,"collect","","",0,[[["self"]],["b"]]],[11,"all","","",0,[[["self"],["f"]],["bool"]]],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"as_ref","","",0,[[["self"]],["target"]]],[11,"as_mut","","",0,[[["self"]],["target"]]],[11,"deref","","",0,N],[11,"deref_mut","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",N,N],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",N,N]],"paths":[[4,"Either"]]};
searchIndex["ethbloom"]={"doc":"","items":[[3,"Bloom","ethbloom","Unformatted binary data of fixed length.",N,N],[12,"0","","",0,N],[3,"BloomRef","","",N,N],[4,"Input","","",N,N],[13,"Raw","","",1,N],[13,"Hash","","",1,N],[11,"from","","",0,N],[11,"deref","","",0,N],[11,"as_ref","","",0,N],[11,"as_mut","","",0,N],[11,"as_ref","","",0,[[["self"]],["bloom"]]],[11,"deref_mut","","",0,N],[11,"new","","Create a new, zero-initialised, instance.",0,[[],["bloom"]]],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",0,[[],["bloom"]]],[11,"len","","Get the size of this object in bytes.",0,[[],["usize"]]],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",0,N],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",0,N],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",0,N],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",0,[[["self"],["self"]],["bool"]]],[11,"is_zero","","Returns `true` if no bits are set.",0,[[["self"]],["bool"]]],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",0,[[["self"]],["u64"]]],[11,"random","","Create a new, cryptographically random, instance.",0,[[],["bloom"]]],[11,"randomize","","Assign self have a cryptographically random value.",0,[[["self"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["bloom"]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"index","","",0,[[["self"],["usize"]],["u8"]]],[11,"index_mut","","",0,[[["self"],["usize"]],["u8"]]],[11,"index","","",0,N],[11,"index_mut","","",0,N],[11,"index","","",0,N],[11,"index_mut","","",0,N],[11,"bitor","","",0,N],[11,"bitand","","",0,N],[11,"bitxor","","",0,N],[11,"default","","",0,[[],["self"]]],[11,"from","","",0,[[["u64"]],["bloom"]]],[11,"from","","",0,N],[11,"hex","","Get a hex representation.",0,[[["self"]],["string"]]],[11,"rand","","",0,[[["r"]],["self"]]],[11,"from_str","","",0,[[["str"]],["result",["bloom","fromhexerror"]]]],[11,"from","","",0,[[["str"]],["bloom"]]],[11,"heap_size_of_children","","",0,[[["self"]],["usize"]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"eq","","",0,[[["self"],["bloomref"]],["bool"]]],[11,"from","","",0,[[["input"]],["bloom"]]],[11,"is_empty","","",0,[[["self"]],["bool"]]],[11,"contains_input","","",0,[[["self"],["input"]],["bool"]]],[11,"contains_bloom","","",0,[[["self"],["b"]],["bool"]]],[11,"accrue","","",0,[[["self"],["input"]]]],[11,"accrue_bloom","","",0,[[["self"],["b"]]]],[11,"data","","",0,N],[11,"clone","","",2,[[["self"]],["bloomref"]]],[11,"is_empty","","",2,[[["self"]],["bool"]]],[11,"contains_input","","",2,[[["self"],["input"]],["bool"]]],[11,"contains_bloom","","",2,[[["self"],["b"]],["bool"]]],[11,"data","","",2,N],[11,"from","","",2,N],[11,"from","","",2,[[["bloom"]],["self"]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[11,"deserialize","","",0,[[["d"]],["result"]]]],"paths":[[3,"Bloom"],[4,"Input"],[3,"BloomRef"]]};
searchIndex["ethereum_key"]={"doc":"","items":[[0,"band","ethereum_key","",N,N],[3,"Band","ethereum_key::band","",N,N],[12,"phrase","","",0,N],[12,"secret","","",0,N],[12,"public","","",0,N],[12,"address","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["band"]],["bool"]]],[11,"ne","","",0,[[["self"],["band"]],["bool"]]],[11,"generate","","",0,[[],["self"]]],[11,"validate_phrase","","",0,[[["str"]],["bool"]]],[11,"from","","",0,[[["string"]],["self"]]]],"paths":[[3,"Band"]]};
searchIndex["ethereum_types"]={"doc":"","items":[[3,"Bloom","ethereum_types","Unformatted binary data of fixed length.",N,N],[12,"0","","",0,N],[3,"BloomRef","","",N,N],[4,"BloomInput","","",N,N],[13,"Raw","","",1,N],[13,"Hash","","",1,N],[5,"clean_0x","","Return `s` without the `0x` at the beginning of it, if any.",N,[[["str"]],["str"]]],[3,"U64","","Little-endian large integer type",N,N],[12,"0","","",2,N],[3,"U128","","Little-endian large integer type",N,N],[12,"0","","",3,N],[3,"U256","","Little-endian large integer type",N,N],[12,"0","","",4,N],[3,"U512","","Little-endian large integer type",N,N],[12,"0","","",5,N],[3,"U1024","","Little-endian large integer type",N,N],[12,"0","","",6,N],[3,"H32","","Unformatted binary data of fixed length.",N,N],[12,"0","","",7,N],[3,"H64","","Unformatted binary data of fixed length.",N,N],[12,"0","","",8,N],[3,"H128","","Unformatted binary data of fixed length.",N,N],[12,"0","","",9,N],[3,"H160","","Unformatted binary data of fixed length.",N,N],[12,"0","","",10,N],[3,"H256","","Unformatted binary data of fixed length.",N,N],[12,"0","","",11,N],[3,"H264","","Unformatted binary data of fixed length.",N,N],[12,"0","","",12,N],[3,"H512","","Unformatted binary data of fixed length.",N,N],[12,"0","","",13,N],[3,"H520","","Unformatted binary data of fixed length.",N,N],[12,"0","","",14,N],[3,"H1024","","Unformatted binary data of fixed length.",N,N],[12,"0","","",15,N],[11,"serialize","","",7,[[["self"],["s"]],["result"]]],[11,"deserialize","","",7,[[["d"]],["result"]]],[11,"serialize","","",8,[[["self"],["s"]],["result"]]],[11,"deserialize","","",8,[[["d"]],["result"]]],[11,"serialize","","",9,[[["self"],["s"]],["result"]]],[11,"deserialize","","",9,[[["d"]],["result"]]],[11,"serialize","","",10,[[["self"],["s"]],["result"]]],[11,"deserialize","","",10,[[["d"]],["result"]]],[11,"serialize","","",11,[[["self"],["s"]],["result"]]],[11,"deserialize","","",11,[[["d"]],["result"]]],[11,"serialize","","",12,[[["self"],["s"]],["result"]]],[11,"deserialize","","",12,[[["d"]],["result"]]],[11,"serialize","","",13,[[["self"],["s"]],["result"]]],[11,"deserialize","","",13,[[["d"]],["result"]]],[11,"serialize","","",14,[[["self"],["s"]],["result"]]],[11,"deserialize","","",14,[[["d"]],["result"]]],[11,"serialize","","",15,[[["self"],["s"]],["result"]]],[11,"deserialize","","",15,[[["d"]],["result"]]],[11,"from","","",7,N],[11,"deref","","",7,N],[11,"as_ref","","",7,N],[11,"as_mut","","",7,N],[11,"as_ref","","",7,[[["self"]],["h32"]]],[11,"deref_mut","","",7,N],[11,"new","","Create a new, zero-initialised, instance.",7,[[],["h32"]]],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",7,[[],["h32"]]],[11,"len","","Get the size of this object in bytes.",7,[[],["usize"]]],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",7,N],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",7,N],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",7,N],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",7,[[["self"],["self"]],["bool"]]],[11,"is_zero","","Returns `true` if no bits are set.",7,[[["self"]],["bool"]]],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",7,[[["self"]],["u64"]]],[11,"random","","Create a new, cryptographically random, instance.",7,[[],["h32"]]],[11,"randomize","","Assign self have a cryptographically random value.",7,[[["self"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["h32"]]],[11,"partial_cmp","","",7,[[["self"],["self"]],["option",["ordering"]]]],[11,"hash","","",7,[[["self"],["h"]]]],[11,"index","","",7,[[["self"],["usize"]],["u8"]]],[11,"index_mut","","",7,[[["self"],["usize"]],["u8"]]],[11,"index","","",7,N],[11,"index_mut","","",7,N],[11,"index","","",7,N],[11,"index_mut","","",7,N],[11,"bitor","","",7,N],[11,"bitand","","",7,N],[11,"bitxor","","",7,N],[11,"default","","",7,[[],["self"]]],[11,"from","","",7,[[["u64"]],["h32"]]],[11,"from","","",7,N],[11,"hex","","Get a hex representation.",7,[[["self"]],["string"]]],[11,"rand","","",7,[[["r"]],["self"]]],[11,"from_str","","",7,[[["str"]],["result",["h32","fromhexerror"]]]],[11,"from","","",7,[[["str"]],["h32"]]],[11,"heap_size_of_children","","",7,[[["self"]],["usize"]]],[11,"eq","","",7,[[["self"],["self"]],["bool"]]],[11,"cmp","","",7,[[["self"],["self"]],["ordering"]]],[11,"from","","",8,N],[11,"deref","","",8,N],[11,"as_ref","","",8,N],[11,"as_mut","","",8,N],[11,"as_ref","","",8,[[["self"]],["h64"]]],[11,"deref_mut","","",8,N],[11,"new","","Create a new, zero-initialised, instance.",8,[[],["h64"]]],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",8,[[],["h64"]]],[11,"len","","Get the size of this object in bytes.",8,[[],["usize"]]],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",8,N],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",8,N],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",8,N],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",8,[[["self"],["self"]],["bool"]]],[11,"is_zero","","Returns `true` if no bits are set.",8,[[["self"]],["bool"]]],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",8,[[["self"]],["u64"]]],[11,"random","","Create a new, cryptographically random, instance.",8,[[],["h64"]]],[11,"randomize","","Assign self have a cryptographically random value.",8,[[["self"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["h64"]]],[11,"partial_cmp","","",8,[[["self"],["self"]],["option",["ordering"]]]],[11,"hash","","",8,[[["self"],["h"]]]],[11,"index","","",8,[[["self"],["usize"]],["u8"]]],[11,"index_mut","","",8,[[["self"],["usize"]],["u8"]]],[11,"index","","",8,N],[11,"index_mut","","",8,N],[11,"index","","",8,N],[11,"index_mut","","",8,N],[11,"bitor","","",8,N],[11,"bitand","","",8,N],[11,"bitxor","","",8,N],[11,"default","","",8,[[],["self"]]],[11,"from","","",8,[[["u64"]],["h64"]]],[11,"from","","",8,N],[11,"hex","","Get a hex representation.",8,[[["self"]],["string"]]],[11,"rand","","",8,[[["r"]],["self"]]],[11,"from_str","","",8,[[["str"]],["result",["h64","fromhexerror"]]]],[11,"from","","",8,[[["str"]],["h64"]]],[11,"heap_size_of_children","","",8,[[["self"]],["usize"]]],[11,"eq","","",8,[[["self"],["self"]],["bool"]]],[11,"cmp","","",8,[[["self"],["self"]],["ordering"]]],[11,"from","","",9,N],[11,"deref","","",9,N],[11,"as_ref","","",9,N],[11,"as_mut","","",9,N],[11,"as_ref","","",9,[[["self"]],["h128"]]],[11,"deref_mut","","",9,N],[11,"new","","Create a new, zero-initialised, instance.",9,[[],["h128"]]],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",9,[[],["h128"]]],[11,"len","","Get the size of this object in bytes.",9,[[],["usize"]]],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",9,N],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",9,N],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",9,N],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",9,[[["self"],["self"]],["bool"]]],[11,"is_zero","","Returns `true` if no bits are set.",9,[[["self"]],["bool"]]],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",9,[[["self"]],["u64"]]],[11,"random","","Create a new, cryptographically random, instance.",9,[[],["h128"]]],[11,"randomize","","Assign self have a cryptographically random value.",9,[[["self"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["h128"]]],[11,"partial_cmp","","",9,[[["self"],["self"]],["option",["ordering"]]]],[11,"hash","","",9,[[["self"],["h"]]]],[11,"index","","",9,[[["self"],["usize"]],["u8"]]],[11,"index_mut","","",9,[[["self"],["usize"]],["u8"]]],[11,"index","","",9,N],[11,"index_mut","","",9,N],[11,"index","","",9,N],[11,"index_mut","","",9,N],[11,"bitor","","",9,N],[11,"bitand","","",9,N],[11,"bitxor","","",9,N],[11,"default","","",9,[[],["self"]]],[11,"from","","",9,[[["u64"]],["h128"]]],[11,"from","","",9,N],[11,"hex","","Get a hex representation.",9,[[["self"]],["string"]]],[11,"rand","","",9,[[["r"]],["self"]]],[11,"from_str","","",9,[[["str"]],["result",["h128","fromhexerror"]]]],[11,"from","","",9,[[["str"]],["h128"]]],[11,"heap_size_of_children","","",9,[[["self"]],["usize"]]],[11,"eq","","",9,[[["self"],["self"]],["bool"]]],[11,"cmp","","",9,[[["self"],["self"]],["ordering"]]],[11,"from","","",10,N],[11,"deref","","",10,N],[11,"as_ref","","",10,N],[11,"as_mut","","",10,N],[11,"as_ref","","",10,[[["self"]],["h160"]]],[11,"deref_mut","","",10,N],[11,"new","","Create a new, zero-initialised, instance.",10,[[],["h160"]]],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",10,[[],["h160"]]],[11,"len","","Get the size of this object in bytes.",10,[[],["usize"]]],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",10,N],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",10,N],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",10,N],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",10,[[["self"],["self"]],["bool"]]],[11,"is_zero","","Returns `true` if no bits are set.",10,[[["self"]],["bool"]]],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",10,[[["self"]],["u64"]]],[11,"random","","Create a new, cryptographically random, instance.",10,[[],["h160"]]],[11,"randomize","","Assign self have a cryptographically random value.",10,[[["self"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["h160"]]],[11,"partial_cmp","","",10,[[["self"],["self"]],["option",["ordering"]]]],[11,"hash","","",10,[[["self"],["h"]]]],[11,"index","","",10,[[["self"],["usize"]],["u8"]]],[11,"index_mut","","",10,[[["self"],["usize"]],["u8"]]],[11,"index","","",10,N],[11,"index_mut","","",10,N],[11,"index","","",10,N],[11,"index_mut","","",10,N],[11,"bitor","","",10,N],[11,"bitand","","",10,N],[11,"bitxor","","",10,N],[11,"default","","",10,[[],["self"]]],[11,"from","","",10,[[["u64"]],["h160"]]],[11,"from","","",10,N],[11,"hex","","Get a hex representation.",10,[[["self"]],["string"]]],[11,"rand","","",10,[[["r"]],["self"]]],[11,"from_str","","",10,[[["str"]],["result",["h160","fromhexerror"]]]],[11,"from","","",10,[[["str"]],["h160"]]],[11,"heap_size_of_children","","",10,[[["self"]],["usize"]]],[11,"eq","","",10,[[["self"],["self"]],["bool"]]],[11,"cmp","","",10,[[["self"],["self"]],["ordering"]]],[11,"from","","",11,N],[11,"deref","","",11,N],[11,"as_ref","","",11,N],[11,"as_mut","","",11,N],[11,"as_ref","","",11,[[["self"]],["h256"]]],[11,"deref_mut","","",11,N],[11,"new","","Create a new, zero-initialised, instance.",11,[[],["h256"]]],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",11,[[],["h256"]]],[11,"len","","Get the size of this object in bytes.",11,[[],["usize"]]],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",11,N],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",11,N],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",11,N],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",11,[[["self"],["self"]],["bool"]]],[11,"is_zero","","Returns `true` if no bits are set.",11,[[["self"]],["bool"]]],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",11,[[["self"]],["u64"]]],[11,"random","","Create a new, cryptographically random, instance.",11,[[],["h256"]]],[11,"randomize","","Assign self have a cryptographically random value.",11,[[["self"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["h256"]]],[11,"partial_cmp","","",11,[[["self"],["self"]],["option",["ordering"]]]],[11,"hash","","",11,[[["self"],["h"]]]],[11,"index","","",11,[[["self"],["usize"]],["u8"]]],[11,"index_mut","","",11,[[["self"],["usize"]],["u8"]]],[11,"index","","",11,N],[11,"index_mut","","",11,N],[11,"index","","",11,N],[11,"index_mut","","",11,N],[11,"bitor","","",11,N],[11,"bitand","","",11,N],[11,"bitxor","","",11,N],[11,"default","","",11,[[],["self"]]],[11,"from","","",11,[[["u64"]],["h256"]]],[11,"from","","",11,N],[11,"hex","","Get a hex representation.",11,[[["self"]],["string"]]],[11,"rand","","",11,[[["r"]],["self"]]],[11,"from_str","","",11,[[["str"]],["result",["h256","fromhexerror"]]]],[11,"from","","",11,[[["str"]],["h256"]]],[11,"heap_size_of_children","","",11,[[["self"]],["usize"]]],[11,"eq","","",11,[[["self"],["self"]],["bool"]]],[11,"cmp","","",11,[[["self"],["self"]],["ordering"]]],[11,"from","","",12,N],[11,"deref","","",12,N],[11,"as_ref","","",12,N],[11,"as_mut","","",12,N],[11,"as_ref","","",12,[[["self"]],["h264"]]],[11,"deref_mut","","",12,N],[11,"new","","Create a new, zero-initialised, instance.",12,[[],["h264"]]],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",12,[[],["h264"]]],[11,"len","","Get the size of this object in bytes.",12,[[],["usize"]]],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",12,N],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",12,N],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",12,N],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",12,[[["self"],["self"]],["bool"]]],[11,"is_zero","","Returns `true` if no bits are set.",12,[[["self"]],["bool"]]],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",12,[[["self"]],["u64"]]],[11,"random","","Create a new, cryptographically random, instance.",12,[[],["h264"]]],[11,"randomize","","Assign self have a cryptographically random value.",12,[[["self"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["h264"]]],[11,"partial_cmp","","",12,[[["self"],["self"]],["option",["ordering"]]]],[11,"hash","","",12,[[["self"],["h"]]]],[11,"index","","",12,[[["self"],["usize"]],["u8"]]],[11,"index_mut","","",12,[[["self"],["usize"]],["u8"]]],[11,"index","","",12,N],[11,"index_mut","","",12,N],[11,"index","","",12,N],[11,"index_mut","","",12,N],[11,"bitor","","",12,N],[11,"bitand","","",12,N],[11,"bitxor","","",12,N],[11,"default","","",12,[[],["self"]]],[11,"from","","",12,[[["u64"]],["h264"]]],[11,"from","","",12,N],[11,"hex","","Get a hex representation.",12,[[["self"]],["string"]]],[11,"rand","","",12,[[["r"]],["self"]]],[11,"from_str","","",12,[[["str"]],["result",["h264","fromhexerror"]]]],[11,"from","","",12,[[["str"]],["h264"]]],[11,"heap_size_of_children","","",12,[[["self"]],["usize"]]],[11,"eq","","",12,[[["self"],["self"]],["bool"]]],[11,"cmp","","",12,[[["self"],["self"]],["ordering"]]],[11,"from","","",13,N],[11,"deref","","",13,N],[11,"as_ref","","",13,N],[11,"as_mut","","",13,N],[11,"as_ref","","",13,[[["self"]],["h512"]]],[11,"deref_mut","","",13,N],[11,"new","","Create a new, zero-initialised, instance.",13,[[],["h512"]]],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",13,[[],["h512"]]],[11,"len","","Get the size of this object in bytes.",13,[[],["usize"]]],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",13,N],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",13,N],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",13,N],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",13,[[["self"],["self"]],["bool"]]],[11,"is_zero","","Returns `true` if no bits are set.",13,[[["self"]],["bool"]]],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",13,[[["self"]],["u64"]]],[11,"random","","Create a new, cryptographically random, instance.",13,[[],["h512"]]],[11,"randomize","","Assign self have a cryptographically random value.",13,[[["self"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["h512"]]],[11,"partial_cmp","","",13,[[["self"],["self"]],["option",["ordering"]]]],[11,"hash","","",13,[[["self"],["h"]]]],[11,"index","","",13,[[["self"],["usize"]],["u8"]]],[11,"index_mut","","",13,[[["self"],["usize"]],["u8"]]],[11,"index","","",13,N],[11,"index_mut","","",13,N],[11,"index","","",13,N],[11,"index_mut","","",13,N],[11,"bitor","","",13,N],[11,"bitand","","",13,N],[11,"bitxor","","",13,N],[11,"default","","",13,[[],["self"]]],[11,"from","","",13,[[["u64"]],["h512"]]],[11,"from","","",13,N],[11,"hex","","Get a hex representation.",13,[[["self"]],["string"]]],[11,"rand","","",13,[[["r"]],["self"]]],[11,"from_str","","",13,[[["str"]],["result",["h512","fromhexerror"]]]],[11,"from","","",13,[[["str"]],["h512"]]],[11,"heap_size_of_children","","",13,[[["self"]],["usize"]]],[11,"eq","","",13,[[["self"],["self"]],["bool"]]],[11,"cmp","","",13,[[["self"],["self"]],["ordering"]]],[11,"from","","",14,N],[11,"deref","","",14,N],[11,"as_ref","","",14,N],[11,"as_mut","","",14,N],[11,"as_ref","","",14,[[["self"]],["h520"]]],[11,"deref_mut","","",14,N],[11,"new","","Create a new, zero-initialised, instance.",14,[[],["h520"]]],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",14,[[],["h520"]]],[11,"len","","Get the size of this object in bytes.",14,[[],["usize"]]],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",14,N],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",14,N],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",14,N],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",14,[[["self"],["self"]],["bool"]]],[11,"is_zero","","Returns `true` if no bits are set.",14,[[["self"]],["bool"]]],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",14,[[["self"]],["u64"]]],[11,"random","","Create a new, cryptographically random, instance.",14,[[],["h520"]]],[11,"randomize","","Assign self have a cryptographically random value.",14,[[["self"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["h520"]]],[11,"partial_cmp","","",14,[[["self"],["self"]],["option",["ordering"]]]],[11,"hash","","",14,[[["self"],["h"]]]],[11,"index","","",14,[[["self"],["usize"]],["u8"]]],[11,"index_mut","","",14,[[["self"],["usize"]],["u8"]]],[11,"index","","",14,N],[11,"index_mut","","",14,N],[11,"index","","",14,N],[11,"index_mut","","",14,N],[11,"bitor","","",14,N],[11,"bitand","","",14,N],[11,"bitxor","","",14,N],[11,"default","","",14,[[],["self"]]],[11,"from","","",14,[[["u64"]],["h520"]]],[11,"from","","",14,N],[11,"hex","","Get a hex representation.",14,[[["self"]],["string"]]],[11,"rand","","",14,[[["r"]],["self"]]],[11,"from_str","","",14,[[["str"]],["result",["h520","fromhexerror"]]]],[11,"from","","",14,[[["str"]],["h520"]]],[11,"heap_size_of_children","","",14,[[["self"]],["usize"]]],[11,"eq","","",14,[[["self"],["self"]],["bool"]]],[11,"cmp","","",14,[[["self"],["self"]],["ordering"]]],[11,"from","","",15,N],[11,"deref","","",15,N],[11,"as_ref","","",15,N],[11,"as_mut","","",15,N],[11,"as_ref","","",15,[[["self"]],["h1024"]]],[11,"deref_mut","","",15,N],[11,"new","","Create a new, zero-initialised, instance.",15,[[],["h1024"]]],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",15,[[],["h1024"]]],[11,"len","","Get the size of this object in bytes.",15,[[],["usize"]]],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",15,N],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",15,N],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",15,N],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",15,[[["self"],["self"]],["bool"]]],[11,"is_zero","","Returns `true` if no bits are set.",15,[[["self"]],["bool"]]],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",15,[[["self"]],["u64"]]],[11,"random","","Create a new, cryptographically random, instance.",15,[[],["h1024"]]],[11,"randomize","","Assign self have a cryptographically random value.",15,[[["self"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["h1024"]]],[11,"partial_cmp","","",15,[[["self"],["self"]],["option",["ordering"]]]],[11,"hash","","",15,[[["self"],["h"]]]],[11,"index","","",15,[[["self"],["usize"]],["u8"]]],[11,"index_mut","","",15,[[["self"],["usize"]],["u8"]]],[11,"index","","",15,N],[11,"index_mut","","",15,N],[11,"index","","",15,N],[11,"index_mut","","",15,N],[11,"bitor","","",15,N],[11,"bitand","","",15,N],[11,"bitxor","","",15,N],[11,"default","","",15,[[],["self"]]],[11,"from","","",15,[[["u64"]],["h1024"]]],[11,"from","","",15,N],[11,"hex","","Get a hex representation.",15,[[["self"]],["string"]]],[11,"rand","","",15,[[["r"]],["self"]]],[11,"from_str","","",15,[[["str"]],["result",["h1024","fromhexerror"]]]],[11,"from","","",15,[[["str"]],["h1024"]]],[11,"heap_size_of_children","","",15,[[["self"]],["usize"]]],[11,"eq","","",15,[[["self"],["self"]],["bool"]]],[11,"cmp","","",15,[[["self"],["self"]],["ordering"]]],[11,"from","","",8,[[["u64"]],["self"]]],[11,"from","","",8,[[["u64"]],["self"]]],[11,"from","","",2,[[["h64"]],["self"]]],[11,"from","","",2,[[["h64"]],["self"]]],[11,"from","","",9,[[["u128"]],["self"]]],[11,"from","","",9,[[["u128"]],["self"]]],[11,"from","","",3,[[["h128"]],["self"]]],[11,"from","","",3,[[["h128"]],["self"]]],[11,"from","","",11,[[["u256"]],["self"]]],[11,"from","","",11,[[["u256"]],["self"]]],[11,"from","","",4,[[["h256"]],["self"]]],[11,"from","","",4,[[["h256"]],["self"]]],[11,"from","","",13,[[["u512"]],["self"]]],[11,"from","","",13,[[["u512"]],["self"]]],[11,"from","","",5,[[["h512"]],["self"]]],[11,"from","","",5,[[["h512"]],["self"]]],[11,"from","","",15,[[["u1024"]],["self"]]],[11,"from","","",15,[[["u1024"]],["self"]]],[11,"from","","",6,[[["h1024"]],["self"]]],[11,"from","","",6,[[["h1024"]],["self"]]],[11,"from","","",10,[[["h256"]],["h160"]]],[11,"from","","",8,[[["h256"]],["h64"]]],[11,"from","","",11,[[["h160"]],["h256"]]],[11,"from","","",11,[[["h160"]],["h256"]]],[11,"clone","","",2,[[["self"]],["u64"]]],[11,"eq","","",2,[[["self"],["u64"]],["bool"]]],[11,"ne","","",2,[[["self"],["u64"]],["bool"]]],[11,"hash","","",2,N],[11,"as_ref","","",2,[[["self"]],["u64"]]],[11,"from_dec_str","","Convert from a decimal string.",2,[[["str"]],["result",["fromdecstrerr"]]]],[11,"low_u32","","Conversion to u32",2,[[["self"]],["u32"]]],[11,"low_u64","","Conversion to u64",2,[[["self"]],["u64"]]],[11,"as_u32","","Conversion to u32 with overflow checking",2,[[["self"]],["u32"]]],[11,"as_u64","","Conversion to u64 with overflow checking",2,[[["self"]],["u64"]]],[11,"is_zero","","Whether this is zero.",2,[[["self"]],["bool"]]],[11,"bits","","Return the least number of bits needed to represent the number",2,[[["self"]],["usize"]]],[11,"bit","","Return if specific bit is set.",2,[[["self"],["usize"]],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of self.",2,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of leading zeros in the binary representation of self.",2,[[["self"]],["u32"]]],[11,"byte","","Return specific byte.",2,[[["self"],["usize"]],["u8"]]],[11,"to_big_endian","","Write to the slice in big-endian format.",2,N],[11,"to_little_endian","","Write to the slice in little-endian format.",2,N],[11,"exp10","","Create `10**n` as this type.",2,[[["usize"]],["self"]]],[11,"zero","","Zero (additive identity) of this type.",2,[[],["self"]]],[11,"one","","One (multiplicative identity) of this type.",2,[[],["self"]]],[11,"max_value","","The maximum value which can be inhabited by this type.",2,[[],["self"]]],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",2,[[["self"],["self"]],["self"]]],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",2,N],[11,"overflowing_add","","Optimized instructions",2,N],[11,"saturating_add","","Addition which saturates at the maximum value.",2,[[["self"],["u64"]],["u64"]]],[11,"checked_add","","Checked addition. Returns `None` if overflow occurred.",2,[[["self"],["u64"]],["option",["u64"]]]],[11,"overflowing_sub","","Subtraction which underflows and returns a flag if it does.",2,N],[11,"saturating_sub","","Subtraction which saturates at zero.",2,[[["self"],["u64"]],["u64"]]],[11,"checked_sub","","Checked subtraction. Returns `None` if overflow occurred.",2,[[["self"],["u64"]],["option",["u64"]]]],[11,"overflowing_mul","","Multiply with overflow, returning a flag if it does.",2,N],[11,"saturating_mul","","Multiplication which saturates at the maximum value..",2,[[["self"],["u64"]],["u64"]]],[11,"checked_mul","","Checked multiplication. Returns `None` if overflow occurred.",2,[[["self"],["u64"]],["option",["u64"]]]],[11,"overflowing_div","","Division with overflow",2,N],[11,"checked_div","","Checked division. Returns `None` if `other == 0`.",2,[[["self"],["u64"]],["option",["u64"]]]],[11,"overflowing_rem","","Modulus with overflow.",2,N],[11,"checked_rem","","Checked modulus. Returns `None` if `other == 0`.",2,[[["self"],["u64"]],["option",["u64"]]]],[11,"overflowing_neg","","Negation with overflow.",2,N],[11,"checked_neg","","Checked negation. Returns `None` unless `self == 0`.",2,[[["self"]],["option",["u64"]]]],[11,"mul_u32","","Multiplication by u32",2,[[["self"],["u32"]],["self"]]],[11,"to_hex","","Convert to hex string.",2,[[["self"]],["string"]]],[11,"from_big_endian","","Converts from big endian representation bytes in memory Can also be used as (&slice).into(), as it is default `From` slice implementation for U256",2,N],[11,"from_little_endian","","Converts from little endian representation bytes in memory",2,N],[11,"default","","",2,[[],["self"]]],[11,"from","","",2,[[["u64"]],["u64"]]],[11,"from","","",2,[[["u8"]],["u64"]]],[11,"from","","",2,[[["u16"]],["u64"]]],[11,"from","","",2,[[["u32"]],["u64"]]],[11,"from","","",2,[[["usize"]],["u64"]]],[11,"from","","",2,[[["i64"]],["u64"]]],[11,"from","","",2,[[["i8"]],["u64"]]],[11,"from","","",2,[[["i16"]],["u64"]]],[11,"from","","",2,[[["i32"]],["u64"]]],[11,"from","","",2,[[["isize"]],["u64"]]],[11,"from","","",2,N],[11,"add","","",2,[[["self"],["u64"]],["u64"]]],[11,"sub","","",2,[[["self"],["u64"]],["u64"]]],[11,"mul","","",2,[[["self"],["u32"]],["u64"]]],[11,"mul","","",2,[[["self"],["u64"]],["u64"]]],[11,"div","","",2,[[["self"],["u64"]],["u64"]]],[11,"rem","","",2,[[["self"],["u64"]],["u64"]]],[11,"bitand","","",2,[[["self"],["u64"]],["u64"]]],[11,"bitxor","","",2,[[["self"],["u64"]],["u64"]]],[11,"bitor","","",2,[[["self"],["u64"]],["u64"]]],[11,"not","","",2,[[["self"]],["u64"]]],[11,"shl","","",2,[[["self"],["usize"]],["u64"]]],[11,"shr","","",2,[[["self"],["usize"]],["u64"]]],[11,"cmp","","",2,[[["self"],["u64"]],["ordering"]]],[11,"partial_cmp","","",2,[[["self"],["u64"]],["option",["ordering"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",2,[[["str"]],["result",["u64"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"from","","",2,[[["str"]],["self"]]],[11,"heap_size_of_children","","",2,[[["self"]],["usize"]]],[11,"clone","","",3,[[["self"]],["u128"]]],[11,"eq","","",3,[[["self"],["u128"]],["bool"]]],[11,"ne","","",3,[[["self"],["u128"]],["bool"]]],[11,"hash","","",3,N],[11,"as_ref","","",3,[[["self"]],["u128"]]],[11,"from_dec_str","","Convert from a decimal string.",3,[[["str"]],["result",["fromdecstrerr"]]]],[11,"low_u32","","Conversion to u32",3,[[["self"]],["u32"]]],[11,"low_u64","","Conversion to u64",3,[[["self"]],["u64"]]],[11,"as_u32","","Conversion to u32 with overflow checking",3,[[["self"]],["u32"]]],[11,"as_u64","","Conversion to u64 with overflow checking",3,[[["self"]],["u64"]]],[11,"is_zero","","Whether this is zero.",3,[[["self"]],["bool"]]],[11,"bits","","Return the least number of bits needed to represent the number",3,[[["self"]],["usize"]]],[11,"bit","","Return if specific bit is set.",3,[[["self"],["usize"]],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of self.",3,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of leading zeros in the binary representation of self.",3,[[["self"]],["u32"]]],[11,"byte","","Return specific byte.",3,[[["self"],["usize"]],["u8"]]],[11,"to_big_endian","","Write to the slice in big-endian format.",3,N],[11,"to_little_endian","","Write to the slice in little-endian format.",3,N],[11,"exp10","","Create `10**n` as this type.",3,[[["usize"]],["self"]]],[11,"zero","","Zero (additive identity) of this type.",3,[[],["self"]]],[11,"one","","One (multiplicative identity) of this type.",3,[[],["self"]]],[11,"max_value","","The maximum value which can be inhabited by this type.",3,[[],["self"]]],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",3,[[["self"],["self"]],["self"]]],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",3,N],[11,"overflowing_add","","Optimized instructions",3,N],[11,"saturating_add","","Addition which saturates at the maximum value.",3,[[["self"],["u128"]],["u128"]]],[11,"checked_add","","Checked addition. Returns `None` if overflow occurred.",3,[[["self"],["u128"]],["option",["u128"]]]],[11,"overflowing_sub","","Subtraction which underflows and returns a flag if it does.",3,N],[11,"saturating_sub","","Subtraction which saturates at zero.",3,[[["self"],["u128"]],["u128"]]],[11,"checked_sub","","Checked subtraction. Returns `None` if overflow occurred.",3,[[["self"],["u128"]],["option",["u128"]]]],[11,"overflowing_mul","","Multiply with overflow, returning a flag if it does.",3,N],[11,"saturating_mul","","Multiplication which saturates at the maximum value..",3,[[["self"],["u128"]],["u128"]]],[11,"checked_mul","","Checked multiplication. Returns `None` if overflow occurred.",3,[[["self"],["u128"]],["option",["u128"]]]],[11,"overflowing_div","","Division with overflow",3,N],[11,"checked_div","","Checked division. Returns `None` if `other == 0`.",3,[[["self"],["u128"]],["option",["u128"]]]],[11,"overflowing_rem","","Modulus with overflow.",3,N],[11,"checked_rem","","Checked modulus. Returns `None` if `other == 0`.",3,[[["self"],["u128"]],["option",["u128"]]]],[11,"overflowing_neg","","Negation with overflow.",3,N],[11,"checked_neg","","Checked negation. Returns `None` unless `self == 0`.",3,[[["self"]],["option",["u128"]]]],[11,"mul_u32","","Multiplication by u32",3,[[["self"],["u32"]],["self"]]],[11,"to_hex","","Convert to hex string.",3,[[["self"]],["string"]]],[11,"from_big_endian","","Converts from big endian representation bytes in memory Can also be used as (&slice).into(), as it is default `From` slice implementation for U256",3,N],[11,"from_little_endian","","Converts from little endian representation bytes in memory",3,N],[11,"default","","",3,[[],["self"]]],[11,"from","","",3,[[["u64"]],["u128"]]],[11,"from","","",3,[[["u8"]],["u128"]]],[11,"from","","",3,[[["u16"]],["u128"]]],[11,"from","","",3,[[["u32"]],["u128"]]],[11,"from","","",3,[[["usize"]],["u128"]]],[11,"from","","",3,[[["i64"]],["u128"]]],[11,"from","","",3,[[["i8"]],["u128"]]],[11,"from","","",3,[[["i16"]],["u128"]]],[11,"from","","",3,[[["i32"]],["u128"]]],[11,"from","","",3,[[["isize"]],["u128"]]],[11,"from","","",3,N],[11,"add","","",3,[[["self"],["u128"]],["u128"]]],[11,"sub","","",3,[[["self"],["u128"]],["u128"]]],[11,"mul","","",3,[[["self"],["u32"]],["u128"]]],[11,"mul","","",3,[[["self"],["u128"]],["u128"]]],[11,"div","","",3,[[["self"],["u128"]],["u128"]]],[11,"rem","","",3,[[["self"],["u128"]],["u128"]]],[11,"bitand","","",3,[[["self"],["u128"]],["u128"]]],[11,"bitxor","","",3,[[["self"],["u128"]],["u128"]]],[11,"bitor","","",3,[[["self"],["u128"]],["u128"]]],[11,"not","","",3,[[["self"]],["u128"]]],[11,"shl","","",3,[[["self"],["usize"]],["u128"]]],[11,"shr","","",3,[[["self"],["usize"]],["u128"]]],[11,"cmp","","",3,[[["self"],["u128"]],["ordering"]]],[11,"partial_cmp","","",3,[[["self"],["u128"]],["option",["ordering"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",3,[[["str"]],["result",["u128"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"from","","",3,[[["str"]],["self"]]],[11,"heap_size_of_children","","",3,[[["self"]],["usize"]]],[11,"clone","","",4,[[["self"]],["u256"]]],[11,"eq","","",4,[[["self"],["u256"]],["bool"]]],[11,"ne","","",4,[[["self"],["u256"]],["bool"]]],[11,"hash","","",4,N],[11,"as_ref","","",4,[[["self"]],["u256"]]],[11,"from_dec_str","","Convert from a decimal string.",4,[[["str"]],["result",["fromdecstrerr"]]]],[11,"low_u32","","Conversion to u32",4,[[["self"]],["u32"]]],[11,"low_u64","","Conversion to u64",4,[[["self"]],["u64"]]],[11,"as_u32","","Conversion to u32 with overflow checking",4,[[["self"]],["u32"]]],[11,"as_u64","","Conversion to u64 with overflow checking",4,[[["self"]],["u64"]]],[11,"is_zero","","Whether this is zero.",4,[[["self"]],["bool"]]],[11,"bits","","Return the least number of bits needed to represent the number",4,[[["self"]],["usize"]]],[11,"bit","","Return if specific bit is set.",4,[[["self"],["usize"]],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of self.",4,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of leading zeros in the binary representation of self.",4,[[["self"]],["u32"]]],[11,"byte","","Return specific byte.",4,[[["self"],["usize"]],["u8"]]],[11,"to_big_endian","","Write to the slice in big-endian format.",4,N],[11,"to_little_endian","","Write to the slice in little-endian format.",4,N],[11,"exp10","","Create `10**n` as this type.",4,[[["usize"]],["self"]]],[11,"zero","","Zero (additive identity) of this type.",4,[[],["self"]]],[11,"one","","One (multiplicative identity) of this type.",4,[[],["self"]]],[11,"max_value","","The maximum value which can be inhabited by this type.",4,[[],["self"]]],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",4,[[["self"],["self"]],["self"]]],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",4,N],[11,"overflowing_add","","Optimized instructions",4,N],[11,"saturating_add","","Addition which saturates at the maximum value.",4,[[["self"],["u256"]],["u256"]]],[11,"checked_add","","Checked addition. Returns `None` if overflow occurred.",4,[[["self"],["u256"]],["option",["u256"]]]],[11,"overflowing_sub","","Subtraction which underflows and returns a flag if it does.",4,N],[11,"saturating_sub","","Subtraction which saturates at zero.",4,[[["self"],["u256"]],["u256"]]],[11,"checked_sub","","Checked subtraction. Returns `None` if overflow occurred.",4,[[["self"],["u256"]],["option",["u256"]]]],[11,"overflowing_mul","","Multiply with overflow, returning a flag if it does.",4,N],[11,"saturating_mul","","Multiplication which saturates at the maximum value..",4,[[["self"],["u256"]],["u256"]]],[11,"checked_mul","","Checked multiplication. Returns `None` if overflow occurred.",4,[[["self"],["u256"]],["option",["u256"]]]],[11,"overflowing_div","","Division with overflow",4,N],[11,"checked_div","","Checked division. Returns `None` if `other == 0`.",4,[[["self"],["u256"]],["option",["u256"]]]],[11,"overflowing_rem","","Modulus with overflow.",4,N],[11,"checked_rem","","Checked modulus. Returns `None` if `other == 0`.",4,[[["self"],["u256"]],["option",["u256"]]]],[11,"overflowing_neg","","Negation with overflow.",4,N],[11,"checked_neg","","Checked negation. Returns `None` unless `self == 0`.",4,[[["self"]],["option",["u256"]]]],[11,"mul_u32","","Multiplication by u32",4,[[["self"],["u32"]],["self"]]],[11,"to_hex","","Convert to hex string.",4,[[["self"]],["string"]]],[11,"from_big_endian","","Converts from big endian representation bytes in memory Can also be used as (&slice).into(), as it is default `From` slice implementation for U256",4,N],[11,"from_little_endian","","Converts from little endian representation bytes in memory",4,N],[11,"default","","",4,[[],["self"]]],[11,"from","","",4,[[["u64"]],["u256"]]],[11,"from","","",4,[[["u8"]],["u256"]]],[11,"from","","",4,[[["u16"]],["u256"]]],[11,"from","","",4,[[["u32"]],["u256"]]],[11,"from","","",4,[[["usize"]],["u256"]]],[11,"from","","",4,[[["i64"]],["u256"]]],[11,"from","","",4,[[["i8"]],["u256"]]],[11,"from","","",4,[[["i16"]],["u256"]]],[11,"from","","",4,[[["i32"]],["u256"]]],[11,"from","","",4,[[["isize"]],["u256"]]],[11,"from","","",4,N],[11,"add","","",4,[[["self"],["u256"]],["u256"]]],[11,"sub","","",4,[[["self"],["u256"]],["u256"]]],[11,"mul","","",4,[[["self"],["u32"]],["u256"]]],[11,"mul","","",4,[[["self"],["u256"]],["u256"]]],[11,"div","","",4,[[["self"],["u256"]],["u256"]]],[11,"rem","","",4,[[["self"],["u256"]],["u256"]]],[11,"bitand","","",4,[[["self"],["u256"]],["u256"]]],[11,"bitxor","","",4,[[["self"],["u256"]],["u256"]]],[11,"bitor","","",4,[[["self"],["u256"]],["u256"]]],[11,"not","","",4,[[["self"]],["u256"]]],[11,"shl","","",4,[[["self"],["usize"]],["u256"]]],[11,"shr","","",4,[[["self"],["usize"]],["u256"]]],[11,"cmp","","",4,[[["self"],["u256"]],["ordering"]]],[11,"partial_cmp","","",4,[[["self"],["u256"]],["option",["ordering"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",4,[[["str"]],["result",["u256"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"from","","",4,[[["str"]],["self"]]],[11,"heap_size_of_children","","",4,[[["self"]],["usize"]]],[11,"clone","","",5,[[["self"]],["u512"]]],[11,"eq","","",5,[[["self"],["u512"]],["bool"]]],[11,"ne","","",5,[[["self"],["u512"]],["bool"]]],[11,"hash","","",5,N],[11,"as_ref","","",5,[[["self"]],["u512"]]],[11,"from_dec_str","","Convert from a decimal string.",5,[[["str"]],["result",["fromdecstrerr"]]]],[11,"low_u32","","Conversion to u32",5,[[["self"]],["u32"]]],[11,"low_u64","","Conversion to u64",5,[[["self"]],["u64"]]],[11,"as_u32","","Conversion to u32 with overflow checking",5,[[["self"]],["u32"]]],[11,"as_u64","","Conversion to u64 with overflow checking",5,[[["self"]],["u64"]]],[11,"is_zero","","Whether this is zero.",5,[[["self"]],["bool"]]],[11,"bits","","Return the least number of bits needed to represent the number",5,[[["self"]],["usize"]]],[11,"bit","","Return if specific bit is set.",5,[[["self"],["usize"]],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of self.",5,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of leading zeros in the binary representation of self.",5,[[["self"]],["u32"]]],[11,"byte","","Return specific byte.",5,[[["self"],["usize"]],["u8"]]],[11,"to_big_endian","","Write to the slice in big-endian format.",5,N],[11,"to_little_endian","","Write to the slice in little-endian format.",5,N],[11,"exp10","","Create `10**n` as this type.",5,[[["usize"]],["self"]]],[11,"zero","","Zero (additive identity) of this type.",5,[[],["self"]]],[11,"one","","One (multiplicative identity) of this type.",5,[[],["self"]]],[11,"max_value","","The maximum value which can be inhabited by this type.",5,[[],["self"]]],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",5,[[["self"],["self"]],["self"]]],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",5,N],[11,"overflowing_add","","Optimized instructions",5,N],[11,"saturating_add","","Addition which saturates at the maximum value.",5,[[["self"],["u512"]],["u512"]]],[11,"checked_add","","Checked addition. Returns `None` if overflow occurred.",5,[[["self"],["u512"]],["option",["u512"]]]],[11,"overflowing_sub","","Subtraction which underflows and returns a flag if it does.",5,N],[11,"saturating_sub","","Subtraction which saturates at zero.",5,[[["self"],["u512"]],["u512"]]],[11,"checked_sub","","Checked subtraction. Returns `None` if overflow occurred.",5,[[["self"],["u512"]],["option",["u512"]]]],[11,"overflowing_mul","","Multiply with overflow, returning a flag if it does.",5,N],[11,"saturating_mul","","Multiplication which saturates at the maximum value..",5,[[["self"],["u512"]],["u512"]]],[11,"checked_mul","","Checked multiplication. Returns `None` if overflow occurred.",5,[[["self"],["u512"]],["option",["u512"]]]],[11,"overflowing_div","","Division with overflow",5,N],[11,"checked_div","","Checked division. Returns `None` if `other == 0`.",5,[[["self"],["u512"]],["option",["u512"]]]],[11,"overflowing_rem","","Modulus with overflow.",5,N],[11,"checked_rem","","Checked modulus. Returns `None` if `other == 0`.",5,[[["self"],["u512"]],["option",["u512"]]]],[11,"overflowing_neg","","Negation with overflow.",5,N],[11,"checked_neg","","Checked negation. Returns `None` unless `self == 0`.",5,[[["self"]],["option",["u512"]]]],[11,"mul_u32","","Multiplication by u32",5,[[["self"],["u32"]],["self"]]],[11,"to_hex","","Convert to hex string.",5,[[["self"]],["string"]]],[11,"from_big_endian","","Converts from big endian representation bytes in memory Can also be used as (&slice).into(), as it is default `From` slice implementation for U256",5,N],[11,"from_little_endian","","Converts from little endian representation bytes in memory",5,N],[11,"default","","",5,[[],["self"]]],[11,"from","","",5,[[["u64"]],["u512"]]],[11,"from","","",5,[[["u8"]],["u512"]]],[11,"from","","",5,[[["u16"]],["u512"]]],[11,"from","","",5,[[["u32"]],["u512"]]],[11,"from","","",5,[[["usize"]],["u512"]]],[11,"from","","",5,[[["i64"]],["u512"]]],[11,"from","","",5,[[["i8"]],["u512"]]],[11,"from","","",5,[[["i16"]],["u512"]]],[11,"from","","",5,[[["i32"]],["u512"]]],[11,"from","","",5,[[["isize"]],["u512"]]],[11,"from","","",5,N],[11,"add","","",5,[[["self"],["u512"]],["u512"]]],[11,"sub","","",5,[[["self"],["u512"]],["u512"]]],[11,"mul","","",5,[[["self"],["u32"]],["u512"]]],[11,"mul","","",5,[[["self"],["u512"]],["u512"]]],[11,"div","","",5,[[["self"],["u512"]],["u512"]]],[11,"rem","","",5,[[["self"],["u512"]],["u512"]]],[11,"bitand","","",5,[[["self"],["u512"]],["u512"]]],[11,"bitxor","","",5,[[["self"],["u512"]],["u512"]]],[11,"bitor","","",5,[[["self"],["u512"]],["u512"]]],[11,"not","","",5,[[["self"]],["u512"]]],[11,"shl","","",5,[[["self"],["usize"]],["u512"]]],[11,"shr","","",5,[[["self"],["usize"]],["u512"]]],[11,"cmp","","",5,[[["self"],["u512"]],["ordering"]]],[11,"partial_cmp","","",5,[[["self"],["u512"]],["option",["ordering"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",5,[[["str"]],["result",["u512"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"from","","",5,[[["str"]],["self"]]],[11,"heap_size_of_children","","",5,[[["self"]],["usize"]]],[11,"clone","","",6,[[["self"]],["u1024"]]],[11,"eq","","",6,[[["self"],["u1024"]],["bool"]]],[11,"ne","","",6,[[["self"],["u1024"]],["bool"]]],[11,"hash","","",6,N],[11,"as_ref","","",6,[[["self"]],["u1024"]]],[11,"from_dec_str","","Convert from a decimal string.",6,[[["str"]],["result",["fromdecstrerr"]]]],[11,"low_u32","","Conversion to u32",6,[[["self"]],["u32"]]],[11,"low_u64","","Conversion to u64",6,[[["self"]],["u64"]]],[11,"as_u32","","Conversion to u32 with overflow checking",6,[[["self"]],["u32"]]],[11,"as_u64","","Conversion to u64 with overflow checking",6,[[["self"]],["u64"]]],[11,"is_zero","","Whether this is zero.",6,[[["self"]],["bool"]]],[11,"bits","","Return the least number of bits needed to represent the number",6,[[["self"]],["usize"]]],[11,"bit","","Return if specific bit is set.",6,[[["self"],["usize"]],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of self.",6,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of leading zeros in the binary representation of self.",6,[[["self"]],["u32"]]],[11,"byte","","Return specific byte.",6,[[["self"],["usize"]],["u8"]]],[11,"to_big_endian","","Write to the slice in big-endian format.",6,N],[11,"to_little_endian","","Write to the slice in little-endian format.",6,N],[11,"exp10","","Create `10**n` as this type.",6,[[["usize"]],["self"]]],[11,"zero","","Zero (additive identity) of this type.",6,[[],["self"]]],[11,"one","","One (multiplicative identity) of this type.",6,[[],["self"]]],[11,"max_value","","The maximum value which can be inhabited by this type.",6,[[],["self"]]],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",6,[[["self"],["self"]],["self"]]],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",6,N],[11,"overflowing_add","","Optimized instructions",6,N],[11,"saturating_add","","Addition which saturates at the maximum value.",6,[[["self"],["u1024"]],["u1024"]]],[11,"checked_add","","Checked addition. Returns `None` if overflow occurred.",6,[[["self"],["u1024"]],["option",["u1024"]]]],[11,"overflowing_sub","","Subtraction which underflows and returns a flag if it does.",6,N],[11,"saturating_sub","","Subtraction which saturates at zero.",6,[[["self"],["u1024"]],["u1024"]]],[11,"checked_sub","","Checked subtraction. Returns `None` if overflow occurred.",6,[[["self"],["u1024"]],["option",["u1024"]]]],[11,"overflowing_mul","","Multiply with overflow, returning a flag if it does.",6,N],[11,"saturating_mul","","Multiplication which saturates at the maximum value..",6,[[["self"],["u1024"]],["u1024"]]],[11,"checked_mul","","Checked multiplication. Returns `None` if overflow occurred.",6,[[["self"],["u1024"]],["option",["u1024"]]]],[11,"overflowing_div","","Division with overflow",6,N],[11,"checked_div","","Checked division. Returns `None` if `other == 0`.",6,[[["self"],["u1024"]],["option",["u1024"]]]],[11,"overflowing_rem","","Modulus with overflow.",6,N],[11,"checked_rem","","Checked modulus. Returns `None` if `other == 0`.",6,[[["self"],["u1024"]],["option",["u1024"]]]],[11,"overflowing_neg","","Negation with overflow.",6,N],[11,"checked_neg","","Checked negation. Returns `None` unless `self == 0`.",6,[[["self"]],["option",["u1024"]]]],[11,"mul_u32","","Multiplication by u32",6,[[["self"],["u32"]],["self"]]],[11,"to_hex","","Convert to hex string.",6,[[["self"]],["string"]]],[11,"from_big_endian","","Converts from big endian representation bytes in memory Can also be used as (&slice).into(), as it is default `From` slice implementation for U256",6,N],[11,"from_little_endian","","Converts from little endian representation bytes in memory",6,N],[11,"default","","",6,[[],["self"]]],[11,"from","","",6,[[["u64"]],["u1024"]]],[11,"from","","",6,[[["u8"]],["u1024"]]],[11,"from","","",6,[[["u16"]],["u1024"]]],[11,"from","","",6,[[["u32"]],["u1024"]]],[11,"from","","",6,[[["usize"]],["u1024"]]],[11,"from","","",6,[[["i64"]],["u1024"]]],[11,"from","","",6,[[["i8"]],["u1024"]]],[11,"from","","",6,[[["i16"]],["u1024"]]],[11,"from","","",6,[[["i32"]],["u1024"]]],[11,"from","","",6,[[["isize"]],["u1024"]]],[11,"from","","",6,N],[11,"add","","",6,[[["self"],["u1024"]],["u1024"]]],[11,"sub","","",6,[[["self"],["u1024"]],["u1024"]]],[11,"mul","","",6,[[["self"],["u32"]],["u1024"]]],[11,"mul","","",6,[[["self"],["u1024"]],["u1024"]]],[11,"div","","",6,[[["self"],["u1024"]],["u1024"]]],[11,"rem","","",6,[[["self"],["u1024"]],["u1024"]]],[11,"bitand","","",6,[[["self"],["u1024"]],["u1024"]]],[11,"bitxor","","",6,[[["self"],["u1024"]],["u1024"]]],[11,"bitor","","",6,[[["self"],["u1024"]],["u1024"]]],[11,"not","","",6,[[["self"]],["u1024"]]],[11,"shl","","",6,[[["self"],["usize"]],["u1024"]]],[11,"shr","","",6,[[["self"],["usize"]],["u1024"]]],[11,"cmp","","",6,[[["self"],["u1024"]],["ordering"]]],[11,"partial_cmp","","",6,[[["self"],["u1024"]],["option",["ordering"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",6,[[["str"]],["result",["u1024"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"from","","",6,[[["str"]],["self"]]],[11,"heap_size_of_children","","",6,[[["self"]],["usize"]]],[11,"serialize","","",2,[[["self"],["s"]],["result"]]],[11,"deserialize","","",2,[[["d"]],["result"]]],[11,"serialize","","",3,[[["self"],["s"]],["result"]]],[11,"deserialize","","",3,[[["d"]],["result"]]],[11,"serialize","","",4,[[["self"],["s"]],["result"]]],[11,"deserialize","","",4,[[["d"]],["result"]]],[11,"serialize","","",5,[[["self"],["s"]],["result"]]],[11,"deserialize","","",5,[[["d"]],["result"]]],[11,"serialize","","",6,[[["self"],["s"]],["result"]]],[11,"deserialize","","",6,[[["d"]],["result"]]],[11,"full_mul","","Multiplies two 256-bit integers to produce full 512-bit integer No overflow possible",4,[[["self"],["u256"]],["u512"]]],[11,"from","","",5,[[["u256"]],["u512"]]],[11,"from","","",4,[[["u512"]],["u256"]]],[11,"from","","",5,[[["u256"]],["u512"]]],[11,"from","","",4,[[["u512"]],["u256"]]],[11,"from","","",3,[[["u256"]],["u128"]]],[11,"from","","",3,[[["u512"]],["u128"]]],[11,"from","","",5,[[["u128"]],["u512"]]],[11,"from","","",4,[[["u128"]],["u256"]]],[11,"from","","",4,N],[11,"from","","",4,N],[11,"from","","",3,N],[11,"from","","",3,N],[11,"from","","",5,N],[11,"from","","",5,N],[6,"Address","","",N,N],[6,"Secret","","",N,N],[6,"Public","","",N,N],[6,"Signature","","",N,N],[11,"is_empty","","",0,[[["self"]],["bool"]]],[11,"contains_input","","",0,[[["self"],["input"]],["bool"]]],[11,"contains_bloom","","",0,[[["self"],["b"]],["bool"]]],[11,"accrue","","",0,N],[11,"accrue_bloom","","",0,N],[11,"data","","",0,N],[11,"new","","Create a new, zero-initialised, instance.",0,[[],["bloom"]]],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",0,[[],["bloom"]]],[11,"len","","Get the size of this object in bytes.",0,[[],["usize"]]],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",0,N],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",0,N],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",0,N],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",0,[[["self"],["bloom"]],["bool"]]],[11,"is_zero","","Returns `true` if no bits are set.",0,[[["self"]],["bool"]]],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",0,[[["self"]],["u64"]]],[11,"random","","Create a new, cryptographically random, instance.",0,[[],["bloom"]]],[11,"randomize","","Assign self have a cryptographically random value.",0,N],[11,"hex","","Get a hex representation.",0,[[["self"]],["string"]]],[11,"as_mut","","",0,N],[11,"deref","","",0,N],[11,"bitxor","","",0,N],[11,"clone","","",0,[[["self"]],["bloom"]]],[11,"clone","","",16,[[["self"]],["bloomref"]]],[11,"deref_mut","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",0,[[["self"],["bloom"]],["option",["ordering"]]]],[11,"deserialize","","",0,[[["d"]],["result",["bloom"]]]],[11,"rand","","",0,[[["r"]],["bloom"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",0,[[["str"]],["bloom"]]],[11,"from","","",16,N],[11,"from","","",0,N],[11,"from","","",0,[[["input"]],["bloom"]]],[11,"from","","",16,[[["bloom"]],["bloomref"]]],[11,"from","","",0,[[["u64"]],["bloom"]]],[11,"from","","",0,N],[11,"cmp","","",0,[[["self"],["bloom"]],["ordering"]]],[11,"default","","",0,[[],["bloom"]]],[11,"from_str","","",0,[[["str"]],["result",["bloom","fromhexerror"]]]],[11,"eq","","",0,[[["self"],["bloomref"]],["bool"]]],[11,"eq","","",0,[[["self"],["bloom"]],["bool"]]],[11,"bitand","","",0,N],[11,"heap_size_of_children","","",0,[[["self"]],["usize"]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[11,"hash","","",0,N],[11,"as_ref","","",0,N],[11,"as_ref","","",0,[[["self"]],["bloom"]]],[11,"index","","",0,N],[11,"index","","",0,N],[11,"index","","",0,[[["self"],["usize"]],["u8"]]],[11,"bitor","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"index_mut","","",0,[[["self"],["usize"]],["u8"]]],[11,"index_mut","","",0,N],[11,"index_mut","","",0,N],[11,"is_empty","","",16,[[["self"]],["bool"]]],[11,"contains_input","","",16,[[["self"],["input"]],["bool"]]],[11,"contains_bloom","","",16,[[["self"],["b"]],["bool"]]],[11,"data","","",16,N]],"paths":[[3,"Bloom"],[4,"BloomInput"],[3,"U64"],[3,"U128"],[3,"U256"],[3,"U512"],[3,"U1024"],[3,"H32"],[3,"H64"],[3,"H128"],[3,"H160"],[3,"H256"],[3,"H264"],[3,"H512"],[3,"H520"],[3,"H1024"],[3,"BloomRef"]]};
searchIndex["ethereum_types_serialize"]={"doc":"","items":[[4,"ExpectedLen","ethereum_types_serialize","Expected length of bytes vector.",N,N],[13,"Exact","","Exact length in bytes.",0,N],[13,"Between","","A bytes length between (min; slice.len()].",0,N],[5,"serialize","","Serializes a slice of bytes.",N,N],[5,"serialize_uint","","Serialize a slice of bytes as uint.",N,N],[5,"deserialize_check_len","","Deserialize into vector of bytes with additional size check. Returns number of bytes written.",N,[[["d"],["expectedlen"]],["result",["usize"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["expectedlen"]],["bool"]]],[11,"ne","","",0,[[["self"],["expectedlen"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"ExpectedLen"]]};
searchIndex["ethkey"]={"doc":"","items":[[4,"WordlistError","ethkey","Phrase Validation Error",N,N],[13,"PhraseTooShort","","Phrase is shorter than it was expected.",0,N],[13,"WordNotFromDictionary","","Phrase contains a word that doesn't come from our dictionary.",0,N],[6,"Address","","",N,N],[6,"Public","","",N,N],[3,"Brain","","Simple brainwallet.",N,N],[3,"BrainPrefix","","Tries to find brain-seed keypair with address starting with given prefix.",N,N],[3,"KeyPair","","secp256k1 key pair",N,N],[3,"Password","","",N,N],[3,"Prefix","","Tries to find keypair with address starting with given prefix.",N,N],[3,"Random","","Randomly generates new keypair, instantiating the RNG each time.",N,N],[3,"Signature","","Signature encoded as RSV components",N,N],[3,"Secret","","",N,N],[3,"ExtendedPublic","","Extended public key, allows deterministic derivation of subsequent keys.",N,N],[3,"ExtendedSecret","","Extended secret key, allows deterministic derivation of subsequent keys.",N,N],[3,"ExtendedKeyPair","","",N,N],[3,"SECP256K1","","",N,N],[4,"Error","","Crypto error",N,N],[13,"InvalidSecret","","Invalid secret key",1,N],[13,"InvalidPublic","","Invalid public key",1,N],[13,"InvalidAddress","","Invalid address",1,N],[13,"InvalidSignature","","Invalid EC signature",1,N],[13,"InvalidMessage","","Invalid AES message",1,N],[13,"Io","","IO Error",1,N],[13,"Custom","","Custom",1,N],[4,"DerivationError","","",N,N],[13,"InvalidHardenedUse","","",2,N],[13,"InvalidPoint","","",2,N],[13,"MissingIndex","","",2,N],[13,"InvalidSeed","","",2,N],[4,"Derivation","","Key derivation over generic label `T`",N,N],[13,"Soft","","Soft key derivation (allow proof of parent)",3,N],[13,"Hard","","Hard key derivation (does not allow proof of parent)",3,N],[4,"Void","","Uninstantiatable error type for infallible generators.",N,N],[5,"public_to_address","","",N,[[["public"]],["address"]]],[5,"sign","","",N,[[["secret"],["message"]],["result",["signature","error"]]]],[5,"verify_public","","",N,[[["public"],["signature"],["message"]],["result",["bool","error"]]]],[5,"verify_address","","",N,[[["address"],["signature"],["message"]],["result",["bool","error"]]]],[5,"recover","","",N,[[["signature"],["message"]],["result",["public","error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","",4,[[["string"]],["self"]]],[11,"validate_phrase","","",4,[[["str"],["usize"]],["result",["wordlisterror"]]]],[11,"generate","","",4,[[["self"]],["result",["keypair"]]]],[11,"new","","",5,[[["vec",["u8"]],["usize"],["usize"]],["self"]]],[11,"phrase","","",5,[[["self"]],["str"]]],[11,"generate","","",5,[[["self"]],["result",["keypair","error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"into","","",1,[[["self"]],["string"]]],[11,"from","","",1,[[["error"]],["error"]]],[11,"from","","",1,[[["error"]],["error"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["keypair"]]],[11,"eq","","",6,[[["self"],["keypair"]],["bool"]]],[11,"ne","","",6,[[["self"],["keypair"]],["bool"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_secret","","Create a pair from secret key",6,[[["secret"]],["result",["keypair","error"]]]],[11,"from_secret_slice","","",6,N],[11,"from_keypair","","",6,[[["secretkey"],["publickey"]],["self"]]],[11,"secret","","",6,[[["self"]],["secret"]]],[11,"public","","",6,[[["self"]],["public"]]],[11,"address","","",6,[[["self"]],["address"]]],[11,"clone","","",7,[[["self"]],["password"]]],[11,"eq","","",7,[[["self"],["password"]],["bool"]]],[11,"ne","","",7,[[["self"],["password"]],["bool"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"as_bytes","","",7,N],[11,"as_str","","",7,[[["self"]],["str"]]],[11,"drop","","",7,[[["self"]]]],[11,"from","","",7,[[["string"]],["password"]]],[11,"from","","",7,[[["str"]],["password"]]],[11,"new","","",8,[[["vec",["u8"]],["usize"]],["self"]]],[11,"generate","","",8,[[["self"]],["result",["keypair","error"]]]],[11,"generate","","",9,[[["self"]],["result",["keypair"]]]],[11,"r","","Get a slice into the 'r' portion of the data.",10,N],[11,"s","","Get a slice into the 's' portion of the data.",10,N],[11,"v","","Get the recovery byte.",10,[[["self"]],["u8"]]],[11,"into_electrum","","Encode the signature into RSV array (V altered to be in \"Electrum\" notation).",10,N],[11,"from_electrum","","Parse bytes as a signature encoded as RSV (V in \"Electrum\" notation). May return empty (invalid) signature if given data has invalid length.",10,N],[11,"from_rsv","","Create a signature object from the sig.",10,[[["h256"],["h256"],["u8"]],["self"]]],[11,"is_low_s","","Check if this is a \"low\" signature.",10,[[["self"]],["bool"]]],[11,"is_valid","","Check if each component of the signature is in range.",10,[[["self"]],["bool"]]],[11,"eq","","",10,[[["self"],["self"]],["bool"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_str","","",10,[[["str"]],["result"]]],[11,"default","","",10,[[],["self"]]],[11,"hash","","",10,[[["self"],["h"]]]],[11,"clone","","",10,[[["self"]],["self"]]],[11,"from","","",10,N],[11,"into","","",10,N],[11,"from","","",10,[[["h520"]],["self"]]],[11,"deref","","",10,N],[11,"deref_mut","","",10,N],[11,"clone","","",11,[[["self"]],["secret"]]],[11,"eq","","",11,[[["self"],["secret"]],["bool"]]],[11,"ne","","",11,[[["self"],["secret"]],["bool"]]],[11,"to_hex","","",11,[[["self"]],["string"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"from_slice","","Creates a `Secret` from the given slice, returning `None` if the slice length != 32.",11,N],[11,"zero","","Creates zero key, which is invalid for crypto operations, but valid for math operation.",11,[[],["self"]]],[11,"from_unsafe_slice","","Imports and validates the key.",11,N],[11,"check_validity","","Checks validity of this key.",11,[[["self"]],["result",["error"]]]],[11,"add","","Inplace add one secret key to another (scalar + scalar)",11,[[["self"],["secret"]],["result",["error"]]]],[11,"sub","","Inplace subtract one secret key from another (scalar - scalar)",11,[[["self"],["secret"]],["result",["error"]]]],[11,"dec","","Inplace decrease secret key (scalar - 1)",11,[[["self"]],["result",["error"]]]],[11,"mul","","Inplace multiply one secret key to another (scalar * scalar)",11,[[["self"],["secret"]],["result",["error"]]]],[11,"neg","","Inplace negate secret key (-scalar)",11,[[["self"]],["result",["error"]]]],[11,"inv","","Inplace inverse secret key (1 / scalar)",11,[[["self"]],["result",["error"]]]],[11,"pow","","Compute power of secret key inplace (secret ^ pow). This function is not intended to be used with large powers.",11,[[["self"],["usize"]],["result",["error"]]]],[11,"to_secp256k1_secret","","Create `secp256k1::key::SecretKey` based on this secret",11,[[["self"]],["result",["secretkey","error"]]]],[11,"from_str","","",11,[[["str"]],["result"]]],[11,"from","","",11,N],[11,"from","","",11,[[["h256"]],["self"]]],[11,"from","","",11,[[["str"]],["self"]]],[11,"from","","",11,[[["secretkey"]],["self"]]],[11,"deref","","",11,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"from","","",3,[[["u32"]],["self"]]],[11,"with_code","","New extended key from given secret and chain code.",12,[[["secret"],["h256"]],["extendedsecret"]]],[11,"new_random","","New extended key from given secret with the random chain code.",12,[[["secret"]],["extendedsecret"]]],[11,"new","","New extended key from given secret. Chain code will be derived from the secret itself (in a deterministic way).",12,[[["secret"]],["extendedsecret"]]],[11,"derive","","Derive new private key",12,[[["self"],["derivation"]],["extendedsecret"]]],[11,"as_raw","","Private key component of the extended key.",12,[[["self"]],["secret"]]],[11,"new","","New extended public key from known parent and chain code",13,[[["public"],["h256"]],["self"]]],[11,"from_secret","","Create new extended public key from known secret",13,[[["extendedsecret"]],["result",["derivationerror"]]]],[11,"derive","","Derive new public key Operation is defined only for index belongs [0..2^31)",13,[[["self"],["derivation"]],["result",["derivationerror"]]]],[11,"public","","",13,[[["self"]],["public"]]],[11,"new","","",14,[[["secret"]],["self"]]],[11,"with_code","","",14,[[["secret"],["public"],["h256"]],["self"]]],[11,"with_secret","","",14,[[["secret"],["h256"]],["self"]]],[11,"with_seed","","",14,N],[11,"secret","","",14,[[["self"]],["extendedsecret"]]],[11,"public","","",14,[[["self"]],["extendedpublic"]]],[11,"derive","","",14,[[["self"],["derivation"]],["result",["derivationerror"]]]],[0,"brain_recover","","",N,N],[3,"PhrasesIterator","ethkey::brain_recover","Iterator over possible",N,N],[5,"brain_recover","","Tries to find a phrase for address, given the number of expected words and a partial phrase.",N,[[["address"],["str"],["usize"]],["option",["string"]]]],[11,"from_known_phrase","","",15,[[["str"],["usize"]],["self"]]],[11,"new","","",15,[[["vec",["vec"]]],["self"]]],[11,"combinations","","",15,[[["self"]],["u64"]]],[11,"next","","",15,[[["self"]],["option",["string"]]]],[0,"crypto","ethkey","",N,N],[4,"Error","ethkey::crypto","",N,N],[13,"Secp","","",16,N],[13,"Io","","",16,N],[13,"InvalidMessage","","",16,N],[13,"Symm","","",16,N],[0,"ecdh","","ECDH functions",N,N],[5,"agree","ethkey::crypto::ecdh","Agree on a shared secret",N,[[["secret"],["public"]],["result",["secret","error"]]]],[0,"ecies","ethkey::crypto","ECIES function",N,N],[5,"encrypt","ethkey::crypto::ecies","Encrypt a message with a public key, writing an HMAC covering both the plaintext and authenticated data.",N,N],[5,"decrypt","","Decrypt a message with a secret key, checking HMAC for ciphertext and authenticated data validity.",N,N],[11,"fmt","ethkey::crypto","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"description","","",16,[[["self"]],["str"]]],[11,"cause","","",16,[[["self"]],["option",["error"]]]],[11,"from","","",16,[[["error"]],["error"]]],[11,"from","","",16,[[["error"]],["error"]]],[11,"from","","",16,[[["symmerror"]],["error"]]],[0,"math","ethkey","",N,N],[5,"public_is_valid","ethkey::math","Whether the public key is valid.",N,[[["public"]],["bool"]]],[5,"public_mul_secret","","Inplace multiply public key by secret key (EC point * scalar)",N,[[["public"],["secret"]],["result",["error"]]]],[5,"public_add","","Inplace add one public key to another (EC point + EC point)",N,[[["public"],["public"]],["result",["error"]]]],[5,"public_sub","","Inplace sub one public key from another (EC point - EC point)",N,[[["public"],["public"]],["result",["error"]]]],[5,"public_negate","","Replace public key with its negation (EC point = - EC point)",N,[[["public"]],["result",["error"]]]],[5,"generation_point","","Return base point of secp256k1",N,[[],["public"]]],[5,"curve_order","","Return secp256k1 elliptic curve order",N,[[],["u256"]]],[6,"Message","ethkey","",N,N],[8,"Generator","","Generates new keypair.",N,N],[16,"Error","","",17,N],[10,"generate","","Should be called to generate new keypair.",17,[[["self"]],["result",["keypair"]]]],[11,"deref","","",18,[[["self"]],["secp256k1"]]],[11,"initialize","","",18,[[["self"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["error"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]]],"paths":[[4,"WordlistError"],[4,"Error"],[4,"DerivationError"],[4,"Derivation"],[3,"Brain"],[3,"BrainPrefix"],[3,"KeyPair"],[3,"Password"],[3,"Prefix"],[3,"Random"],[3,"Signature"],[3,"Secret"],[3,"ExtendedSecret"],[3,"ExtendedPublic"],[3,"ExtendedKeyPair"],[3,"PhrasesIterator"],[4,"Error"],[8,"Generator"],[3,"SECP256K1"],[4,"Void"]]};
searchIndex["fixed_hash"]={"doc":"","items":[[5,"clean_0x","fixed_hash","Return `s` without the `0x` at the beginning of it, if any.",N,[[["str"]],["str"]]],[14,"construct_hash","","",N,N]],"paths":[]};
searchIndex["heapsize"]={"doc":"Data structure measurement.","items":[[5,"heap_size_of","heapsize","Get the size of a heap block.",N,N],[8,"HeapSizeOf","","",N,N],[10,"heap_size_of_children","","Measure the size of any heap-allocated structures that hang off this value, but not the space taken up by the value itself (i.e. what size_of:: measures, more or less); that space is handled by the implementation of HeapSizeOf for Box below.",0,[[["self"]],["usize"]]],[14,"known_heap_size","","For use on types defined in external crates with known heap sizes.",N,N]],"paths":[[8,"HeapSizeOf"]]};
searchIndex["itertools"]={"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[4,"Either","itertools","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",N,N],[13,"Left","","A value of type `L`.",0,N],[13,"Right","","A value of type `R`.",0,N],[4,"Diff","","A type returned by the `diff_with` function.",N,N],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator's remaining elements starting with the first mis-match.",1,N],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",1,N],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",1,N],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for more detail.",N,N],[13,"NoElements","","Empty iterator",2,N],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",2,N],[13,"MinMax","","More than one element in the iterator, the first element is not larger than the second",2,N],[4,"Position","","A value yielded by `WithPosition`. Indicates the position of this element in the iterator results.",N,N],[13,"First","","This is the first element.",3,N],[13,"Middle","","This is neither the first nor the last element.",3,N],[13,"Last","","This is the last element.",3,N],[13,"Only","","This is the only element.",3,N],[4,"EitherOrBoth","","A value yielded by `ZipLongest`. Contains one or two values, depending on which of the input iterators are exhausted.",N,N],[13,"Both","","Neither input iterator is exhausted yet, yielding two values.",4,N],[13,"Left","","The parameter iterator of `.zip_longest()` is exhausted, only yielding a value from the `self` iterator.",4,N],[13,"Right","","The `self` iterator of `.zip_longest()` is exhausted, only yielding a value from the parameter iterator.",4,N],[4,"FoldWhile","","An enum used for controlling the execution of `.fold_while()`.",N,N],[13,"Continue","","Continue folding with this value",5,N],[13,"Done","","Fold is complete and will return this value",5,N],[5,"cons_tuples","","Create an iterator that maps for example iterators of `((A, B), C)` to `(A, B, C)`.",N,[[["i"]],["constuples"]]],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and returns a `Diff` which describes how `j` differs from `i`.",N,[[["i"],["j"],["f"]],["option",["diff"]]]],[5,"kmerge_by","","Create an iterator that merges elements of the contained iterators.",N,[[["i"],["f"]],["kmergeby"]]],[5,"repeat_n","","Create an iterator that produces `n` repetitions of `element`.",N,[[["a"],["usize"]],["repeatn"]]],[5,"repeat_call","","An iterator source that produces elements indefinitely by calling a given closure.",N,[[["f"]],["repeatcall"]]],[5,"unfold","","Creates a new unfold source with the specified closure as the \"iterator function\" and an initial state to eventually pass to the closure",N,[[["st"],["f"]],["unfold"]]],[5,"iterate","","Creates a new iterator that infinitely applies function to value and yields results.",N,[[["st"],["f"]],["iterate"]]],[5,"multizip","","An iterator that generalizes .zip() and allows running multiple iterators in lockstep.",N,[[["u"]],["zip"]]],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",N,[[["i"],["j"]],["interleave"]]],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",N,[[["i"],["j"]],["merge"]]],[5,"put_back","","Create an iterator where you can put back a single item",N,[[["i"]],["putback"]]],[5,"put_back_n","","Create an iterator where you can put back multiple values to the front of the iteration.",N,[[["i"]],["putbackn"]]],[5,"multipeek","","An iterator adaptor that allows the user to peek at multiple `.next()` values without advancing the base iterator.",N,[[["i"]],["multipeek"]]],[5,"kmerge","","Create an iterator that merges elements of the contained iterators using the ordering function.",N,[[["i"]],["kmerge"]]],[5,"zip_eq","","Iterate `i` and `j` in lock step.",N,[[["i"],["j"]],["zipeq"]]],[5,"rciter","","Return an iterator inside a `Rc<RefCell<_>>` wrapper.",N,[[["i"]],["rciter"]]],[5,"enumerate","","Iterate `iterable` with a running index.",N,[[["i"]],["enumerate"]]],[5,"rev","","Iterate `iterable` in reverse.",N,[[["i"]],["rev"]]],[5,"zip","","Iterate `i` and `j` in lock step.",N,[[["i"],["j"]],["zip"]]],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",N,[[["i"],["j"]],["chain"]]],[5,"cloned","","Create an iterator that clones each element from &T to T",N,[[["i"]],["cloned"]]],[5,"fold","","Perform a fold operation over the iterable.",N,[[["i"],["b"],["f"]],["b"]]],[5,"all","","Test whether the predicate holds for all elements in the iterable.",N,[[["i"],["f"]],["bool"]]],[5,"any","","Test whether the predicate holds for any elements in the iterable.",N,[[["i"],["f"]],["bool"]]],[5,"max","","Return the maximum value of the iterable.",N,[[["i"]],["option"]]],[5,"min","","Return the minimum value of the iterable.",N,[[["i"]],["option"]]],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",N,[[["i"],["str"]],["string"]]],[5,"sorted","","Collect all the iterable's elements into a sorted vector in ascending order.",N,[[["i"]],["vec"]]],[5,"equal","","Return `true` if both iterators produce equal sequences (elements pairwise equal and sequences of the same length), `false` otherwise.",N,[[["i"],["j"]],["bool"]]],[5,"assert_equal","","Assert that two iterators produce equal sequences, with the same semantics as equal(a, b).",N,[[["i"],["j"]]]],[5,"partition","","Partition a sequence using predicate `pred` so that elements that map to `true` are placed before elements which map to `false`.",N,[[["i"],["f"]],["usize"]]],[0,"structs","","The concrete iterator types.",N,N],[3,"Dedup","itertools::structs","An iterator adaptor that removes repeated duplicates.",N,N],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both run out.",N,N],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until one of them runs out.",N,N],[3,"Product","","An iterator adaptor that iterates over the cartesian product of the element sets of two iterators `I` and `J`.",N,N],[3,"PutBack","","An iterator adaptor that allows putting back a single item to the front of the iterator.",N,N],[3,"PutBackN","","An iterator adaptor that allows putting multiple items in front of the iterator.",N,N],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",N,N],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator for each iteration.",N,N],[3,"MapResults","","An iterator adapter to apply a transformation within a nested `Result`.",N,N],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",N,N],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",N,N],[3,"MultiPeek","","See `multipeek()` for more information.",N,N],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate returns `true`.",N,N],[3,"WhileSome","","An iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",N,N],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",N,N],[3,"TupleCombinations","","An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples of a specific size.",N,N],[3,"Combinations","","An iterator to iterate through all the `n`-length combinations in an iterator.",N,N],[3,"Unique","","An iterator adapter to filter out duplicate elements.",N,N],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",N,N],[3,"Flatten","","An iterator adapter to simply flatten a structure.",N,N],[3,"ConsTuples","","An iterator that maps an iterator of tuples like `((A, B), C)` to an iterator of `(A, B, C)`.",N,N],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",N,N],[3,"FormatWith","","Format all iterator elements lazily, separated by `sep`.",N,N],[3,"IntoChunks","","`ChunkLazy` is the storage for a lazy chunking operation.",N,N],[3,"Chunk","","An iterator for the elements in a single chunk.",N,N],[3,"Chunks","","An iterator that yields the Chunk iterators.",N,N],[3,"GroupBy","","`GroupBy` is the storage for the lazy grouping operation.",N,N],[3,"Group","","An iterator for the elements in a single group.",N,N],[3,"Groups","","An iterator that yields the Group iterators.",N,N],[3,"Intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",N,N],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order. If all base iterators are sorted (ascending), the result is sorted.",N,N],[3,"KMergeBy","","An iterator adaptor that merges an abitrary number of base iterators according to an ordering function.",N,N],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling missing elements using a closure.",N,N],[3,"PeekingTakeWhile","","An iterator adaptor that takes items while a closure returns `true`.",N,N],[3,"RcIter","","A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.",N,N],[12,"rciter","","The boxed iterator.",6,N],[3,"RepeatN","","An iterator that produces n repetitions of an element.",N,N],[3,"RepeatCall","","See `repeat_call` for more information.",N,N],[3,"Unfold","","See `unfold` for more information.",N,N],[12,"state","","Internal state that will be passed to the closure on the next iteration",7,N],[3,"Iterate","","An iterator that infinitely applies function to value and yields results.",N,N],[3,"Tee","","One half of an iterator pair where both return the same elements.",N,N],[3,"TupleBuffer","","An iterator over a incomplete tuple.",N,N],[3,"TupleWindows","","An iterator over all contiguous windows that produces tuples of a specific size.",N,N],[3,"Tuples","","An iterator that groups the items in tuples of a specific size.",N,N],[3,"WithPosition","","An iterator adaptor that wraps each element in an `Position`.",N,N],[3,"ZipEq","","An iterator which iterates two other iterators simultaneously",N,N],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",N,N],[3,"Zip","","See `multizip` for more information.",N,N],[11,"clone","","",8,[[["self"]],["multipeek"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"reset_peek","","Reset the peeking “cursor”",8,[[["self"]]]],[11,"peek","","Works exactly like `.next()` with the only difference that it doesn't advance itself. `.peek()` can be called multiple times, to peek further ahead.",8,[[["self"]],["option"]]],[11,"next","","",8,[[["self"]],["option"]]],[11,"size_hint","","",8,N],[11,"clone","","",9,[[["self"]],["interleave"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"next","","",9,[[["self"]],["option"]]],[11,"size_hint","","",9,N],[11,"clone","","",10,[[["self"]],["interleaveshortest"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"next","","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,N],[11,"clone","","",11,[[["self"]],["putback"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"with_value","","put back value `value` (builder method)",11,N],[11,"into_parts","","Split the `PutBack` into its parts.",11,N],[11,"put_back","","Put back a single value to the front of the iterator.",11,N],[11,"next","","",11,[[["self"]],["option"]]],[11,"size_hint","","",11,N],[11,"all","","",11,[[["self"],["g"]],["bool"]]],[11,"fold","","",11,[[["self"],["acc"],["g"]],["acc"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["putbackn"]]],[11,"put_back","","Puts x in front of the iterator. The values are yielded in order of the most recently put back values first.",12,N],[11,"next","","",12,[[["self"]],["option"]]],[11,"size_hint","","",12,N],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["product"]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"size_hint","","",13,N],[11,"clone","","",14,[[["self"]],["batching"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"next","","",14,[[["self"]],["option"]]],[11,"size_hint","","",14,N],[11,"clone","","",15,[[["self"]],["step"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"next","","",15,[[["self"]],["option"]]],[11,"size_hint","","",15,N],[11,"clone","","",16,[[["self"]],["self"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"next","","",16,[[["self"]],["option"]]],[11,"size_hint","","",16,N],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["self"]]],[11,"next","","",17,[[["self"]],["option"]]],[11,"size_hint","","",17,N],[11,"clone","","",18,[[["self"]],["self"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"next","","",18,[[["self"]],["option"]]],[11,"size_hint","","",18,N],[11,"clone","","",19,[[["self"]],["self"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"next","","",19,[[["self"]],["option"]]],[11,"size_hint","","",19,N],[11,"fold","","",19,[[["self"],["acc"],["g"]],["acc"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"next","","",20,[[["self"]],["option"]]],[11,"size_hint","","",20,N],[11,"clone","","",21,[[["self"]],["whilesome"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"next","","",21,[[["self"]],["option"]]],[11,"size_hint","","",21,N],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"next","","",22,[[["self"]],["option"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"next","","",23,[[["self"]],["option"]]],[11,"clone","","",24,[[["self"]],["uniqueby"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"next","","",24,[[["self"]],["option"]]],[11,"size_hint","","",24,N],[11,"next","","",25,[[["self"]],["option"]]],[11,"size_hint","","",25,N],[11,"clone","","",25,[[["self"]],["unique"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"clone","","",26,[[["self"]],["flatten"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"next","","",26,[[["self"]],["option"]]],[11,"fold","","",26,[[["self"],["acc"],["g"]],["acc"]]],[11,"next_back","","",26,[[["self"]],["option"]]],[11,"next","","",27,[[["self"]],["option"]]],[11,"size_hint","","",27,N],[11,"next","","",28,[[["self"]],["option"]]],[11,"size_hint","","",28,N],[11,"next_back","","",28,[[["self"]],["option"]]],[11,"next","","",28,[[["self"]],["option"]]],[11,"size_hint","","",28,N],[11,"next_back","","",28,[[["self"]],["option"]]],[11,"next","","",28,[[["self"]],["option"]]],[11,"size_hint","","",28,N],[11,"next_back","","",28,[[["self"]],["option"]]],[11,"next","","",28,[[["self"]],["option"]]],[11,"size_hint","","",28,N],[11,"next_back","","",28,[[["self"]],["option"]]],[11,"next","","",28,[[["self"]],["option"]]],[11,"size_hint","","",28,N],[11,"next_back","","",28,[[["self"]],["option"]]],[11,"next","","",28,[[["self"]],["option"]]],[11,"size_hint","","",28,N],[11,"next_back","","",28,[[["self"]],["option"]]],[11,"clone","","",28,[[["self"]],["self"]]],[11,"clone","","",29,[[["self"]],["format"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"next","","",31,[[["self"]],["option"]]],[11,"drop","","",32,[[["self"]]]],[11,"next","","",32,[[["self"]],["option"]]],[11,"next","","",33,[[["self"]],["option"]]],[11,"drop","","",34,[[["self"]]]],[11,"next","","",34,[[["self"]],["option"]]],[11,"clone","","",35,[[["self"]],["intersperse"]]],[11,"next","","",35,[[["self"]],["option"]]],[11,"size_hint","","",35,N],[11,"clone","","",36,[[["self"]],["kmerge"]]],[11,"next","","",36,[[["self"]],["option"]]],[11,"size_hint","","",36,N],[11,"next","","",37,[[["self"]],["option"]]],[11,"size_hint","","",37,N],[11,"clone","itertools","",2,[[["self"]],["minmaxresult"]]],[11,"eq","","",2,[[["self"],["minmaxresult"]],["bool"]]],[11,"ne","","",2,[[["self"],["minmaxresult"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The returned `Option` has variant `None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`. If the `MinMaxResult` has variant `OneElement(x)`, performing this operation will make one clone of `x`.",2,[[["self"]],["option"]]],[11,"clone","itertools::structs","",38,[[["self"]],["padusing"]]],[11,"next","","",38,[[["self"]],["option"]]],[11,"size_hint","","",38,N],[11,"next_back","","",38,[[["self"]],["option"]]],[11,"peeking_next","","",11,[[["self"],["f"]],["option"]]],[11,"peeking_next","","",12,[[["self"],["f"]],["option"]]],[11,"next","","",39,[[["self"]],["option"]]],[11,"size_hint","","",39,N],[11,"clone","","",6,[[["self"]],["rciter"]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"new","","",40,[[["a"],["usize"]],["self"]]],[11,"next","","",40,[[["self"]],["option"]]],[11,"size_hint","","",40,N],[11,"next_back","","",40,[[["self"]],["option"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"next","","",41,[[["self"]],["option"]]],[11,"size_hint","","",41,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["unfold"]]],[11,"next","","",7,[[["self"]],["option"]]],[11,"size_hint","","",7,N],[11,"clone","","",42,[[["self"]],["iterate"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"next","","",42,[[["self"]],["option"]]],[11,"size_hint","","",42,N],[11,"next","","",43,[[["self"]],["option"]]],[11,"size_hint","","",43,N],[11,"next","","",44,[[["self"]],["option"]]],[11,"size_hint","","",44,N],[11,"next","","",45,[[["self"]],["option"]]],[11,"into_buffer","","Return a buffer with the produced items that was not enough to be grouped in a tuple.",45,[[["self"]],["tuplebuffer"]]],[11,"next","","",46,[[["self"]],["option"]]],[11,"clone","itertools","",3,[[["self"]],["position"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["position"]],["bool"]]],[11,"ne","","",3,[[["self"],["position"]],["bool"]]],[11,"into_inner","","Return the inner value.",3,[[["self"]],["t"]]],[11,"next","itertools::structs","",47,[[["self"]],["option"]]],[11,"size_hint","","",47,N],[11,"clone","","",48,[[["self"]],["zipeq"]]],[11,"next","","",48,[[["self"]],["option"]]],[11,"size_hint","","",48,N],[11,"clone","","",49,[[["self"]],["ziplongest"]]],[11,"next","","",49,[[["self"]],["option"]]],[11,"size_hint","","",49,N],[11,"next_back","","",49,[[["self"]],["option"]]],[11,"clone","itertools","",4,[[["self"]],["eitherorboth"]]],[11,"eq","","",4,[[["self"],["eitherorboth"]],["bool"]]],[11,"ne","","",4,[[["self"],["eitherorboth"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","itertools::structs","",50,[[["self"]],["zip"]]],[11,"new","","Deprecated: renamed to multizip",50,[[["u"]],["zip"]]],[11,"from","","",50,N],[11,"next","","",50,[[["self"]],["option"]]],[11,"size_hint","","",50,N],[11,"from","","",50,N],[11,"next","","",50,[[["self"]],["option"]]],[11,"size_hint","","",50,N],[11,"from","","",50,N],[11,"next","","",50,[[["self"]],["option"]]],[11,"size_hint","","",50,N],[11,"from","","",50,N],[11,"next","","",50,[[["self"]],["option"]]],[11,"size_hint","","",50,N],[11,"from","","",50,N],[11,"next","","",50,[[["self"]],["option"]]],[11,"size_hint","","",50,N],[11,"from","","",50,N],[11,"next","","",50,[[["self"]],["option"]]],[11,"size_hint","","",50,N],[11,"from","","",50,N],[11,"next","","",50,[[["self"]],["option"]]],[11,"size_hint","","",50,N],[11,"from","","",50,N],[11,"next","","",50,[[["self"]],["option"]]],[11,"size_hint","","",50,N],[8,"PeekingNext","itertools","An iterator that allows peeking at an element before deciding to accept it.",N,N],[10,"peeking_next","","Pass a reference to the next iterator element to the closure `accept`; if `accept` returns true, return it as the next element, else None.",51,[[["self"],["f"]],["option"]]],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",N,N],[11,"interleave","","Alternate elements from two iterators until both run out.",52,[[["self"],["j"]],["interleave"]]],[11,"interleave_shortest","","Alternate elements from two iterators until one of them runs out.",52,[[["self"],["j"]],["interleaveshortest"]]],[11,"intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",52,N],[11,"zip_longest","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of two optional elements.",52,[[["self"],["j"]],["ziplongest"]]],[11,"zip_eq","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of elements.",52,[[["self"],["j"]],["zipeq"]]],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",52,[[["self"],["f"]],["batching"]]],[11,"group_by","","Return an iterable that can group iterator elements. Consecutive elements that map to the same key (“runs”), are assigned to the same group.",52,[[["self"],["f"]],["groupby"]]],[11,"group_by_lazy","","",52,[[["self"],["f"]],["groupby"]]],[11,"chunks","","Return an iterable that can chunk the iterator.",52,[[["self"],["usize"]],["intochunks"]]],[11,"chunks_lazy","","",52,[[["self"],["usize"]],["intochunks"]]],[11,"tuple_windows","","Return an iterator over all contiguous windows producing tuples of a specific size (up to 4).",52,[[["self"]],["tuplewindows"]]],[11,"tuples","","Return an iterator that groups the items in tuples of a specific size (up to 4).",52,[[["self"]],["tuples"]]],[11,"tee","","Split into an iterator pair that both yield all elements from the original iterator.",52,N],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator for each iteration.",52,[[["self"],["usize"]],["step"]]],[11,"map_results","","Return an iterator adaptor that applies the provided closure to every `Result::Ok` value. `Result::Err` values are unchanged.",52,[[["self"],["f"]],["mapresults"]]],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.  If both base iterators are sorted (ascending), the result is sorted.",52,[[["self"],["j"]],["merge"]]],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order. This is much like `.merge()` but allows for a custom ordering.",52,[[["self"],["j"],["f"]],["mergeby"]]],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by merging them in ascending order.",52,[[["self"]],["kmerge"]]],[11,"kmerge_by","","Return an iterator adaptor that flattens an iterator of iterators by merging them according to the given closure.",52,[[["self"],["f"]],["kmergeby"]]],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of the element sets of two iterators `self` and `J`.",52,[[["self"],["j"]],["product"]]],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to optionally merge together consecutive elements.",52,[[["self"],["f"]],["coalesce"]]],[11,"dedup","","Remove duplicates from sections of consecutive identical elements. If the iterator is sorted, all elements will be unique.",52,[[["self"]],["dedup"]]],[11,"unique","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration. Duplicates are detected using hash and equality.",52,[[["self"]],["unique"]]],[11,"unique_by","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration.",52,[[["self"],["f"]],["uniqueby"]]],[11,"peeking_take_while","","Return an iterator adaptor that borrows from this iterator and  takes items while the closure `accept` returns `true`.",52,[[["self"],["f"]],["peekingtakewhile"]]],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate `accept` returns `true`.",52,[[["self"],["f"]],["takewhileref"]]],[11,"while_some","","Return an iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",52,[[["self"]],["whilesome"]]],[11,"tuple_combinations","","Return an iterator adaptor that iterates over the combinations of the elements from an iterator.",52,[[["self"]],["tuplecombinations"]]],[11,"combinations","","Return an iterator adaptor that iterates over the `n`-length combinations of the elements from an iterator.",52,[[["self"],["usize"]],["combinations"]]],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of `min` by filling missing elements using a closure `f`.",52,[[["self"],["usize"],["f"]],["padusing"]]],[11,"flatten","","Unravel a nested iterator.",52,[[["self"]],["flatten"]]],[11,"with_position","","Return an iterator adaptor that wraps each element in a `Position` to ease special-case handling of the first or last elements.",52,[[["self"]],["withposition"]]],[11,"next_tuple","","Advances the iterator and returns the next items grouped in a tuple of a specific size (up to 4).",52,[[["self"]],["option"]]],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",52,[[["self"],["p"]],["option"]]],[11,"dropping","","Consume the first `n` elements from the iterator eagerly, and return the same iterator again.",52,[[["self"],["usize"]],["self"]]],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly, and return the same iterator again.",52,[[["self"],["usize"]],["self"]]],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",52,[[["self"],["f"]]]],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`, for convenience.",52,[[["self"]],["vec"]]],[11,"set_from","","Assign to each reference in `self` from the `from` iterator, stopping at the shortest of the two iterators.",52,[[["self"],["j"]],["usize"]]],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",52,[[["self"],["str"]],["string"]]],[11,"format","","Format all iterator elements, separated by `sep`.",52,[[["self"],["str"]],["format"]]],[11,"format_default","","",52,[[["self"],["str"]],["format"]]],[11,"format_with","","Format all iterator elements, separated by `sep`.",52,[[["self"],["str"],["f"]],["formatwith"]]],[11,"fold_results","","Fold `Result` values from an iterator.",52,[[["self"],["b"],["f"]],["result"]]],[11,"fold_options","","Fold `Option` values from an iterator.",52,[[["self"],["b"],["f"]],["option"]]],[11,"fold1","","Accumulator of the elements in the iterator.",52,[[["self"],["f"]],["option"]]],[11,"fold_while","","An iterator method that applies a function, producing a single, final value.",52,[[["self"],["b"],["f"]],["b"]]],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",52,[[["self"]],["vec"]]],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",52,[[["self"],["f"]],["vec"]]],[11,"partition_map","","Collect all iterator elements into one of two partitions. Unlike `Iterator::partition`, each partition may have a distinct type.",52,N],[11,"minmax","","Return the minimum and maximum elements in the iterator.",52,[[["self"]],["minmaxresult"]]],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by the specified function.",52,[[["self"],["f"]],["minmaxresult"]]],[11,"minmax_by","","Return the minimum and maximum element of an iterator, as determined by the specified comparison function.",52,[[["self"],["f"]],["minmaxresult"]]],[14,"iproduct","","Create an iterator over the “cartesian product” of iterators.",N,N],[14,"izip","","Create an iterator running multiple iterators in lockstep.",N,N],[11,"is_left","","Return true if the value is the `Left` variant.",0,[[["self"]],["bool"]]],[11,"is_right","","Return true if the value is the `Right` variant.",0,[[["self"]],["bool"]]],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,[[["self"]],["option"]]],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,[[["self"]],["option"]]],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,[[["self"]],["either"]]],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,[[["self"]],["either"]]],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,[[["self"]],["either"]]],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,[[["self"],["f"]],["either"]]],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,[[["self"],["f"]],["either"]]],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,[[["self"],["f"],["g"]],["t"]]],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,[[["self"],["ctx"],["f"],["g"]],["t"]]],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"into_iter","","Convert the inner value to an iterator.",0,[[["self"]],["either"]]],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,[[["self"]],["t"]]],[11,"hash","","",0,N],[11,"as_ref","","",0,[[["self"]],["target"]]],[11,"eq","","",0,[[["self"],["either"]],["bool"]]],[11,"ne","","",0,[[["self"],["either"]],["bool"]]],[11,"cmp","","",0,[[["self"],["either"]],["ordering"]]],[11,"next","","",0,[[["self"]],["option"]]],[11,"size_hint","","",0,N],[11,"fold","","",0,[[["self"],["acc"],["g"]],["acc"]]],[11,"count","","",0,[[["self"]],["usize"]]],[11,"last","","",0,[[["self"]],["option"]]],[11,"nth","","",0,[[["self"],["usize"]],["option"]]],[11,"collect","","",0,[[["self"]],["b"]]],[11,"all","","",0,[[["self"],["f"]],["bool"]]],[11,"from","","",0,[[["result"]],["either"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"partial_cmp","","",0,[[["self"],["either"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["either"]],["bool"]]],[11,"le","","",0,[[["self"],["either"]],["bool"]]],[11,"gt","","",0,[[["self"],["either"]],["bool"]]],[11,"ge","","",0,[[["self"],["either"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",0,[[["self"]],["either"]]],[11,"deref_mut","","",0,N],[11,"as_mut","","",0,[[["self"]],["target"]]],[11,"deref","","",0,N],[11,"extend","","",0,N],[11,"into","","",0,[[["self"]],["result"]]]],"paths":[[4,"Either"],[4,"Diff"],[4,"MinMaxResult"],[4,"Position"],[4,"EitherOrBoth"],[4,"FoldWhile"],[3,"RcIter"],[3,"Unfold"],[3,"MultiPeek"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"PutBackN"],[3,"Product"],[3,"Batching"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"Coalesce"],[3,"Dedup"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"TupleCombinations"],[3,"Combinations"],[3,"UniqueBy"],[3,"Unique"],[3,"Flatten"],[3,"MapResults"],[3,"ConsTuples"],[3,"Format"],[3,"FormatWith"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"KMerge"],[3,"KMergeBy"],[3,"PadUsing"],[3,"PeekingTakeWhile"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Iterate"],[3,"Tee"],[3,"TupleBuffer"],[3,"Tuples"],[3,"TupleWindows"],[3,"WithPosition"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"],[8,"PeekingNext"],[8,"Itertools"]]};
searchIndex["lazy_static"]={"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",N,[[["t"]]]],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",N,N],[14,"lazy_static","","",N,N]],"paths":[]};
searchIndex["libc"]={"doc":"Crate docs","items":[[3,"group","libc","",N,N],[12,"gr_name","","",0,N],[12,"gr_passwd","","",0,N],[12,"gr_gid","","",0,N],[12,"gr_mem","","",0,N],[3,"utimbuf","","",N,N],[12,"actime","","",1,N],[12,"modtime","","",1,N],[3,"timeval","","",N,N],[12,"tv_sec","","",2,N],[12,"tv_usec","","",2,N],[3,"timespec","","",N,N],[12,"tv_sec","","",3,N],[12,"tv_nsec","","",3,N],[3,"rlimit","","",N,N],[12,"rlim_cur","","",4,N],[12,"rlim_max","","",4,N],[3,"rusage","","",N,N],[12,"ru_utime","","",5,N],[12,"ru_stime","","",5,N],[12,"ru_maxrss","","",5,N],[12,"ru_ixrss","","",5,N],[12,"ru_idrss","","",5,N],[12,"ru_isrss","","",5,N],[12,"ru_minflt","","",5,N],[12,"ru_majflt","","",5,N],[12,"ru_nswap","","",5,N],[12,"ru_inblock","","",5,N],[12,"ru_oublock","","",5,N],[12,"ru_msgsnd","","",5,N],[12,"ru_msgrcv","","",5,N],[12,"ru_nsignals","","",5,N],[12,"ru_nvcsw","","",5,N],[12,"ru_nivcsw","","",5,N],[3,"in_addr","","",N,N],[12,"s_addr","","",6,N],[3,"in6_addr","","",N,N],[12,"s6_addr","","",7,N],[3,"ip_mreq","","",N,N],[12,"imr_multiaddr","","",8,N],[12,"imr_interface","","",8,N],[3,"ipv6_mreq","","",N,N],[12,"ipv6mr_multiaddr","","",9,N],[12,"ipv6mr_interface","","",9,N],[3,"hostent","","",N,N],[12,"h_name","","",10,N],[12,"h_aliases","","",10,N],[12,"h_addrtype","","",10,N],[12,"h_length","","",10,N],[12,"h_addr_list","","",10,N],[3,"iovec","","",N,N],[12,"iov_base","","",11,N],[12,"iov_len","","",11,N],[3,"pollfd","","",N,N],[12,"fd","","",12,N],[12,"events","","",12,N],[12,"revents","","",12,N],[3,"winsize","","",N,N],[12,"ws_row","","",13,N],[12,"ws_col","","",13,N],[12,"ws_xpixel","","",13,N],[12,"ws_ypixel","","",13,N],[3,"linger","","",N,N],[12,"l_onoff","","",14,N],[12,"l_linger","","",14,N],[3,"sigval","","",N,N],[12,"sival_ptr","","",15,N],[3,"itimerval","","",N,N],[12,"it_interval","","",16,N],[12,"it_value","","",16,N],[3,"tms","","",N,N],[12,"tms_utime","","",17,N],[12,"tms_stime","","",17,N],[12,"tms_cutime","","",17,N],[12,"tms_cstime","","",17,N],[3,"servent","","",N,N],[12,"s_name","","",18,N],[12,"s_aliases","","",18,N],[12,"s_port","","",18,N],[12,"s_proto","","",18,N],[3,"protoent","","",N,N],[12,"p_name","","",19,N],[12,"p_aliases","","",19,N],[12,"p_proto","","",19,N],[3,"sockaddr","","",N,N],[12,"sa_len","","",20,N],[12,"sa_family","","",20,N],[12,"sa_data","","",20,N],[3,"sockaddr_in6","","",N,N],[12,"sin6_len","","",21,N],[12,"sin6_family","","",21,N],[12,"sin6_port","","",21,N],[12,"sin6_flowinfo","","",21,N],[12,"sin6_addr","","",21,N],[12,"sin6_scope_id","","",21,N],[3,"sockaddr_un","","",N,N],[12,"sun_len","","",22,N],[12,"sun_family","","",22,N],[12,"sun_path","","",22,N],[3,"passwd","","",N,N],[12,"pw_name","","",23,N],[12,"pw_passwd","","",23,N],[12,"pw_uid","","",23,N],[12,"pw_gid","","",23,N],[12,"pw_change","","",23,N],[12,"pw_class","","",23,N],[12,"pw_gecos","","",23,N],[12,"pw_dir","","",23,N],[12,"pw_shell","","",23,N],[12,"pw_expire","","",23,N],[3,"ifaddrs","","",N,N],[12,"ifa_next","","",24,N],[12,"ifa_name","","",24,N],[12,"ifa_flags","","",24,N],[12,"ifa_addr","","",24,N],[12,"ifa_netmask","","",24,N],[12,"ifa_dstaddr","","",24,N],[12,"ifa_data","","",24,N],[3,"fd_set","","",N,N],[3,"tm","","",N,N],[12,"tm_sec","","",25,N],[12,"tm_min","","",25,N],[12,"tm_hour","","",25,N],[12,"tm_mday","","",25,N],[12,"tm_mon","","",25,N],[12,"tm_year","","",25,N],[12,"tm_wday","","",25,N],[12,"tm_yday","","",25,N],[12,"tm_isdst","","",25,N],[12,"tm_gmtoff","","",25,N],[12,"tm_zone","","",25,N],[3,"utsname","","",N,N],[12,"sysname","","",26,N],[12,"nodename","","",26,N],[12,"release","","",26,N],[12,"version","","",26,N],[12,"machine","","",26,N],[3,"msghdr","","",N,N],[12,"msg_name","","",27,N],[12,"msg_namelen","","",27,N],[12,"msg_iov","","",27,N],[12,"msg_iovlen","","",27,N],[12,"msg_control","","",27,N],[12,"msg_controllen","","",27,N],[12,"msg_flags","","",27,N],[3,"cmsghdr","","",N,N],[12,"cmsg_len","","",28,N],[12,"cmsg_level","","",28,N],[12,"cmsg_type","","",28,N],[3,"fsid_t","","",N,N],[3,"if_nameindex","","",N,N],[12,"if_index","","",29,N],[12,"if_name","","",29,N],[3,"aiocb","","",N,N],[12,"aio_fildes","","",30,N],[12,"aio_offset","","",30,N],[12,"aio_buf","","",30,N],[12,"aio_nbytes","","",30,N],[12,"aio_reqprio","","",30,N],[12,"aio_sigevent","","",30,N],[12,"aio_lio_opcode","","",30,N],[3,"utmpx","","",N,N],[12,"ut_user","","",31,N],[12,"ut_id","","",31,N],[12,"ut_line","","",31,N],[12,"ut_pid","","",31,N],[12,"ut_type","","",31,N],[12,"ut_tv","","",31,N],[12,"ut_host","","",31,N],[3,"glob_t","","",N,N],[12,"gl_pathc","","",32,N],[12,"gl_offs","","",32,N],[12,"gl_pathv","","",32,N],[3,"sockaddr_storage","","",N,N],[12,"ss_len","","",33,N],[12,"ss_family","","",33,N],[3,"addrinfo","","",N,N],[12,"ai_flags","","",34,N],[12,"ai_family","","",34,N],[12,"ai_socktype","","",34,N],[12,"ai_protocol","","",34,N],[12,"ai_addrlen","","",34,N],[12,"ai_canonname","","",34,N],[12,"ai_addr","","",34,N],[12,"ai_next","","",34,N],[3,"mach_timebase_info","","",N,N],[12,"numer","","",35,N],[12,"denom","","",35,N],[3,"stat","","",N,N],[12,"st_dev","","",36,N],[12,"st_mode","","",36,N],[12,"st_nlink","","",36,N],[12,"st_ino","","",36,N],[12,"st_uid","","",36,N],[12,"st_gid","","",36,N],[12,"st_rdev","","",36,N],[12,"st_atime","","",36,N],[12,"st_atime_nsec","","",36,N],[12,"st_mtime","","",36,N],[12,"st_mtime_nsec","","",36,N],[12,"st_ctime","","",36,N],[12,"st_ctime_nsec","","",36,N],[12,"st_birthtime","","",36,N],[12,"st_birthtime_nsec","","",36,N],[12,"st_size","","",36,N],[12,"st_blocks","","",36,N],[12,"st_blksize","","",36,N],[12,"st_flags","","",36,N],[12,"st_gen","","",36,N],[12,"st_lspare","","",36,N],[12,"st_qspare","","",36,N],[3,"dirent","","",N,N],[12,"d_ino","","",37,N],[12,"d_seekoff","","",37,N],[12,"d_reclen","","",37,N],[12,"d_namlen","","",37,N],[12,"d_type","","",37,N],[12,"d_name","","",37,N],[3,"pthread_mutex_t","","",N,N],[3,"pthread_mutexattr_t","","",N,N],[3,"pthread_cond_t","","",N,N],[3,"pthread_condattr_t","","",N,N],[3,"pthread_rwlock_t","","",N,N],[3,"pthread_rwlockattr_t","","",N,N],[3,"siginfo_t","","",N,N],[12,"si_signo","","",38,N],[12,"si_errno","","",38,N],[12,"si_code","","",38,N],[12,"si_pid","","",38,N],[12,"si_uid","","",38,N],[12,"si_status","","",38,N],[12,"si_addr","","",38,N],[3,"sigaction","","",N,N],[12,"sa_sigaction","","",39,N],[12,"sa_mask","","",39,N],[12,"sa_flags","","",39,N],[3,"stack_t","","",N,N],[12,"ss_sp","","",40,N],[12,"ss_size","","",40,N],[12,"ss_flags","","",40,N],[3,"fstore_t","","",N,N],[12,"fst_flags","","",41,N],[12,"fst_posmode","","",41,N],[12,"fst_offset","","",41,N],[12,"fst_length","","",41,N],[12,"fst_bytesalloc","","",41,N],[3,"radvisory","","",N,N],[12,"ra_offset","","",42,N],[12,"ra_count","","",42,N],[3,"statvfs","","",N,N],[12,"f_bsize","","",43,N],[12,"f_frsize","","",43,N],[12,"f_blocks","","",43,N],[12,"f_bfree","","",43,N],[12,"f_bavail","","",43,N],[12,"f_files","","",43,N],[12,"f_ffree","","",43,N],[12,"f_favail","","",43,N],[12,"f_fsid","","",43,N],[12,"f_flag","","",43,N],[12,"f_namemax","","",43,N],[3,"Dl_info","","",N,N],[12,"dli_fname","","",44,N],[12,"dli_fbase","","",44,N],[12,"dli_sname","","",44,N],[12,"dli_saddr","","",44,N],[3,"sockaddr_in","","",N,N],[12,"sin_len","","",45,N],[12,"sin_family","","",45,N],[12,"sin_port","","",45,N],[12,"sin_addr","","",45,N],[12,"sin_zero","","",45,N],[3,"statfs","","",N,N],[12,"f_bsize","","",46,N],[12,"f_iosize","","",46,N],[12,"f_blocks","","",46,N],[12,"f_bfree","","",46,N],[12,"f_bavail","","",46,N],[12,"f_files","","",46,N],[12,"f_ffree","","",46,N],[12,"f_fsid","","",46,N],[12,"f_owner","","",46,N],[12,"f_type","","",46,N],[12,"f_flags","","",46,N],[12,"f_fssubtype","","",46,N],[12,"f_fstypename","","",46,N],[12,"f_mntonname","","",46,N],[12,"f_mntfromname","","",46,N],[12,"f_reserved","","",46,N],[3,"kevent","","",N,N],[12,"ident","","",47,N],[12,"filter","","",47,N],[12,"flags","","",47,N],[12,"fflags","","",47,N],[12,"data","","",47,N],[12,"udata","","",47,N],[3,"kevent64_s","","",N,N],[12,"ident","","",48,N],[12,"filter","","",48,N],[12,"flags","","",48,N],[12,"fflags","","",48,N],[12,"data","","",48,N],[12,"udata","","",48,N],[12,"ext","","",48,N],[3,"dqblk","","",N,N],[12,"dqb_bhardlimit","","",49,N],[12,"dqb_bsoftlimit","","",49,N],[12,"dqb_curbytes","","",49,N],[12,"dqb_ihardlimit","","",49,N],[12,"dqb_isoftlimit","","",49,N],[12,"dqb_curinodes","","",49,N],[12,"dqb_btime","","",49,N],[12,"dqb_itime","","",49,N],[12,"dqb_id","","",49,N],[12,"dqb_spare","","",49,N],[3,"if_msghdr","","",N,N],[12,"ifm_msglen","","",50,N],[12,"ifm_version","","",50,N],[12,"ifm_type","","",50,N],[12,"ifm_addrs","","",50,N],[12,"ifm_flags","","",50,N],[12,"ifm_index","","",50,N],[12,"ifm_data","","",50,N],[3,"termios","","",N,N],[12,"c_iflag","","",51,N],[12,"c_oflag","","",51,N],[12,"c_cflag","","",51,N],[12,"c_lflag","","",51,N],[12,"c_cc","","",51,N],[12,"c_ispeed","","",51,N],[12,"c_ospeed","","",51,N],[3,"flock","","",N,N],[12,"l_start","","",52,N],[12,"l_len","","",52,N],[12,"l_pid","","",52,N],[12,"l_type","","",52,N],[12,"l_whence","","",52,N],[3,"sf_hdtr","","",N,N],[12,"headers","","",53,N],[12,"hdr_cnt","","",53,N],[12,"trailers","","",53,N],[12,"trl_cnt","","",53,N],[3,"lconv","","",N,N],[12,"decimal_point","","",54,N],[12,"thousands_sep","","",54,N],[12,"grouping","","",54,N],[12,"int_curr_symbol","","",54,N],[12,"currency_symbol","","",54,N],[12,"mon_decimal_point","","",54,N],[12,"mon_thousands_sep","","",54,N],[12,"mon_grouping","","",54,N],[12,"positive_sign","","",54,N],[12,"negative_sign","","",54,N],[12,"int_frac_digits","","",54,N],[12,"frac_digits","","",54,N],[12,"p_cs_precedes","","",54,N],[12,"p_sep_by_space","","",54,N],[12,"n_cs_precedes","","",54,N],[12,"n_sep_by_space","","",54,N],[12,"p_sign_posn","","",54,N],[12,"n_sign_posn","","",54,N],[12,"int_p_cs_precedes","","",54,N],[12,"int_n_cs_precedes","","",54,N],[12,"int_p_sep_by_space","","",54,N],[12,"int_n_sep_by_space","","",54,N],[12,"int_p_sign_posn","","",54,N],[12,"int_n_sign_posn","","",54,N],[3,"sigevent","","",N,N],[12,"sigev_notify","","",55,N],[12,"sigev_signo","","",55,N],[12,"sigev_value","","",55,N],[12,"sigev_notify_attributes","","",55,N],[3,"proc_taskinfo","","",N,N],[12,"pti_virtual_size","","",56,N],[12,"pti_resident_size","","",56,N],[12,"pti_total_user","","",56,N],[12,"pti_total_system","","",56,N],[12,"pti_threads_user","","",56,N],[12,"pti_threads_system","","",56,N],[12,"pti_policy","","",56,N],[12,"pti_faults","","",56,N],[12,"pti_pageins","","",56,N],[12,"pti_cow_faults","","",56,N],[12,"pti_messages_sent","","",56,N],[12,"pti_messages_received","","",56,N],[12,"pti_syscalls_mach","","",56,N],[12,"pti_syscalls_unix","","",56,N],[12,"pti_csw","","",56,N],[12,"pti_threadnum","","",56,N],[12,"pti_numrunning","","",56,N],[12,"pti_priority","","",56,N],[3,"proc_bsdinfo","","",N,N],[12,"pbi_flags","","",57,N],[12,"pbi_status","","",57,N],[12,"pbi_xstatus","","",57,N],[12,"pbi_pid","","",57,N],[12,"pbi_ppid","","",57,N],[12,"pbi_uid","","",57,N],[12,"pbi_gid","","",57,N],[12,"pbi_ruid","","",57,N],[12,"pbi_rgid","","",57,N],[12,"pbi_svuid","","",57,N],[12,"pbi_svgid","","",57,N],[12,"rfu_1","","",57,N],[12,"pbi_comm","","",57,N],[12,"pbi_name","","",57,N],[12,"pbi_nfiles","","",57,N],[12,"pbi_pgid","","",57,N],[12,"pbi_pjobc","","",57,N],[12,"e_tdev","","",57,N],[12,"e_tpgid","","",57,N],[12,"pbi_nice","","",57,N],[12,"pbi_start_tvsec","","",57,N],[12,"pbi_start_tvusec","","",57,N],[3,"proc_taskallinfo","","",N,N],[12,"pbsd","","",58,N],[12,"ptinfo","","",58,N],[3,"proc_threadinfo","","",N,N],[12,"pth_user_time","","",59,N],[12,"pth_system_time","","",59,N],[12,"pth_cpu_usage","","",59,N],[12,"pth_policy","","",59,N],[12,"pth_run_state","","",59,N],[12,"pth_flags","","",59,N],[12,"pth_sleep_time","","",59,N],[12,"pth_curpri","","",59,N],[12,"pth_priority","","",59,N],[12,"pth_maxpriority","","",59,N],[12,"pth_name","","",59,N],[3,"xsw_usage","","",N,N],[12,"xsu_total","","",60,N],[12,"xsu_avail","","",60,N],[12,"xsu_used","","",60,N],[12,"xsu_pagesize","","",60,N],[12,"xsu_encrypted","","",60,N],[3,"xucred","","",N,N],[12,"cr_version","","",61,N],[12,"cr_uid","","",61,N],[12,"cr_ngroups","","",61,N],[12,"cr_groups","","",61,N],[3,"mach_header","","",N,N],[12,"magic","","",62,N],[12,"cputype","","",62,N],[12,"cpusubtype","","",62,N],[12,"filetype","","",62,N],[12,"ncmds","","",62,N],[12,"sizeofcmds","","",62,N],[12,"flags","","",62,N],[3,"mach_header_64","","",N,N],[12,"magic","","",63,N],[12,"cputype","","",63,N],[12,"cpusubtype","","",63,N],[12,"filetype","","",63,N],[12,"ncmds","","",63,N],[12,"sizeofcmds","","",63,N],[12,"flags","","",63,N],[12,"reserved","","",63,N],[3,"segment_command","","",N,N],[12,"cmd","","",64,N],[12,"cmdsize","","",64,N],[12,"segname","","",64,N],[12,"vmaddr","","",64,N],[12,"vmsize","","",64,N],[12,"fileoff","","",64,N],[12,"filesize","","",64,N],[12,"maxprot","","",64,N],[12,"initprot","","",64,N],[12,"nsects","","",64,N],[12,"flags","","",64,N],[3,"segment_command_64","","",N,N],[12,"cmd","","",65,N],[12,"cmdsize","","",65,N],[12,"segname","","",65,N],[12,"vmaddr","","",65,N],[12,"vmsize","","",65,N],[12,"fileoff","","",65,N],[12,"filesize","","",65,N],[12,"maxprot","","",65,N],[12,"initprot","","",65,N],[12,"nsects","","",65,N],[12,"flags","","",65,N],[3,"load_command","","",N,N],[12,"cmd","","",66,N],[12,"cmdsize","","",66,N],[3,"sockaddr_dl","","",N,N],[12,"sdl_len","","",67,N],[12,"sdl_family","","",67,N],[12,"sdl_index","","",67,N],[12,"sdl_type","","",67,N],[12,"sdl_nlen","","",67,N],[12,"sdl_alen","","",67,N],[12,"sdl_slen","","",67,N],[12,"sdl_data","","",67,N],[3,"sockaddr_inarp","","",N,N],[12,"sin_len","","",68,N],[12,"sin_family","","",68,N],[12,"sin_port","","",68,N],[12,"sin_addr","","",68,N],[12,"sin_srcaddr","","",68,N],[12,"sin_tos","","",68,N],[12,"sin_other","","",68,N],[3,"sockaddr_ctl","","",N,N],[12,"sc_len","","",69,N],[12,"sc_family","","",69,N],[12,"ss_sysaddr","","",69,N],[12,"sc_id","","",69,N],[12,"sc_unit","","",69,N],[12,"sc_reserved","","",69,N],[3,"in_pktinfo","","",N,N],[12,"ipi_ifindex","","",70,N],[12,"ipi_spec_dst","","",70,N],[12,"ipi_addr","","",70,N],[3,"in6_pktinfo","","",N,N],[12,"ipi6_addr","","",71,N],[12,"ipi6_ifindex","","",71,N],[3,"ipc_perm","","",N,N],[12,"uid","","",72,N],[12,"gid","","",72,N],[12,"cuid","","",72,N],[12,"cgid","","",72,N],[12,"mode","","",72,N],[12,"_seq","","",72,N],[12,"_key","","",72,N],[3,"shmid_ds","","",N,N],[12,"shm_perm","","",73,N],[12,"shm_segsz","","",73,N],[12,"shm_lpid","","",73,N],[12,"shm_cpid","","",73,N],[12,"shm_nattch","","",73,N],[12,"shm_atime","","",73,N],[12,"shm_dtime","","",73,N],[12,"shm_ctime","","",73,N],[12,"shm_internal","","",73,N],[3,"pthread_attr_t","","",N,N],[3,"timeval32","","",N,N],[12,"tv_sec","","",74,N],[12,"tv_usec","","",74,N],[3,"if_data","","",N,N],[12,"ifi_type","","",75,N],[12,"ifi_typelen","","",75,N],[12,"ifi_physical","","",75,N],[12,"ifi_addrlen","","",75,N],[12,"ifi_hdrlen","","",75,N],[12,"ifi_recvquota","","",75,N],[12,"ifi_xmitquota","","",75,N],[12,"ifi_unused1","","",75,N],[12,"ifi_mtu","","",75,N],[12,"ifi_metric","","",75,N],[12,"ifi_baudrate","","",75,N],[12,"ifi_ipackets","","",75,N],[12,"ifi_ierrors","","",75,N],[12,"ifi_opackets","","",75,N],[12,"ifi_oerrors","","",75,N],[12,"ifi_collisions","","",75,N],[12,"ifi_ibytes","","",75,N],[12,"ifi_obytes","","",75,N],[12,"ifi_imcasts","","",75,N],[12,"ifi_omcasts","","",75,N],[12,"ifi_iqdrops","","",75,N],[12,"ifi_noproto","","",75,N],[12,"ifi_recvtiming","","",75,N],[12,"ifi_xmittiming","","",75,N],[12,"ifi_lastchange","","",75,N],[12,"ifi_unused2","","",75,N],[12,"ifi_hwassist","","",75,N],[12,"ifi_reserved1","","",75,N],[12,"ifi_reserved2","","",75,N],[3,"bpf_hdr","","",N,N],[12,"bh_tstamp","","",76,N],[12,"bh_caplen","","",76,N],[12,"bh_datalen","","",76,N],[12,"bh_hdrlen","","",76,N],[4,"c_void","","",N,N],[4,"FILE","","",N,N],[4,"fpos_t","","",N,N],[4,"DIR","","",N,N],[4,"locale_t","","",N,N],[4,"timezone","","",N,N],[5,"FD_CLR","","",N,N],[5,"FD_ISSET","","",N,N],[5,"FD_SET","","",N,N],[5,"FD_ZERO","","",N,N],[5,"WTERMSIG","","",N,[[["c_int"]],["c_int"]]],[5,"WIFEXITED","","",N,[[["c_int"]],["bool"]]],[5,"WEXITSTATUS","","",N,[[["c_int"]],["c_int"]]],[5,"WCOREDUMP","","",N,[[["c_int"]],["bool"]]],[5,"QCMD","","",N,[[["c_int"],["c_int"]],["c_int"]]],[5,"WSTOPSIG","","",N,[[["c_int"]],["c_int"]]],[5,"_WSTATUS","","",N,[[["c_int"]],["c_int"]]],[5,"WIFCONTINUED","","",N,[[["c_int"]],["bool"]]],[5,"WIFSIGNALED","","",N,[[["c_int"]],["bool"]]],[5,"WIFSTOPPED","","",N,[[["c_int"]],["bool"]]],[5,"isalnum","","",N,N],[5,"isalpha","","",N,N],[5,"iscntrl","","",N,N],[5,"isdigit","","",N,N],[5,"isgraph","","",N,N],[5,"islower","","",N,N],[5,"isprint","","",N,N],[5,"ispunct","","",N,N],[5,"isspace","","",N,N],[5,"isupper","","",N,N],[5,"isxdigit","","",N,N],[5,"tolower","","",N,N],[5,"toupper","","",N,N],[5,"fopen","","",N,N],[5,"freopen","","",N,N],[5,"fflush","","",N,N],[5,"fclose","","",N,N],[5,"remove","","",N,N],[5,"rename","","",N,N],[5,"tmpfile","","",N,N],[5,"setvbuf","","",N,N],[5,"setbuf","","",N,N],[5,"getchar","","",N,N],[5,"putchar","","",N,N],[5,"fgetc","","",N,N],[5,"fgets","","",N,N],[5,"fputc","","",N,N],[5,"fputs","","",N,N],[5,"puts","","",N,N],[5,"ungetc","","",N,N],[5,"fread","","",N,N],[5,"fwrite","","",N,N],[5,"fseek","","",N,N],[5,"ftell","","",N,N],[5,"rewind","","",N,N],[5,"fgetpos","","",N,N],[5,"fsetpos","","",N,N],[5,"feof","","",N,N],[5,"ferror","","",N,N],[5,"perror","","",N,N],[5,"atoi","","",N,N],[5,"strtod","","",N,N],[5,"strtol","","",N,N],[5,"strtoul","","",N,N],[5,"calloc","","",N,N],[5,"malloc","","",N,N],[5,"realloc","","",N,N],[5,"free","","",N,N],[5,"abort","","",N,N],[5,"exit","","",N,N],[5,"_exit","","",N,N],[5,"atexit","","",N,N],[5,"system","","",N,N],[5,"getenv","","",N,N],[5,"strcpy","","",N,N],[5,"strncpy","","",N,N],[5,"strcat","","",N,N],[5,"strncat","","",N,N],[5,"strcmp","","",N,N],[5,"strncmp","","",N,N],[5,"strcoll","","",N,N],[5,"strchr","","",N,N],[5,"strrchr","","",N,N],[5,"strspn","","",N,N],[5,"strcspn","","",N,N],[5,"strdup","","",N,N],[5,"strpbrk","","",N,N],[5,"strstr","","",N,N],[5,"strlen","","",N,N],[5,"strnlen","","",N,N],[5,"strerror","","",N,N],[5,"strtok","","",N,N],[5,"strxfrm","","",N,N],[5,"wcslen","","",N,N],[5,"wcstombs","","",N,N],[5,"memchr","","",N,N],[5,"memcmp","","",N,N],[5,"memcpy","","",N,N],[5,"memmove","","",N,N],[5,"memset","","",N,N],[5,"abs","","",N,N],[5,"atof","","",N,N],[5,"labs","","",N,N],[5,"rand","","",N,N],[5,"srand","","",N,N],[5,"getpwnam","","",N,N],[5,"getpwuid","","",N,N],[5,"fprintf","","",N,N],[5,"printf","","",N,N],[5,"snprintf","","",N,N],[5,"sprintf","","",N,N],[5,"fscanf","","",N,N],[5,"scanf","","",N,N],[5,"sscanf","","",N,N],[5,"getchar_unlocked","","",N,N],[5,"putchar_unlocked","","",N,N],[5,"socket","","",N,N],[5,"connect","","",N,N],[5,"listen","","",N,N],[5,"accept","","",N,N],[5,"getpeername","","",N,N],[5,"getsockname","","",N,N],[5,"setsockopt","","",N,N],[5,"socketpair","","",N,N],[5,"sendto","","",N,N],[5,"shutdown","","",N,N],[5,"chmod","","",N,N],[5,"fchmod","","",N,N],[5,"fstat","","",N,N],[5,"mkdir","","",N,N],[5,"stat","","",N,N],[5,"pclose","","",N,N],[5,"fdopen","","",N,N],[5,"fileno","","",N,N],[5,"open","","",N,N],[5,"creat","","",N,N],[5,"fcntl","","",N,N],[5,"opendir","","",N,N],[5,"readdir","","",N,N],[5,"readdir_r","","",N,N],[5,"closedir","","",N,N],[5,"rewinddir","","",N,N],[5,"openat","","",N,N],[5,"fchmodat","","",N,N],[5,"fchown","","",N,N],[5,"fchownat","","",N,N],[5,"fstatat","","",N,N],[5,"linkat","","",N,N],[5,"mkdirat","","",N,N],[5,"readlinkat","","",N,N],[5,"renameat","","",N,N],[5,"symlinkat","","",N,N],[5,"unlinkat","","",N,N],[5,"access","","",N,N],[5,"alarm","","",N,N],[5,"chdir","","",N,N],[5,"fchdir","","",N,N],[5,"chown","","",N,N],[5,"lchown","","",N,N],[5,"close","","",N,N],[5,"dup","","",N,N],[5,"dup2","","",N,N],[5,"execl","","",N,N],[5,"execle","","",N,N],[5,"execlp","","",N,N],[5,"execv","","",N,N],[5,"execve","","",N,N],[5,"execvp","","",N,N],[5,"fork","","",N,N],[5,"fpathconf","","",N,N],[5,"getcwd","","",N,N],[5,"getegid","","",N,N],[5,"geteuid","","",N,N],[5,"getgid","","",N,N],[5,"getgroups","","",N,N],[5,"getlogin","","",N,N],[5,"getopt","","",N,N],[5,"getpgid","","",N,N],[5,"getpgrp","","",N,N],[5,"getpid","","",N,N],[5,"getppid","","",N,N],[5,"getuid","","",N,N],[5,"isatty","","",N,N],[5,"link","","",N,N],[5,"lseek","","",N,N],[5,"pathconf","","",N,N],[5,"pause","","",N,N],[5,"pipe","","",N,N],[5,"posix_memalign","","",N,N],[5,"read","","",N,N],[5,"rmdir","","",N,N],[5,"seteuid","","",N,N],[5,"setgid","","",N,N],[5,"setpgid","","",N,N],[5,"setsid","","",N,N],[5,"setuid","","",N,N],[5,"sleep","","",N,N],[5,"nanosleep","","",N,N],[5,"tcgetpgrp","","",N,N],[5,"tcsetpgrp","","",N,N],[5,"ttyname","","",N,N],[5,"unlink","","",N,N],[5,"wait","","",N,N],[5,"waitpid","","",N,N],[5,"write","","",N,N],[5,"pread","","",N,N],[5,"pwrite","","",N,N],[5,"umask","","",N,N],[5,"utime","","",N,N],[5,"kill","","",N,N],[5,"killpg","","",N,N],[5,"mlock","","",N,N],[5,"munlock","","",N,N],[5,"mlockall","","",N,N],[5,"munlockall","","",N,N],[5,"mmap","","",N,N],[5,"munmap","","",N,N],[5,"if_nametoindex","","",N,N],[5,"if_indextoname","","",N,N],[5,"lstat","","",N,N],[5,"fsync","","",N,N],[5,"setenv","","",N,N],[5,"unsetenv","","",N,N],[5,"symlink","","",N,N],[5,"ftruncate","","",N,N],[5,"signal","","",N,N],[5,"getrlimit","","",N,N],[5,"setrlimit","","",N,N],[5,"getrusage","","",N,N],[5,"realpath","","",N,N],[5,"flock","","",N,N],[5,"gettimeofday","","",N,N],[5,"times","","",N,N],[5,"pthread_self","","",N,N],[5,"pthread_join","","",N,N],[5,"pthread_exit","","",N,N],[5,"pthread_attr_init","","",N,N],[5,"pthread_attr_destroy","","",N,N],[5,"pthread_attr_setstacksize","","",N,N],[5,"pthread_attr_setdetachstate","","",N,N],[5,"pthread_detach","","",N,N],[5,"sched_yield","","",N,N],[5,"pthread_key_create","","",N,N],[5,"pthread_key_delete","","",N,N],[5,"pthread_getspecific","","",N,N],[5,"pthread_setspecific","","",N,N],[5,"pthread_mutex_init","","",N,N],[5,"pthread_mutex_destroy","","",N,N],[5,"pthread_mutex_lock","","",N,N],[5,"pthread_mutex_trylock","","",N,N],[5,"pthread_mutex_unlock","","",N,N],[5,"pthread_mutexattr_init","","",N,N],[5,"pthread_mutexattr_destroy","","",N,N],[5,"pthread_mutexattr_settype","","",N,N],[5,"pthread_cond_init","","",N,N],[5,"pthread_cond_wait","","",N,N],[5,"pthread_cond_timedwait","","",N,N],[5,"pthread_cond_signal","","",N,N],[5,"pthread_cond_broadcast","","",N,N],[5,"pthread_cond_destroy","","",N,N],[5,"pthread_condattr_init","","",N,N],[5,"pthread_condattr_destroy","","",N,N],[5,"pthread_rwlock_init","","",N,N],[5,"pthread_rwlock_destroy","","",N,N],[5,"pthread_rwlock_rdlock","","",N,N],[5,"pthread_rwlock_tryrdlock","","",N,N],[5,"pthread_rwlock_wrlock","","",N,N],[5,"pthread_rwlock_trywrlock","","",N,N],[5,"pthread_rwlock_unlock","","",N,N],[5,"pthread_rwlockattr_init","","",N,N],[5,"pthread_rwlockattr_destroy","","",N,N],[5,"strerror_r","","",N,N],[5,"getsockopt","","",N,N],[5,"raise","","",N,N],[5,"sigaction","","",N,N],[5,"utimes","","",N,N],[5,"dlopen","","",N,N],[5,"dlerror","","",N,N],[5,"dlsym","","",N,N],[5,"dlclose","","",N,N],[5,"dladdr","","",N,N],[5,"getaddrinfo","","",N,N],[5,"freeaddrinfo","","",N,N],[5,"gai_strerror","","",N,N],[5,"res_init","","",N,N],[5,"gmtime_r","","",N,N],[5,"localtime_r","","",N,N],[5,"mktime","","",N,N],[5,"time","","",N,N],[5,"gmtime","","",N,N],[5,"localtime","","",N,N],[5,"difftime","","",N,N],[5,"mknod","","",N,N],[5,"uname","","",N,N],[5,"gethostname","","",N,N],[5,"getservbyname","","",N,N],[5,"getprotobyname","","",N,N],[5,"getprotobynumber","","",N,N],[5,"chroot","","",N,N],[5,"usleep","","",N,N],[5,"send","","",N,N],[5,"recv","","",N,N],[5,"putenv","","",N,N],[5,"poll","","",N,N],[5,"select","","",N,N],[5,"setlocale","","",N,N],[5,"localeconv","","",N,N],[5,"sem_destroy","","",N,N],[5,"sem_wait","","",N,N],[5,"sem_trywait","","",N,N],[5,"sem_post","","",N,N],[5,"sem_init","","",N,N],[5,"statvfs","","",N,N],[5,"fstatvfs","","",N,N],[5,"readlink","","",N,N],[5,"sigemptyset","","",N,N],[5,"sigaddset","","",N,N],[5,"sigfillset","","",N,N],[5,"sigdelset","","",N,N],[5,"sigismember","","",N,N],[5,"sigprocmask","","",N,N],[5,"sigpending","","",N,N],[5,"timegm","","",N,N],[5,"getsid","","",N,N],[5,"sysconf","","",N,N],[5,"mkfifo","","",N,N],[5,"pselect","","",N,N],[5,"fseeko","","",N,N],[5,"ftello","","",N,N],[5,"tcdrain","","",N,N],[5,"cfgetispeed","","",N,N],[5,"cfgetospeed","","",N,N],[5,"cfmakeraw","","",N,N],[5,"cfsetispeed","","",N,N],[5,"cfsetospeed","","",N,N],[5,"cfsetspeed","","",N,N],[5,"tcgetattr","","",N,N],[5,"tcsetattr","","",N,N],[5,"tcflow","","",N,N],[5,"tcflush","","",N,N],[5,"tcgetsid","","",N,N],[5,"tcsendbreak","","",N,N],[5,"mkstemp","","",N,N],[5,"mkdtemp","","",N,N],[5,"tmpnam","","",N,N],[5,"openlog","","",N,N],[5,"closelog","","",N,N],[5,"setlogmask","","",N,N],[5,"syslog","","",N,N],[5,"nice","","",N,N],[5,"grantpt","","",N,N],[5,"posix_openpt","","",N,N],[5,"ptsname","","",N,N],[5,"unlockpt","","",N,N],[5,"getifaddrs","","",N,N],[5,"freeifaddrs","","",N,N],[5,"setgroups","","",N,N],[5,"ioctl","","",N,N],[5,"kqueue","","",N,N],[5,"unmount","","",N,N],[5,"syscall","","",N,N],[5,"getpwent","","",N,N],[5,"setpwent","","",N,N],[5,"endpwent","","",N,N],[5,"setgrent","","",N,N],[5,"endgrent","","",N,N],[5,"getgrent","","",N,N],[5,"getprogname","","",N,N],[5,"setprogname","","",N,N],[5,"getloadavg","","",N,N],[5,"if_nameindex","","",N,N],[5,"if_freenameindex","","",N,N],[5,"getpeereid","","",N,N],[5,"glob","","",N,N],[5,"globfree","","",N,N],[5,"posix_madvise","","",N,N],[5,"shm_unlink","","",N,N],[5,"seekdir","","",N,N],[5,"telldir","","",N,N],[5,"madvise","","",N,N],[5,"msync","","",N,N],[5,"recvfrom","","",N,N],[5,"mkstemps","","",N,N],[5,"futimes","","",N,N],[5,"nl_langinfo","","",N,N],[5,"bind","","",N,N],[5,"writev","","",N,N],[5,"readv","","",N,N],[5,"sendmsg","","",N,N],[5,"recvmsg","","",N,N],[5,"sync","","",N,N],[5,"getgrgid_r","","",N,N],[5,"sigaltstack","","",N,N],[5,"sem_close","","",N,N],[5,"getdtablesize","","",N,N],[5,"getgrnam_r","","",N,N],[5,"pthread_sigmask","","",N,N],[5,"sem_open","","",N,N],[5,"getgrnam","","",N,N],[5,"pthread_cancel","","",N,N],[5,"pthread_kill","","",N,N],[5,"sem_unlink","","",N,N],[5,"daemon","","",N,N],[5,"getpwnam_r","","",N,N],[5,"getpwuid_r","","",N,N],[5,"sigwait","","",N,N],[5,"pthread_atfork","","",N,N],[5,"getgrgid","","",N,N],[5,"popen","","",N,N],[5,"faccessat","","",N,N],[5,"pthread_create","","",N,N],[5,"aio_read","","",N,N],[5,"aio_write","","",N,N],[5,"aio_fsync","","",N,N],[5,"aio_error","","",N,N],[5,"aio_return","","",N,N],[5,"aio_suspend","","",N,N],[5,"aio_cancel","","",N,N],[5,"clock_getres","","",N,N],[5,"clock_gettime","","",N,N],[5,"lio_listio","","",N,N],[5,"dirfd","","",N,N],[5,"lutimes","","",N,N],[5,"getutxent","","",N,N],[5,"getutxid","","",N,N],[5,"getutxline","","",N,N],[5,"pututxline","","",N,N],[5,"setutxent","","",N,N],[5,"endutxent","","",N,N],[5,"utmpxname","","",N,N],[5,"getnameinfo","","",N,N],[5,"mincore","","",N,N],[5,"sysctlnametomib","","",N,N],[5,"mprotect","","",N,N],[5,"shm_open","","",N,N],[5,"shmat","","",N,N],[5,"shmdt","","",N,N],[5,"shmctl","","",N,N],[5,"shmget","","",N,N],[5,"sysctl","","",N,N],[5,"sysctlbyname","","",N,N],[5,"mach_absolute_time","","",N,N],[5,"mach_timebase_info","","",N,N],[5,"pthread_setname_np","","",N,N],[5,"pthread_get_stackaddr_np","","",N,N],[5,"pthread_get_stacksize_np","","",N,N],[5,"pthread_condattr_setpshared","","",N,N],[5,"pthread_condattr_getpshared","","",N,N],[5,"pthread_mutexattr_setpshared","","",N,N],[5,"pthread_mutexattr_getpshared","","",N,N],[5,"pthread_rwlockattr_getpshared","","",N,N],[5,"pthread_rwlockattr_setpshared","","",N,N],[5,"__error","","",N,N],[5,"backtrace","","",N,N],[5,"statfs","","",N,N],[5,"fstatfs","","",N,N],[5,"kevent","","",N,N],[5,"kevent64","","",N,N],[5,"mount","","",N,N],[5,"ptrace","","",N,N],[5,"quotactl","","",N,N],[5,"sethostname","","",N,N],[5,"sendfile","","",N,N],[5,"openpty","","",N,N],[5,"forkpty","","",N,N],[5,"duplocale","","",N,N],[5,"freelocale","","",N,N],[5,"localeconv_l","","",N,N],[5,"newlocale","","",N,N],[5,"uselocale","","",N,N],[5,"querylocale","","",N,N],[5,"getpriority","","",N,N],[5,"setpriority","","",N,N],[5,"getdomainname","","",N,N],[5,"setdomainname","","",N,N],[5,"getxattr","","",N,N],[5,"fgetxattr","","",N,N],[5,"setxattr","","",N,N],[5,"fsetxattr","","",N,N],[5,"listxattr","","",N,N],[5,"flistxattr","","",N,N],[5,"removexattr","","",N,N],[5,"fremovexattr","","",N,N],[5,"getgrouplist","","",N,N],[5,"initgroups","","",N,N],[5,"waitid","","",N,N],[5,"brk","","",N,N],[5,"sbrk","","",N,N],[5,"settimeofday","","",N,N],[5,"_dyld_image_count","","",N,N],[5,"_dyld_get_image_header","","",N,N],[5,"_dyld_get_image_vmaddr_slide","","",N,N],[5,"_dyld_get_image_name","","",N,N],[5,"posix_spawn","","",N,N],[5,"posix_spawnp","","",N,N],[5,"posix_spawnattr_init","","",N,N],[5,"posix_spawnattr_destroy","","",N,N],[5,"posix_spawnattr_getsigdefault","","",N,N],[5,"posix_spawnattr_setsigdefault","","",N,N],[5,"posix_spawnattr_getsigmask","","",N,N],[5,"posix_spawnattr_setsigmask","","",N,N],[5,"posix_spawnattr_getflags","","",N,N],[5,"posix_spawnattr_setflags","","",N,N],[5,"posix_spawnattr_getpgroup","","",N,N],[5,"posix_spawnattr_setpgroup","","",N,N],[5,"posix_spawn_file_actions_init","","",N,N],[5,"posix_spawn_file_actions_destroy","","",N,N],[5,"posix_spawn_file_actions_addopen","","",N,N],[5,"posix_spawn_file_actions_addclose","","",N,N],[5,"posix_spawn_file_actions_adddup2","","",N,N],[11,"clone","","",77,[[["self"]],["pthread_attr_t"]]],[11,"clone","","",74,[[["self"]],["timeval32"]]],[11,"clone","","",75,[[["self"]],["if_data"]]],[11,"clone","","",76,[[["self"]],["bpf_hdr"]]],[11,"clone","","",30,[[["self"]],["aiocb"]]],[11,"clone","","",31,[[["self"]],["utmpx"]]],[11,"clone","","",32,[[["self"]],["glob_t"]]],[11,"clone","","",33,[[["self"]],["sockaddr_storage"]]],[11,"clone","","",34,[[["self"]],["addrinfo"]]],[11,"clone","","",35,[[["self"]],["mach_timebase_info"]]],[11,"clone","","",36,[[["self"]],["stat"]]],[11,"clone","","",37,[[["self"]],["dirent"]]],[11,"clone","","",78,[[["self"]],["pthread_mutex_t"]]],[11,"clone","","",79,[[["self"]],["pthread_mutexattr_t"]]],[11,"clone","","",80,[[["self"]],["pthread_cond_t"]]],[11,"clone","","",81,[[["self"]],["pthread_condattr_t"]]],[11,"clone","","",82,[[["self"]],["pthread_rwlock_t"]]],[11,"clone","","",83,[[["self"]],["pthread_rwlockattr_t"]]],[11,"clone","","",38,[[["self"]],["siginfo_t"]]],[11,"clone","","",39,[[["self"]],["sigaction"]]],[11,"clone","","",40,[[["self"]],["stack_t"]]],[11,"clone","","",41,[[["self"]],["fstore_t"]]],[11,"clone","","",42,[[["self"]],["radvisory"]]],[11,"clone","","",43,[[["self"]],["statvfs"]]],[11,"clone","","",44,[[["self"]],["dl_info"]]],[11,"clone","","",45,[[["self"]],["sockaddr_in"]]],[11,"clone","","",46,[[["self"]],["statfs"]]],[11,"clone","","",47,[[["self"]],["kevent"]]],[11,"clone","","",48,[[["self"]],["kevent64_s"]]],[11,"clone","","",49,[[["self"]],["dqblk"]]],[11,"clone","","",50,[[["self"]],["if_msghdr"]]],[11,"clone","","",51,[[["self"]],["termios"]]],[11,"clone","","",52,[[["self"]],["flock"]]],[11,"clone","","",53,[[["self"]],["sf_hdtr"]]],[11,"clone","","",54,[[["self"]],["lconv"]]],[11,"clone","","",55,[[["self"]],["sigevent"]]],[11,"clone","","",56,[[["self"]],["proc_taskinfo"]]],[11,"clone","","",57,[[["self"]],["proc_bsdinfo"]]],[11,"clone","","",58,[[["self"]],["proc_taskallinfo"]]],[11,"clone","","",59,[[["self"]],["proc_threadinfo"]]],[11,"clone","","",60,[[["self"]],["xsw_usage"]]],[11,"clone","","",61,[[["self"]],["xucred"]]],[11,"clone","","",62,[[["self"]],["mach_header"]]],[11,"clone","","",63,[[["self"]],["mach_header_64"]]],[11,"clone","","",64,[[["self"]],["segment_command"]]],[11,"clone","","",65,[[["self"]],["segment_command_64"]]],[11,"clone","","",66,[[["self"]],["load_command"]]],[11,"clone","","",67,[[["self"]],["sockaddr_dl"]]],[11,"clone","","",68,[[["self"]],["sockaddr_inarp"]]],[11,"clone","","",69,[[["self"]],["sockaddr_ctl"]]],[11,"clone","","",70,[[["self"]],["in_pktinfo"]]],[11,"clone","","",71,[[["self"]],["in6_pktinfo"]]],[11,"clone","","",72,[[["self"]],["ipc_perm"]]],[11,"clone","","",73,[[["self"]],["shmid_ds"]]],[11,"clone","","",20,[[["self"]],["sockaddr"]]],[11,"clone","","",21,[[["self"]],["sockaddr_in6"]]],[11,"clone","","",22,[[["self"]],["sockaddr_un"]]],[11,"clone","","",23,[[["self"]],["passwd"]]],[11,"clone","","",24,[[["self"]],["ifaddrs"]]],[11,"clone","","",84,[[["self"]],["fd_set"]]],[11,"clone","","",25,[[["self"]],["tm"]]],[11,"clone","","",26,[[["self"]],["utsname"]]],[11,"clone","","",27,[[["self"]],["msghdr"]]],[11,"clone","","",28,[[["self"]],["cmsghdr"]]],[11,"clone","","",85,[[["self"]],["fsid_t"]]],[11,"clone","","",29,[[["self"]],["if_nameindex"]]],[11,"clone","","",0,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["utimbuf"]]],[11,"clone","","",2,[[["self"]],["timeval"]]],[11,"clone","","",3,[[["self"]],["timespec"]]],[11,"clone","","",4,[[["self"]],["rlimit"]]],[11,"clone","","",5,[[["self"]],["rusage"]]],[11,"clone","","",6,[[["self"]],["in_addr"]]],[11,"clone","","",7,[[["self"]],["in6_addr"]]],[11,"clone","","",8,[[["self"]],["ip_mreq"]]],[11,"clone","","",9,[[["self"]],["ipv6_mreq"]]],[11,"clone","","",10,[[["self"]],["hostent"]]],[11,"clone","","",11,[[["self"]],["iovec"]]],[11,"clone","","",12,[[["self"]],["pollfd"]]],[11,"clone","","",13,[[["self"]],["winsize"]]],[11,"clone","","",14,[[["self"]],["linger"]]],[11,"clone","","",15,[[["self"]],["sigval"]]],[11,"clone","","",16,[[["self"]],["itimerval"]]],[11,"clone","","",17,[[["self"]],["tms"]]],[11,"clone","","",18,[[["self"]],["servent"]]],[11,"clone","","",19,[[["self"]],["protoent"]]],[6,"int8_t","","",N,N],[6,"int16_t","","",N,N],[6,"int32_t","","",N,N],[6,"int64_t","","",N,N],[6,"uint8_t","","",N,N],[6,"uint16_t","","",N,N],[6,"uint32_t","","",N,N],[6,"uint64_t","","",N,N],[6,"c_schar","","",N,N],[6,"c_uchar","","",N,N],[6,"c_short","","",N,N],[6,"c_ushort","","",N,N],[6,"c_int","","",N,N],[6,"c_uint","","",N,N],[6,"c_float","","",N,N],[6,"c_double","","",N,N],[6,"c_longlong","","",N,N],[6,"c_ulonglong","","",N,N],[6,"intmax_t","","",N,N],[6,"uintmax_t","","",N,N],[6,"size_t","","",N,N],[6,"ptrdiff_t","","",N,N],[6,"intptr_t","","",N,N],[6,"uintptr_t","","",N,N],[6,"ssize_t","","",N,N],[6,"pid_t","","",N,N],[6,"uid_t","","",N,N],[6,"gid_t","","",N,N],[6,"in_addr_t","","",N,N],[6,"in_port_t","","",N,N],[6,"sighandler_t","","",N,N],[6,"cc_t","","",N,N],[6,"wchar_t","","",N,N],[6,"off_t","","",N,N],[6,"useconds_t","","",N,N],[6,"blkcnt_t","","",N,N],[6,"socklen_t","","",N,N],[6,"sa_family_t","","",N,N],[6,"pthread_t","","",N,N],[6,"nfds_t","","",N,N],[6,"c_char","","",N,N],[6,"clock_t","","",N,N],[6,"time_t","","",N,N],[6,"suseconds_t","","",N,N],[6,"dev_t","","",N,N],[6,"ino_t","","",N,N],[6,"mode_t","","",N,N],[6,"nlink_t","","",N,N],[6,"blksize_t","","",N,N],[6,"rlim_t","","",N,N],[6,"mach_timebase_info_data_t","","",N,N],[6,"pthread_key_t","","",N,N],[6,"sigset_t","","",N,N],[6,"clockid_t","","",N,N],[6,"fsblkcnt_t","","",N,N],[6,"fsfilcnt_t","","",N,N],[6,"speed_t","","",N,N],[6,"tcflag_t","","",N,N],[6,"nl_item","","",N,N],[6,"id_t","","",N,N],[6,"sem_t","","",N,N],[6,"idtype_t","","",N,N],[6,"integer_t","","",N,N],[6,"cpu_type_t","","",N,N],[6,"cpu_subtype_t","","",N,N],[6,"vm_prot_t","","",N,N],[6,"posix_spawnattr_t","","",N,N],[6,"posix_spawn_file_actions_t","","",N,N],[6,"key_t","","",N,N],[6,"shmatt_t","","",N,N],[6,"c_long","","",N,N],[6,"c_ulong","","",N,N],[6,"boolean_t","","",N,N],[17,"INT_MIN","","",N,N],[17,"INT_MAX","","",N,N],[17,"SIG_DFL","","",N,N],[17,"SIG_IGN","","",N,N],[17,"SIG_ERR","","",N,N],[17,"DT_UNKNOWN","","",N,N],[17,"DT_FIFO","","",N,N],[17,"DT_CHR","","",N,N],[17,"DT_DIR","","",N,N],[17,"DT_BLK","","",N,N],[17,"DT_REG","","",N,N],[17,"DT_LNK","","",N,N],[17,"DT_SOCK","","",N,N],[17,"FD_CLOEXEC","","",N,N],[17,"USRQUOTA","","",N,N],[17,"GRPQUOTA","","",N,N],[17,"SIGIOT","","",N,N],[17,"S_ISUID","","",N,N],[17,"S_ISGID","","",N,N],[17,"S_ISVTX","","",N,N],[17,"IF_NAMESIZE","","",N,N],[17,"IFNAMSIZ","","",N,N],[17,"LOG_EMERG","","",N,N],[17,"LOG_ALERT","","",N,N],[17,"LOG_CRIT","","",N,N],[17,"LOG_ERR","","",N,N],[17,"LOG_WARNING","","",N,N],[17,"LOG_NOTICE","","",N,N],[17,"LOG_INFO","","",N,N],[17,"LOG_DEBUG","","",N,N],[17,"LOG_KERN","","",N,N],[17,"LOG_USER","","",N,N],[17,"LOG_MAIL","","",N,N],[17,"LOG_DAEMON","","",N,N],[17,"LOG_AUTH","","",N,N],[17,"LOG_SYSLOG","","",N,N],[17,"LOG_LPR","","",N,N],[17,"LOG_NEWS","","",N,N],[17,"LOG_UUCP","","",N,N],[17,"LOG_LOCAL0","","",N,N],[17,"LOG_LOCAL1","","",N,N],[17,"LOG_LOCAL2","","",N,N],[17,"LOG_LOCAL3","","",N,N],[17,"LOG_LOCAL4","","",N,N],[17,"LOG_LOCAL5","","",N,N],[17,"LOG_LOCAL6","","",N,N],[17,"LOG_LOCAL7","","",N,N],[17,"LOG_PID","","",N,N],[17,"LOG_CONS","","",N,N],[17,"LOG_ODELAY","","",N,N],[17,"LOG_NDELAY","","",N,N],[17,"LOG_NOWAIT","","",N,N],[17,"LOG_PRIMASK","","",N,N],[17,"LOG_FACMASK","","",N,N],[17,"PRIO_PROCESS","","",N,N],[17,"PRIO_PGRP","","",N,N],[17,"PRIO_USER","","",N,N],[17,"PRIO_MIN","","",N,N],[17,"PRIO_MAX","","",N,N],[17,"IPPROTO_ICMP","","",N,N],[17,"IPPROTO_ICMPV6","","",N,N],[17,"IPPROTO_TCP","","",N,N],[17,"IPPROTO_UDP","","",N,N],[17,"IPPROTO_IP","","",N,N],[17,"IPPROTO_IPV6","","",N,N],[17,"INADDR_LOOPBACK","","",N,N],[17,"INADDR_ANY","","",N,N],[17,"INADDR_BROADCAST","","",N,N],[17,"INADDR_NONE","","",N,N],[17,"LC_ALL","","",N,N],[17,"LC_COLLATE","","",N,N],[17,"LC_CTYPE","","",N,N],[17,"LC_MONETARY","","",N,N],[17,"LC_NUMERIC","","",N,N],[17,"LC_TIME","","",N,N],[17,"LC_MESSAGES","","",N,N],[17,"FIOCLEX","","",N,N],[17,"FIONBIO","","",N,N],[17,"PATH_MAX","","",N,N],[17,"SA_ONSTACK","","",N,N],[17,"SA_SIGINFO","","",N,N],[17,"SA_RESTART","","",N,N],[17,"SA_RESETHAND","","",N,N],[17,"SA_NOCLDSTOP","","",N,N],[17,"SA_NODEFER","","",N,N],[17,"SA_NOCLDWAIT","","",N,N],[17,"SS_ONSTACK","","",N,N],[17,"SS_DISABLE","","",N,N],[17,"SIGCHLD","","",N,N],[17,"SIGBUS","","",N,N],[17,"SIGUSR1","","",N,N],[17,"SIGUSR2","","",N,N],[17,"SIGCONT","","",N,N],[17,"SIGSTOP","","",N,N],[17,"SIGTSTP","","",N,N],[17,"SIGURG","","",N,N],[17,"SIGIO","","",N,N],[17,"SIGSYS","","",N,N],[17,"SIGTTIN","","",N,N],[17,"SIGTTOU","","",N,N],[17,"SIGXCPU","","",N,N],[17,"SIGXFSZ","","",N,N],[17,"SIGVTALRM","","",N,N],[17,"SIGPROF","","",N,N],[17,"SIGWINCH","","",N,N],[17,"SIGINFO","","",N,N],[17,"SIG_SETMASK","","",N,N],[17,"SIG_BLOCK","","",N,N],[17,"SIG_UNBLOCK","","",N,N],[17,"IP_MULTICAST_IF","","",N,N],[17,"IP_MULTICAST_TTL","","",N,N],[17,"IP_MULTICAST_LOOP","","",N,N],[17,"IPV6_UNICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_IF","","",N,N],[17,"IPV6_MULTICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_LOOP","","",N,N],[17,"IPV6_V6ONLY","","",N,N],[17,"ST_RDONLY","","",N,N],[17,"SCM_RIGHTS","","",N,N],[17,"NCCS","","",N,N],[17,"O_ACCMODE","","",N,N],[17,"O_RDONLY","","",N,N],[17,"O_WRONLY","","",N,N],[17,"O_RDWR","","",N,N],[17,"O_APPEND","","",N,N],[17,"O_CREAT","","",N,N],[17,"O_TRUNC","","",N,N],[17,"O_EXCL","","",N,N],[17,"O_ASYNC","","",N,N],[17,"O_SYNC","","",N,N],[17,"O_NONBLOCK","","",N,N],[17,"O_NOFOLLOW","","",N,N],[17,"O_SHLOCK","","",N,N],[17,"O_EXLOCK","","",N,N],[17,"O_FSYNC","","",N,N],[17,"O_NDELAY","","",N,N],[17,"F_GETOWN","","",N,N],[17,"F_SETOWN","","",N,N],[17,"MNT_FORCE","","",N,N],[17,"Q_SYNC","","",N,N],[17,"Q_QUOTAON","","",N,N],[17,"Q_QUOTAOFF","","",N,N],[17,"TCIOFF","","",N,N],[17,"TCION","","",N,N],[17,"TCOOFF","","",N,N],[17,"TCOON","","",N,N],[17,"TCIFLUSH","","",N,N],[17,"TCOFLUSH","","",N,N],[17,"TCIOFLUSH","","",N,N],[17,"TCSANOW","","",N,N],[17,"TCSADRAIN","","",N,N],[17,"TCSAFLUSH","","",N,N],[17,"VEOF","","",N,N],[17,"VEOL","","",N,N],[17,"VEOL2","","",N,N],[17,"VERASE","","",N,N],[17,"VWERASE","","",N,N],[17,"VKILL","","",N,N],[17,"VREPRINT","","",N,N],[17,"VINTR","","",N,N],[17,"VQUIT","","",N,N],[17,"VSUSP","","",N,N],[17,"VDSUSP","","",N,N],[17,"VSTART","","",N,N],[17,"VSTOP","","",N,N],[17,"VLNEXT","","",N,N],[17,"VDISCARD","","",N,N],[17,"VMIN","","",N,N],[17,"VTIME","","",N,N],[17,"VSTATUS","","",N,N],[17,"_POSIX_VDISABLE","","",N,N],[17,"IGNBRK","","",N,N],[17,"BRKINT","","",N,N],[17,"IGNPAR","","",N,N],[17,"PARMRK","","",N,N],[17,"INPCK","","",N,N],[17,"ISTRIP","","",N,N],[17,"INLCR","","",N,N],[17,"IGNCR","","",N,N],[17,"ICRNL","","",N,N],[17,"IXON","","",N,N],[17,"IXOFF","","",N,N],[17,"IXANY","","",N,N],[17,"IMAXBEL","","",N,N],[17,"OPOST","","",N,N],[17,"ONLCR","","",N,N],[17,"OXTABS","","",N,N],[17,"ONOEOT","","",N,N],[17,"CIGNORE","","",N,N],[17,"CSIZE","","",N,N],[17,"CS5","","",N,N],[17,"CS6","","",N,N],[17,"CS7","","",N,N],[17,"CS8","","",N,N],[17,"CSTOPB","","",N,N],[17,"CREAD","","",N,N],[17,"PARENB","","",N,N],[17,"PARODD","","",N,N],[17,"HUPCL","","",N,N],[17,"CLOCAL","","",N,N],[17,"ECHOKE","","",N,N],[17,"ECHOE","","",N,N],[17,"ECHOK","","",N,N],[17,"ECHO","","",N,N],[17,"ECHONL","","",N,N],[17,"ECHOPRT","","",N,N],[17,"ECHOCTL","","",N,N],[17,"ISIG","","",N,N],[17,"ICANON","","",N,N],[17,"ALTWERASE","","",N,N],[17,"IEXTEN","","",N,N],[17,"EXTPROC","","",N,N],[17,"TOSTOP","","",N,N],[17,"FLUSHO","","",N,N],[17,"NOKERNINFO","","",N,N],[17,"PENDIN","","",N,N],[17,"NOFLSH","","",N,N],[17,"MDMBUF","","",N,N],[17,"WNOHANG","","",N,N],[17,"WUNTRACED","","",N,N],[17,"RTLD_LAZY","","",N,N],[17,"RTLD_NOW","","",N,N],[17,"RTLD_NEXT","","",N,N],[17,"RTLD_DEFAULT","","",N,N],[17,"RTLD_SELF","","",N,N],[17,"LOG_CRON","","",N,N],[17,"LOG_AUTHPRIV","","",N,N],[17,"LOG_FTP","","",N,N],[17,"LOG_PERROR","","",N,N],[17,"TCP_MAXSEG","","",N,N],[17,"PIPE_BUF","","",N,N],[17,"POLLIN","","",N,N],[17,"POLLPRI","","",N,N],[17,"POLLOUT","","",N,N],[17,"POLLERR","","",N,N],[17,"POLLHUP","","",N,N],[17,"POLLNVAL","","",N,N],[17,"POLLRDNORM","","",N,N],[17,"POLLWRNORM","","",N,N],[17,"POLLRDBAND","","",N,N],[17,"POLLWRBAND","","",N,N],[17,"_UTX_USERSIZE","","",N,N],[17,"_UTX_LINESIZE","","",N,N],[17,"_UTX_IDSIZE","","",N,N],[17,"_UTX_HOSTSIZE","","",N,N],[17,"EMPTY","","",N,N],[17,"RUN_LVL","","",N,N],[17,"BOOT_TIME","","",N,N],[17,"OLD_TIME","","",N,N],[17,"NEW_TIME","","",N,N],[17,"INIT_PROCESS","","",N,N],[17,"LOGIN_PROCESS","","",N,N],[17,"USER_PROCESS","","",N,N],[17,"DEAD_PROCESS","","",N,N],[17,"ACCOUNTING","","",N,N],[17,"SIGNATURE","","",N,N],[17,"SHUTDOWN_TIME","","",N,N],[17,"LC_COLLATE_MASK","","",N,N],[17,"LC_CTYPE_MASK","","",N,N],[17,"LC_MESSAGES_MASK","","",N,N],[17,"LC_MONETARY_MASK","","",N,N],[17,"LC_NUMERIC_MASK","","",N,N],[17,"LC_TIME_MASK","","",N,N],[17,"LC_ALL_MASK","","",N,N],[17,"CODESET","","",N,N],[17,"D_T_FMT","","",N,N],[17,"D_FMT","","",N,N],[17,"T_FMT","","",N,N],[17,"T_FMT_AMPM","","",N,N],[17,"AM_STR","","",N,N],[17,"PM_STR","","",N,N],[17,"DAY_1","","",N,N],[17,"DAY_2","","",N,N],[17,"DAY_3","","",N,N],[17,"DAY_4","","",N,N],[17,"DAY_5","","",N,N],[17,"DAY_6","","",N,N],[17,"DAY_7","","",N,N],[17,"ABDAY_1","","",N,N],[17,"ABDAY_2","","",N,N],[17,"ABDAY_3","","",N,N],[17,"ABDAY_4","","",N,N],[17,"ABDAY_5","","",N,N],[17,"ABDAY_6","","",N,N],[17,"ABDAY_7","","",N,N],[17,"MON_1","","",N,N],[17,"MON_2","","",N,N],[17,"MON_3","","",N,N],[17,"MON_4","","",N,N],[17,"MON_5","","",N,N],[17,"MON_6","","",N,N],[17,"MON_7","","",N,N],[17,"MON_8","","",N,N],[17,"MON_9","","",N,N],[17,"MON_10","","",N,N],[17,"MON_11","","",N,N],[17,"MON_12","","",N,N],[17,"ABMON_1","","",N,N],[17,"ABMON_2","","",N,N],[17,"ABMON_3","","",N,N],[17,"ABMON_4","","",N,N],[17,"ABMON_5","","",N,N],[17,"ABMON_6","","",N,N],[17,"ABMON_7","","",N,N],[17,"ABMON_8","","",N,N],[17,"ABMON_9","","",N,N],[17,"ABMON_10","","",N,N],[17,"ABMON_11","","",N,N],[17,"ABMON_12","","",N,N],[17,"CLOCK_REALTIME","","",N,N],[17,"CLOCK_MONOTONIC","","",N,N],[17,"CLOCK_PROCESS_CPUTIME_ID","","",N,N],[17,"CLOCK_THREAD_CPUTIME_ID","","",N,N],[17,"ERA","","",N,N],[17,"ERA_D_FMT","","",N,N],[17,"ERA_D_T_FMT","","",N,N],[17,"ERA_T_FMT","","",N,N],[17,"ALT_DIGITS","","",N,N],[17,"RADIXCHAR","","",N,N],[17,"THOUSEP","","",N,N],[17,"YESEXPR","","",N,N],[17,"NOEXPR","","",N,N],[17,"YESSTR","","",N,N],[17,"NOSTR","","",N,N],[17,"CRNCYSTR","","",N,N],[17,"D_MD_ORDER","","",N,N],[17,"EXIT_FAILURE","","",N,N],[17,"EXIT_SUCCESS","","",N,N],[17,"RAND_MAX","","",N,N],[17,"EOF","","",N,N],[17,"SEEK_SET","","",N,N],[17,"SEEK_CUR","","",N,N],[17,"SEEK_END","","",N,N],[17,"_IOFBF","","",N,N],[17,"_IONBF","","",N,N],[17,"_IOLBF","","",N,N],[17,"BUFSIZ","","",N,N],[17,"FOPEN_MAX","","",N,N],[17,"FILENAME_MAX","","",N,N],[17,"L_tmpnam","","",N,N],[17,"TMP_MAX","","",N,N],[17,"_PC_LINK_MAX","","",N,N],[17,"_PC_MAX_CANON","","",N,N],[17,"_PC_MAX_INPUT","","",N,N],[17,"_PC_NAME_MAX","","",N,N],[17,"_PC_PATH_MAX","","",N,N],[17,"_PC_PIPE_BUF","","",N,N],[17,"_PC_CHOWN_RESTRICTED","","",N,N],[17,"_PC_NO_TRUNC","","",N,N],[17,"_PC_VDISABLE","","",N,N],[17,"O_DSYNC","","",N,N],[17,"O_NOCTTY","","",N,N],[17,"O_CLOEXEC","","",N,N],[17,"O_DIRECTORY","","",N,N],[17,"S_IFIFO","","",N,N],[17,"S_IFCHR","","",N,N],[17,"S_IFBLK","","",N,N],[17,"S_IFDIR","","",N,N],[17,"S_IFREG","","",N,N],[17,"S_IFLNK","","",N,N],[17,"S_IFSOCK","","",N,N],[17,"S_IFMT","","",N,N],[17,"S_IEXEC","","",N,N],[17,"S_IWRITE","","",N,N],[17,"S_IREAD","","",N,N],[17,"S_IRWXU","","",N,N],[17,"S_IXUSR","","",N,N],[17,"S_IWUSR","","",N,N],[17,"S_IRUSR","","",N,N],[17,"S_IRWXG","","",N,N],[17,"S_IXGRP","","",N,N],[17,"S_IWGRP","","",N,N],[17,"S_IRGRP","","",N,N],[17,"S_IRWXO","","",N,N],[17,"S_IXOTH","","",N,N],[17,"S_IWOTH","","",N,N],[17,"S_IROTH","","",N,N],[17,"F_OK","","",N,N],[17,"R_OK","","",N,N],[17,"W_OK","","",N,N],[17,"X_OK","","",N,N],[17,"STDIN_FILENO","","",N,N],[17,"STDOUT_FILENO","","",N,N],[17,"STDERR_FILENO","","",N,N],[17,"F_LOCK","","",N,N],[17,"F_TEST","","",N,N],[17,"F_TLOCK","","",N,N],[17,"F_ULOCK","","",N,N],[17,"F_GETLK","","",N,N],[17,"F_SETLK","","",N,N],[17,"F_SETLKW","","",N,N],[17,"SIGHUP","","",N,N],[17,"SIGINT","","",N,N],[17,"SIGQUIT","","",N,N],[17,"SIGILL","","",N,N],[17,"SIGABRT","","",N,N],[17,"SIGEMT","","",N,N],[17,"SIGFPE","","",N,N],[17,"SIGKILL","","",N,N],[17,"SIGSEGV","","",N,N],[17,"SIGPIPE","","",N,N],[17,"SIGALRM","","",N,N],[17,"SIGTERM","","",N,N],[17,"PROT_NONE","","",N,N],[17,"PROT_READ","","",N,N],[17,"PROT_WRITE","","",N,N],[17,"PROT_EXEC","","",N,N],[17,"MAP_FILE","","",N,N],[17,"MAP_SHARED","","",N,N],[17,"MAP_PRIVATE","","",N,N],[17,"MAP_FIXED","","",N,N],[17,"MAP_ANON","","",N,N],[17,"VM_FLAGS_FIXED","","",N,N],[17,"VM_FLAGS_ANYWHERE","","",N,N],[17,"VM_FLAGS_PURGABLE","","",N,N],[17,"VM_FLAGS_RANDOM_ADDR","","",N,N],[17,"VM_FLAGS_NO_CACHE","","",N,N],[17,"VM_FLAGS_RESILIENT_CODESIGN","","",N,N],[17,"VM_FLAGS_RESILIENT_MEDIA","","",N,N],[17,"VM_FLAGS_OVERWRITE","","",N,N],[17,"VM_FLAGS_SUPERPAGE_MASK","","",N,N],[17,"VM_FLAGS_RETURN_DATA_ADDR","","",N,N],[17,"VM_FLAGS_RETURN_4K_DATA_ADDR","","",N,N],[17,"VM_FLAGS_ALIAS_MASK","","",N,N],[17,"VM_FLAGS_USER_ALLOCATE","","",N,N],[17,"VM_FLAGS_USER_MAP","","",N,N],[17,"VM_FLAGS_USER_REMAP","","",N,N],[17,"VM_FLAGS_SUPERPAGE_SHIFT","","",N,N],[17,"SUPERPAGE_NONE","","",N,N],[17,"SUPERPAGE_SIZE_ANY","","",N,N],[17,"VM_FLAGS_SUPERPAGE_NONE","","",N,N],[17,"VM_FLAGS_SUPERPAGE_SIZE_ANY","","",N,N],[17,"SUPERPAGE_SIZE_2MB","","",N,N],[17,"VM_FLAGS_SUPERPAGE_SIZE_2MB","","",N,N],[17,"VM_MEMORY_MALLOC","","",N,N],[17,"VM_MEMORY_MALLOC_SMALL","","",N,N],[17,"VM_MEMORY_MALLOC_LARGE","","",N,N],[17,"VM_MEMORY_MALLOC_HUGE","","",N,N],[17,"VM_MEMORY_SBRK","","",N,N],[17,"VM_MEMORY_REALLOC","","",N,N],[17,"VM_MEMORY_MALLOC_TINY","","",N,N],[17,"VM_MEMORY_MALLOC_LARGE_REUSABLE","","",N,N],[17,"VM_MEMORY_MALLOC_LARGE_REUSED","","",N,N],[17,"VM_MEMORY_ANALYSIS_TOOL","","",N,N],[17,"VM_MEMORY_MALLOC_NANO","","",N,N],[17,"VM_MEMORY_MACH_MSG","","",N,N],[17,"VM_MEMORY_IOKIT","","",N,N],[17,"VM_MEMORY_STACK","","",N,N],[17,"VM_MEMORY_GUARD","","",N,N],[17,"VM_MEMORY_SHARED_PMAP","","",N,N],[17,"VM_MEMORY_DYLIB","","",N,N],[17,"VM_MEMORY_OBJC_DISPATCHERS","","",N,N],[17,"VM_MEMORY_UNSHARED_PMAP","","",N,N],[17,"VM_MEMORY_APPKIT","","",N,N],[17,"VM_MEMORY_FOUNDATION","","",N,N],[17,"VM_MEMORY_COREGRAPHICS","","",N,N],[17,"VM_MEMORY_CORESERVICES","","",N,N],[17,"VM_MEMORY_CARBON","","",N,N],[17,"VM_MEMORY_JAVA","","",N,N],[17,"VM_MEMORY_COREDATA","","",N,N],[17,"VM_MEMORY_COREDATA_OBJECTIDS","","",N,N],[17,"VM_MEMORY_ATS","","",N,N],[17,"VM_MEMORY_LAYERKIT","","",N,N],[17,"VM_MEMORY_CGIMAGE","","",N,N],[17,"VM_MEMORY_TCMALLOC","","",N,N],[17,"VM_MEMORY_COREGRAPHICS_DATA","","",N,N],[17,"VM_MEMORY_COREGRAPHICS_SHARED","","",N,N],[17,"VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS","","",N,N],[17,"VM_MEMORY_COREGRAPHICS_BACKINGSTORES","","",N,N],[17,"VM_MEMORY_COREGRAPHICS_XALLOC","","",N,N],[17,"VM_MEMORY_COREGRAPHICS_MISC","","",N,N],[17,"VM_MEMORY_DYLD","","",N,N],[17,"VM_MEMORY_DYLD_MALLOC","","",N,N],[17,"VM_MEMORY_SQLITE","","",N,N],[17,"VM_MEMORY_JAVASCRIPT_CORE","","",N,N],[17,"VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR","","",N,N],[17,"VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE","","",N,N],[17,"VM_MEMORY_GLSL","","",N,N],[17,"VM_MEMORY_OPENCL","","",N,N],[17,"VM_MEMORY_COREIMAGE","","",N,N],[17,"VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS","","",N,N],[17,"VM_MEMORY_IMAGEIO","","",N,N],[17,"VM_MEMORY_COREPROFILE","","",N,N],[17,"VM_MEMORY_ASSETSD","","",N,N],[17,"VM_MEMORY_OS_ALLOC_ONCE","","",N,N],[17,"VM_MEMORY_LIBDISPATCH","","",N,N],[17,"VM_MEMORY_ACCELERATE","","",N,N],[17,"VM_MEMORY_COREUI","","",N,N],[17,"VM_MEMORY_COREUIFILE","","",N,N],[17,"VM_MEMORY_GENEALOGY","","",N,N],[17,"VM_MEMORY_RAWCAMERA","","",N,N],[17,"VM_MEMORY_CORPSEINFO","","",N,N],[17,"VM_MEMORY_ASL","","",N,N],[17,"VM_MEMORY_SWIFT_RUNTIME","","",N,N],[17,"VM_MEMORY_SWIFT_METADATA","","",N,N],[17,"VM_MEMORY_DHMM","","",N,N],[17,"VM_MEMORY_SCENEKIT","","",N,N],[17,"VM_MEMORY_SKYWALK","","",N,N],[17,"VM_MEMORY_APPLICATION_SPECIFIC_1","","",N,N],[17,"VM_MEMORY_APPLICATION_SPECIFIC_16","","",N,N],[17,"MAP_FAILED","","",N,N],[17,"MCL_CURRENT","","",N,N],[17,"MCL_FUTURE","","",N,N],[17,"MS_ASYNC","","",N,N],[17,"MS_INVALIDATE","","",N,N],[17,"MS_SYNC","","",N,N],[17,"MS_KILLPAGES","","",N,N],[17,"MS_DEACTIVATE","","",N,N],[17,"EPERM","","",N,N],[17,"ENOENT","","",N,N],[17,"ESRCH","","",N,N],[17,"EINTR","","",N,N],[17,"EIO","","",N,N],[17,"ENXIO","","",N,N],[17,"E2BIG","","",N,N],[17,"ENOEXEC","","",N,N],[17,"EBADF","","",N,N],[17,"ECHILD","","",N,N],[17,"EDEADLK","","",N,N],[17,"ENOMEM","","",N,N],[17,"EACCES","","",N,N],[17,"EFAULT","","",N,N],[17,"ENOTBLK","","",N,N],[17,"EBUSY","","",N,N],[17,"EEXIST","","",N,N],[17,"EXDEV","","",N,N],[17,"ENODEV","","",N,N],[17,"ENOTDIR","","",N,N],[17,"EISDIR","","",N,N],[17,"EINVAL","","",N,N],[17,"ENFILE","","",N,N],[17,"EMFILE","","",N,N],[17,"ENOTTY","","",N,N],[17,"ETXTBSY","","",N,N],[17,"EFBIG","","",N,N],[17,"ENOSPC","","",N,N],[17,"ESPIPE","","",N,N],[17,"EROFS","","",N,N],[17,"EMLINK","","",N,N],[17,"EPIPE","","",N,N],[17,"EDOM","","",N,N],[17,"ERANGE","","",N,N],[17,"EAGAIN","","",N,N],[17,"EWOULDBLOCK","","",N,N],[17,"EINPROGRESS","","",N,N],[17,"EALREADY","","",N,N],[17,"ENOTSOCK","","",N,N],[17,"EDESTADDRREQ","","",N,N],[17,"EMSGSIZE","","",N,N],[17,"EPROTOTYPE","","",N,N],[17,"ENOPROTOOPT","","",N,N],[17,"EPROTONOSUPPORT","","",N,N],[17,"ESOCKTNOSUPPORT","","",N,N],[17,"ENOTSUP","","",N,N],[17,"EPFNOSUPPORT","","",N,N],[17,"EAFNOSUPPORT","","",N,N],[17,"EADDRINUSE","","",N,N],[17,"EADDRNOTAVAIL","","",N,N],[17,"ENETDOWN","","",N,N],[17,"ENETUNREACH","","",N,N],[17,"ENETRESET","","",N,N],[17,"ECONNABORTED","","",N,N],[17,"ECONNRESET","","",N,N],[17,"ENOBUFS","","",N,N],[17,"EISCONN","","",N,N],[17,"ENOTCONN","","",N,N],[17,"ESHUTDOWN","","",N,N],[17,"ETOOMANYREFS","","",N,N],[17,"ETIMEDOUT","","",N,N],[17,"ECONNREFUSED","","",N,N],[17,"ELOOP","","",N,N],[17,"ENAMETOOLONG","","",N,N],[17,"EHOSTDOWN","","",N,N],[17,"EHOSTUNREACH","","",N,N],[17,"ENOTEMPTY","","",N,N],[17,"EPROCLIM","","",N,N],[17,"EUSERS","","",N,N],[17,"EDQUOT","","",N,N],[17,"ESTALE","","",N,N],[17,"EREMOTE","","",N,N],[17,"EBADRPC","","",N,N],[17,"ERPCMISMATCH","","",N,N],[17,"EPROGUNAVAIL","","",N,N],[17,"EPROGMISMATCH","","",N,N],[17,"EPROCUNAVAIL","","",N,N],[17,"ENOLCK","","",N,N],[17,"ENOSYS","","",N,N],[17,"EFTYPE","","",N,N],[17,"EAUTH","","",N,N],[17,"ENEEDAUTH","","",N,N],[17,"EPWROFF","","",N,N],[17,"EDEVERR","","",N,N],[17,"EOVERFLOW","","",N,N],[17,"EBADEXEC","","",N,N],[17,"EBADARCH","","",N,N],[17,"ESHLIBVERS","","",N,N],[17,"EBADMACHO","","",N,N],[17,"ECANCELED","","",N,N],[17,"EIDRM","","",N,N],[17,"ENOMSG","","",N,N],[17,"EILSEQ","","",N,N],[17,"ENOATTR","","",N,N],[17,"EBADMSG","","",N,N],[17,"EMULTIHOP","","",N,N],[17,"ENODATA","","",N,N],[17,"ENOLINK","","",N,N],[17,"ENOSR","","",N,N],[17,"ENOSTR","","",N,N],[17,"EPROTO","","",N,N],[17,"ETIME","","",N,N],[17,"EOPNOTSUPP","","",N,N],[17,"ENOPOLICY","","",N,N],[17,"ENOTRECOVERABLE","","",N,N],[17,"EOWNERDEAD","","",N,N],[17,"EQFULL","","",N,N],[17,"ELAST","","",N,N],[17,"EAI_AGAIN","","",N,N],[17,"EAI_BADFLAGS","","",N,N],[17,"EAI_FAIL","","",N,N],[17,"EAI_FAMILY","","",N,N],[17,"EAI_MEMORY","","",N,N],[17,"EAI_NODATA","","",N,N],[17,"EAI_NONAME","","",N,N],[17,"EAI_SERVICE","","",N,N],[17,"EAI_SOCKTYPE","","",N,N],[17,"EAI_SYSTEM","","",N,N],[17,"EAI_OVERFLOW","","",N,N],[17,"F_DUPFD","","",N,N],[17,"F_DUPFD_CLOEXEC","","",N,N],[17,"F_GETFD","","",N,N],[17,"F_SETFD","","",N,N],[17,"F_GETFL","","",N,N],[17,"F_SETFL","","",N,N],[17,"F_PREALLOCATE","","",N,N],[17,"F_RDADVISE","","",N,N],[17,"F_RDAHEAD","","",N,N],[17,"F_NOCACHE","","",N,N],[17,"F_GETPATH","","",N,N],[17,"F_FULLFSYNC","","",N,N],[17,"F_FREEZE_FS","","",N,N],[17,"F_THAW_FS","","",N,N],[17,"F_GLOBAL_NOCACHE","","",N,N],[17,"F_NODIRECT","","",N,N],[17,"F_ALLOCATECONTIG","","",N,N],[17,"F_ALLOCATEALL","","",N,N],[17,"F_PEOFPOSMODE","","",N,N],[17,"F_VOLPOSMODE","","",N,N],[17,"AT_FDCWD","","",N,N],[17,"AT_EACCESS","","",N,N],[17,"AT_SYMLINK_NOFOLLOW","","",N,N],[17,"AT_SYMLINK_FOLLOW","","",N,N],[17,"AT_REMOVEDIR","","",N,N],[17,"TIOCMODG","","",N,N],[17,"TIOCMODS","","",N,N],[17,"TIOCM_LE","","",N,N],[17,"TIOCM_DTR","","",N,N],[17,"TIOCM_RTS","","",N,N],[17,"TIOCM_ST","","",N,N],[17,"TIOCM_SR","","",N,N],[17,"TIOCM_CTS","","",N,N],[17,"TIOCM_CAR","","",N,N],[17,"TIOCM_CD","","",N,N],[17,"TIOCM_RNG","","",N,N],[17,"TIOCM_RI","","",N,N],[17,"TIOCM_DSR","","",N,N],[17,"TIOCEXCL","","",N,N],[17,"TIOCNXCL","","",N,N],[17,"TIOCFLUSH","","",N,N],[17,"TIOCGETD","","",N,N],[17,"TIOCSETD","","",N,N],[17,"TIOCIXON","","",N,N],[17,"TIOCIXOFF","","",N,N],[17,"TIOCSBRK","","",N,N],[17,"TIOCCBRK","","",N,N],[17,"TIOCSDTR","","",N,N],[17,"TIOCCDTR","","",N,N],[17,"TIOCGPGRP","","",N,N],[17,"TIOCSPGRP","","",N,N],[17,"TIOCOUTQ","","",N,N],[17,"TIOCSTI","","",N,N],[17,"TIOCNOTTY","","",N,N],[17,"TIOCPKT","","",N,N],[17,"TIOCPKT_DATA","","",N,N],[17,"TIOCPKT_FLUSHREAD","","",N,N],[17,"TIOCPKT_FLUSHWRITE","","",N,N],[17,"TIOCPKT_STOP","","",N,N],[17,"TIOCPKT_START","","",N,N],[17,"TIOCPKT_NOSTOP","","",N,N],[17,"TIOCPKT_DOSTOP","","",N,N],[17,"TIOCPKT_IOCTL","","",N,N],[17,"TIOCSTOP","","",N,N],[17,"TIOCSTART","","",N,N],[17,"TIOCMSET","","",N,N],[17,"TIOCMBIS","","",N,N],[17,"TIOCMBIC","","",N,N],[17,"TIOCMGET","","",N,N],[17,"TIOCREMOTE","","",N,N],[17,"TIOCGWINSZ","","",N,N],[17,"TIOCSWINSZ","","",N,N],[17,"TIOCUCNTL","","",N,N],[17,"TIOCSTAT","","",N,N],[17,"TIOCSCONS","","",N,N],[17,"TIOCCONS","","",N,N],[17,"TIOCSCTTY","","",N,N],[17,"TIOCEXT","","",N,N],[17,"TIOCSIG","","",N,N],[17,"TIOCDRAIN","","",N,N],[17,"TIOCMSDTRWAIT","","",N,N],[17,"TIOCMGDTRWAIT","","",N,N],[17,"TIOCSDRAINWAIT","","",N,N],[17,"TIOCGDRAINWAIT","","",N,N],[17,"TIOCDSIMICROCODE","","",N,N],[17,"TIOCPTYGRANT","","",N,N],[17,"TIOCPTYGNAME","","",N,N],[17,"TIOCPTYUNLK","","",N,N],[17,"B0","","",N,N],[17,"B50","","",N,N],[17,"B75","","",N,N],[17,"B110","","",N,N],[17,"B134","","",N,N],[17,"B150","","",N,N],[17,"B200","","",N,N],[17,"B300","","",N,N],[17,"B600","","",N,N],[17,"B1200","","",N,N],[17,"B1800","","",N,N],[17,"B2400","","",N,N],[17,"B4800","","",N,N],[17,"B9600","","",N,N],[17,"B19200","","",N,N],[17,"B38400","","",N,N],[17,"B7200","","",N,N],[17,"B14400","","",N,N],[17,"B28800","","",N,N],[17,"B57600","","",N,N],[17,"B76800","","",N,N],[17,"B115200","","",N,N],[17,"B230400","","",N,N],[17,"EXTA","","",N,N],[17,"EXTB","","",N,N],[17,"SIGTRAP","","",N,N],[17,"GLOB_APPEND","","",N,N],[17,"GLOB_DOOFFS","","",N,N],[17,"GLOB_ERR","","",N,N],[17,"GLOB_MARK","","",N,N],[17,"GLOB_NOCHECK","","",N,N],[17,"GLOB_NOSORT","","",N,N],[17,"GLOB_NOESCAPE","","",N,N],[17,"GLOB_NOSPACE","","",N,N],[17,"GLOB_ABORTED","","",N,N],[17,"GLOB_NOMATCH","","",N,N],[17,"POSIX_MADV_NORMAL","","",N,N],[17,"POSIX_MADV_RANDOM","","",N,N],[17,"POSIX_MADV_SEQUENTIAL","","",N,N],[17,"POSIX_MADV_WILLNEED","","",N,N],[17,"POSIX_MADV_DONTNEED","","",N,N],[17,"_SC_IOV_MAX","","",N,N],[17,"_SC_GETGR_R_SIZE_MAX","","",N,N],[17,"_SC_GETPW_R_SIZE_MAX","","",N,N],[17,"_SC_LOGIN_NAME_MAX","","",N,N],[17,"_SC_MQ_PRIO_MAX","","",N,N],[17,"_SC_THREAD_ATTR_STACKADDR","","",N,N],[17,"_SC_THREAD_ATTR_STACKSIZE","","",N,N],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",N,N],[17,"_SC_THREAD_KEYS_MAX","","",N,N],[17,"_SC_THREAD_PRIO_INHERIT","","",N,N],[17,"_SC_THREAD_PRIO_PROTECT","","",N,N],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_THREAD_PROCESS_SHARED","","",N,N],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",N,N],[17,"_SC_THREAD_STACK_MIN","","",N,N],[17,"_SC_THREAD_THREADS_MAX","","",N,N],[17,"_SC_THREADS","","",N,N],[17,"_SC_TTY_NAME_MAX","","",N,N],[17,"_SC_ATEXIT_MAX","","",N,N],[17,"_SC_XOPEN_CRYPT","","",N,N],[17,"_SC_XOPEN_ENH_I18N","","",N,N],[17,"_SC_XOPEN_LEGACY","","",N,N],[17,"_SC_XOPEN_REALTIME","","",N,N],[17,"_SC_XOPEN_REALTIME_THREADS","","",N,N],[17,"_SC_XOPEN_SHM","","",N,N],[17,"_SC_XOPEN_UNIX","","",N,N],[17,"_SC_XOPEN_VERSION","","",N,N],[17,"_SC_XOPEN_XCU_VERSION","","",N,N],[17,"PTHREAD_PROCESS_PRIVATE","","",N,N],[17,"PTHREAD_PROCESS_SHARED","","",N,N],[17,"PTHREAD_CREATE_JOINABLE","","",N,N],[17,"PTHREAD_CREATE_DETACHED","","",N,N],[17,"PTHREAD_STACK_MIN","","",N,N],[17,"RLIMIT_CPU","","",N,N],[17,"RLIMIT_FSIZE","","",N,N],[17,"RLIMIT_DATA","","",N,N],[17,"RLIMIT_STACK","","",N,N],[17,"RLIMIT_CORE","","",N,N],[17,"RLIMIT_AS","","",N,N],[17,"RLIMIT_RSS","","",N,N],[17,"RLIMIT_MEMLOCK","","",N,N],[17,"RLIMIT_NPROC","","",N,N],[17,"RLIMIT_NOFILE","","",N,N],[17,"RLIM_NLIMITS","","",N,N],[17,"_RLIMIT_POSIX_FLAG","","",N,N],[17,"RLIM_INFINITY","","",N,N],[17,"RUSAGE_SELF","","",N,N],[17,"RUSAGE_CHILDREN","","",N,N],[17,"MADV_NORMAL","","",N,N],[17,"MADV_RANDOM","","",N,N],[17,"MADV_SEQUENTIAL","","",N,N],[17,"MADV_WILLNEED","","",N,N],[17,"MADV_DONTNEED","","",N,N],[17,"MADV_FREE","","",N,N],[17,"MADV_ZERO_WIRED_PAGES","","",N,N],[17,"MADV_FREE_REUSABLE","","",N,N],[17,"MADV_FREE_REUSE","","",N,N],[17,"MADV_CAN_REUSE","","",N,N],[17,"MINCORE_INCORE","","",N,N],[17,"MINCORE_REFERENCED","","",N,N],[17,"MINCORE_MODIFIED","","",N,N],[17,"MINCORE_REFERENCED_OTHER","","",N,N],[17,"MINCORE_MODIFIED_OTHER","","",N,N],[17,"IPPROTO_HOPOPTS","","IP6 hop-by-hop options",N,N],[17,"IPPROTO_IGMP","","group mgmt protocol",N,N],[17,"IPPROTO_GGP","","gateway2 (deprecated)",N,N],[17,"IPPROTO_IPIP","","for compatibility",N,N],[17,"IPPROTO_ST","","Stream protocol II.",N,N],[17,"IPPROTO_EGP","","exterior gateway protocol",N,N],[17,"IPPROTO_PIGP","","private interior gateway",N,N],[17,"IPPROTO_RCCMON","","BBN RCC Monitoring",N,N],[17,"IPPROTO_NVPII","","network voice protocol",N,N],[17,"IPPROTO_PUP","","pup",N,N],[17,"IPPROTO_ARGUS","","Argus",N,N],[17,"IPPROTO_EMCON","","EMCON",N,N],[17,"IPPROTO_XNET","","Cross Net Debugger",N,N],[17,"IPPROTO_CHAOS","","Chaos",N,N],[17,"IPPROTO_MUX","","Multiplexing",N,N],[17,"IPPROTO_MEAS","","DCN Measurement Subsystems",N,N],[17,"IPPROTO_HMP","","Host Monitoring",N,N],[17,"IPPROTO_PRM","","Packet Radio Measurement",N,N],[17,"IPPROTO_IDP","","xns idp",N,N],[17,"IPPROTO_TRUNK1","","Trunk-1",N,N],[17,"IPPROTO_TRUNK2","","Trunk-2",N,N],[17,"IPPROTO_LEAF1","","Leaf-1",N,N],[17,"IPPROTO_LEAF2","","Leaf-2",N,N],[17,"IPPROTO_RDP","","Reliable Data",N,N],[17,"IPPROTO_IRTP","","Reliable Transaction",N,N],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",N,N],[17,"IPPROTO_BLT","","Bulk Data Transfer",N,N],[17,"IPPROTO_NSP","","Network Services",N,N],[17,"IPPROTO_INP","","Merit Internodal",N,N],[17,"IPPROTO_SEP","","Sequential Exchange",N,N],[17,"IPPROTO_3PC","","Third Party Connect",N,N],[17,"IPPROTO_IDPR","","InterDomain Policy Routing",N,N],[17,"IPPROTO_XTP","","XTP",N,N],[17,"IPPROTO_DDP","","Datagram Delivery",N,N],[17,"IPPROTO_CMTP","","Control Message Transport",N,N],[17,"IPPROTO_TPXX","","TP++ Transport",N,N],[17,"IPPROTO_IL","","IL transport protocol",N,N],[17,"IPPROTO_SDRP","","Source Demand Routing",N,N],[17,"IPPROTO_ROUTING","","IP6 routing header",N,N],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",N,N],[17,"IPPROTO_IDRP","","InterDomain Routing",N,N],[17,"IPPROTO_RSVP","","resource reservation",N,N],[17,"IPPROTO_GRE","","General Routing Encap.",N,N],[17,"IPPROTO_MHRP","","Mobile Host Routing",N,N],[17,"IPPROTO_BHA","","BHA",N,N],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",N,N],[17,"IPPROTO_AH","","IP6 Auth Header",N,N],[17,"IPPROTO_INLSP","","Integ. Net Layer Security",N,N],[17,"IPPROTO_SWIPE","","IP with encryption",N,N],[17,"IPPROTO_NHRP","","Next Hop Resolution",N,N],[17,"IPPROTO_NONE","","IP6 no next header",N,N],[17,"IPPROTO_DSTOPTS","","IP6 destination option",N,N],[17,"IPPROTO_AHIP","","any host internal protocol",N,N],[17,"IPPROTO_CFTP","","CFTP",N,N],[17,"IPPROTO_HELLO","","\"hello\" routing protocol",N,N],[17,"IPPROTO_SATEXPAK","","SATNET/Backroom EXPAK",N,N],[17,"IPPROTO_KRYPTOLAN","","Kryptolan",N,N],[17,"IPPROTO_RVD","","Remote Virtual Disk",N,N],[17,"IPPROTO_IPPC","","Pluribus Packet Core",N,N],[17,"IPPROTO_ADFS","","Any distributed FS",N,N],[17,"IPPROTO_SATMON","","Satnet Monitoring",N,N],[17,"IPPROTO_VISA","","VISA Protocol",N,N],[17,"IPPROTO_IPCV","","Packet Core Utility",N,N],[17,"IPPROTO_CPNX","","Comp. Prot. Net. Executive",N,N],[17,"IPPROTO_CPHB","","Comp. Prot. HeartBeat",N,N],[17,"IPPROTO_WSN","","Wang Span Network",N,N],[17,"IPPROTO_PVP","","Packet Video Protocol",N,N],[17,"IPPROTO_BRSATMON","","BackRoom SATNET Monitoring",N,N],[17,"IPPROTO_ND","","Sun net disk proto (temp.)",N,N],[17,"IPPROTO_WBMON","","WIDEBAND Monitoring",N,N],[17,"IPPROTO_WBEXPAK","","WIDEBAND EXPAK",N,N],[17,"IPPROTO_EON","","ISO cnlp",N,N],[17,"IPPROTO_VMTP","","VMTP",N,N],[17,"IPPROTO_SVMTP","","Secure VMTP",N,N],[17,"IPPROTO_VINES","","Banyon VINES",N,N],[17,"IPPROTO_TTP","","TTP",N,N],[17,"IPPROTO_IGP","","NSFNET-IGP",N,N],[17,"IPPROTO_DGP","","dissimilar gateway prot.",N,N],[17,"IPPROTO_TCF","","TCF",N,N],[17,"IPPROTO_IGRP","","Cisco/GXS IGRP",N,N],[17,"IPPROTO_OSPFIGP","","OSPFIGP",N,N],[17,"IPPROTO_SRPC","","Strite RPC protocol",N,N],[17,"IPPROTO_LARP","","Locus Address Resoloution",N,N],[17,"IPPROTO_MTP","","Multicast Transport",N,N],[17,"IPPROTO_AX25","","AX.25 Frames",N,N],[17,"IPPROTO_IPEIP","","IP encapsulated in IP",N,N],[17,"IPPROTO_MICP","","Mobile Int.ing control",N,N],[17,"IPPROTO_SCCSP","","Semaphore Comm. security",N,N],[17,"IPPROTO_ETHERIP","","Ethernet IP encapsulation",N,N],[17,"IPPROTO_ENCAP","","encapsulation header",N,N],[17,"IPPROTO_APES","","any private encr. scheme",N,N],[17,"IPPROTO_GMTP","","GMTP",N,N],[17,"IPPROTO_PIM","","Protocol Independent Mcast",N,N],[17,"IPPROTO_IPCOMP","","payload compression (IPComp)",N,N],[17,"IPPROTO_PGM","","PGM",N,N],[17,"IPPROTO_SCTP","","SCTP",N,N],[17,"IPPROTO_DIVERT","","divert pseudo-protocol",N,N],[17,"IPPROTO_RAW","","raw IP packet",N,N],[17,"IPPROTO_MAX","","",N,N],[17,"IPPROTO_DONE","","last return value of *_input(), meaning \"all job for this pkt is done\".",N,N],[17,"AF_UNSPEC","","",N,N],[17,"AF_LOCAL","","",N,N],[17,"AF_UNIX","","",N,N],[17,"AF_INET","","",N,N],[17,"AF_IMPLINK","","",N,N],[17,"AF_PUP","","",N,N],[17,"AF_CHAOS","","",N,N],[17,"AF_NS","","",N,N],[17,"AF_ISO","","",N,N],[17,"AF_OSI","","",N,N],[17,"AF_ECMA","","",N,N],[17,"AF_DATAKIT","","",N,N],[17,"AF_CCITT","","",N,N],[17,"AF_SNA","","",N,N],[17,"AF_DECnet","","",N,N],[17,"AF_DLI","","",N,N],[17,"AF_LAT","","",N,N],[17,"AF_HYLINK","","",N,N],[17,"AF_APPLETALK","","",N,N],[17,"AF_ROUTE","","",N,N],[17,"AF_LINK","","",N,N],[17,"pseudo_AF_XTP","","",N,N],[17,"AF_COIP","","",N,N],[17,"AF_CNT","","",N,N],[17,"pseudo_AF_RTIP","","",N,N],[17,"AF_IPX","","",N,N],[17,"AF_SIP","","",N,N],[17,"pseudo_AF_PIP","","",N,N],[17,"AF_ISDN","","",N,N],[17,"AF_E164","","",N,N],[17,"pseudo_AF_KEY","","",N,N],[17,"AF_INET6","","",N,N],[17,"AF_NATM","","",N,N],[17,"AF_SYSTEM","","",N,N],[17,"AF_NETBIOS","","",N,N],[17,"AF_PPP","","",N,N],[17,"pseudo_AF_HDRCMPLT","","",N,N],[17,"AF_SYS_CONTROL","","",N,N],[17,"SYSPROTO_EVENT","","",N,N],[17,"SYSPROTO_CONTROL","","",N,N],[17,"PF_UNSPEC","","",N,N],[17,"PF_LOCAL","","",N,N],[17,"PF_UNIX","","",N,N],[17,"PF_INET","","",N,N],[17,"PF_IMPLINK","","",N,N],[17,"PF_PUP","","",N,N],[17,"PF_CHAOS","","",N,N],[17,"PF_NS","","",N,N],[17,"PF_ISO","","",N,N],[17,"PF_OSI","","",N,N],[17,"PF_ECMA","","",N,N],[17,"PF_DATAKIT","","",N,N],[17,"PF_CCITT","","",N,N],[17,"PF_SNA","","",N,N],[17,"PF_DECnet","","",N,N],[17,"PF_DLI","","",N,N],[17,"PF_LAT","","",N,N],[17,"PF_HYLINK","","",N,N],[17,"PF_APPLETALK","","",N,N],[17,"PF_ROUTE","","",N,N],[17,"PF_LINK","","",N,N],[17,"PF_XTP","","",N,N],[17,"PF_COIP","","",N,N],[17,"PF_CNT","","",N,N],[17,"PF_SIP","","",N,N],[17,"PF_IPX","","",N,N],[17,"PF_RTIP","","",N,N],[17,"PF_PIP","","",N,N],[17,"PF_ISDN","","",N,N],[17,"PF_KEY","","",N,N],[17,"PF_INET6","","",N,N],[17,"PF_NATM","","",N,N],[17,"PF_SYSTEM","","",N,N],[17,"PF_NETBIOS","","",N,N],[17,"PF_PPP","","",N,N],[17,"NET_RT_DUMP","","",N,N],[17,"NET_RT_FLAGS","","",N,N],[17,"NET_RT_IFLIST","","",N,N],[17,"SOMAXCONN","","",N,N],[17,"SOCK_MAXADDRLEN","","",N,N],[17,"SOCK_STREAM","","",N,N],[17,"SOCK_DGRAM","","",N,N],[17,"SOCK_RAW","","",N,N],[17,"SOCK_RDM","","",N,N],[17,"SOCK_SEQPACKET","","",N,N],[17,"IP_TTL","","",N,N],[17,"IP_HDRINCL","","",N,N],[17,"IP_ADD_MEMBERSHIP","","",N,N],[17,"IP_DROP_MEMBERSHIP","","",N,N],[17,"IP_PKTINFO","","",N,N],[17,"IPV6_JOIN_GROUP","","",N,N],[17,"IPV6_LEAVE_GROUP","","",N,N],[17,"IPV6_PKTINFO","","",N,N],[17,"IPV6_RECVPKTINFO","","",N,N],[17,"TCP_NODELAY","","",N,N],[17,"TCP_KEEPALIVE","","",N,N],[17,"SOL_LOCAL","","",N,N],[17,"LOCAL_PEERCRED","","",N,N],[17,"LOCAL_PEERPID","","",N,N],[17,"LOCAL_PEEREPID","","",N,N],[17,"LOCAL_PEERUUID","","",N,N],[17,"LOCAL_PEEREUUID","","",N,N],[17,"SOL_SOCKET","","",N,N],[17,"SO_DEBUG","","",N,N],[17,"SO_ACCEPTCONN","","",N,N],[17,"SO_REUSEADDR","","",N,N],[17,"SO_KEEPALIVE","","",N,N],[17,"SO_DONTROUTE","","",N,N],[17,"SO_BROADCAST","","",N,N],[17,"SO_USELOOPBACK","","",N,N],[17,"SO_LINGER","","",N,N],[17,"SO_OOBINLINE","","",N,N],[17,"SO_REUSEPORT","","",N,N],[17,"SO_TIMESTAMP","","",N,N],[17,"SO_TIMESTAMP_MONOTONIC","","",N,N],[17,"SO_DONTTRUNC","","",N,N],[17,"SO_WANTMORE","","",N,N],[17,"SO_WANTOOBFLAG","","",N,N],[17,"SO_SNDBUF","","",N,N],[17,"SO_RCVBUF","","",N,N],[17,"SO_SNDLOWAT","","",N,N],[17,"SO_RCVLOWAT","","",N,N],[17,"SO_SNDTIMEO","","",N,N],[17,"SO_RCVTIMEO","","",N,N],[17,"SO_ERROR","","",N,N],[17,"SO_TYPE","","",N,N],[17,"SO_LABEL","","",N,N],[17,"SO_PEERLABEL","","",N,N],[17,"SO_NREAD","","",N,N],[17,"SO_NKE","","",N,N],[17,"SO_NOSIGPIPE","","",N,N],[17,"SO_NOADDRERR","","",N,N],[17,"SO_NWRITE","","",N,N],[17,"SO_REUSESHAREUID","","",N,N],[17,"SO_NOTIFYCONFLICT","","",N,N],[17,"SO_RANDOMPORT","","",N,N],[17,"SO_NP_EXTENSIONS","","",N,N],[17,"MSG_OOB","","",N,N],[17,"MSG_PEEK","","",N,N],[17,"MSG_DONTROUTE","","",N,N],[17,"MSG_EOR","","",N,N],[17,"MSG_TRUNC","","",N,N],[17,"MSG_CTRUNC","","",N,N],[17,"MSG_WAITALL","","",N,N],[17,"MSG_DONTWAIT","","",N,N],[17,"MSG_EOF","","",N,N],[17,"MSG_FLUSH","","",N,N],[17,"MSG_HOLD","","",N,N],[17,"MSG_SEND","","",N,N],[17,"MSG_HAVEMORE","","",N,N],[17,"MSG_RCVMORE","","",N,N],[17,"SCM_TIMESTAMP","","",N,N],[17,"SCM_CREDS","","",N,N],[17,"IFF_UP","","",N,N],[17,"IFF_BROADCAST","","",N,N],[17,"IFF_DEBUG","","",N,N],[17,"IFF_LOOPBACK","","",N,N],[17,"IFF_POINTOPOINT","","",N,N],[17,"IFF_NOTRAILERS","","",N,N],[17,"IFF_RUNNING","","",N,N],[17,"IFF_NOARP","","",N,N],[17,"IFF_PROMISC","","",N,N],[17,"IFF_ALLMULTI","","",N,N],[17,"IFF_OACTIVE","","",N,N],[17,"IFF_SIMPLEX","","",N,N],[17,"IFF_LINK0","","",N,N],[17,"IFF_LINK1","","",N,N],[17,"IFF_LINK2","","",N,N],[17,"IFF_ALTPHYS","","",N,N],[17,"IFF_MULTICAST","","",N,N],[17,"SHUT_RD","","",N,N],[17,"SHUT_WR","","",N,N],[17,"SHUT_RDWR","","",N,N],[17,"LOCK_SH","","",N,N],[17,"LOCK_EX","","",N,N],[17,"LOCK_NB","","",N,N],[17,"LOCK_UN","","",N,N],[17,"MAP_COPY","","",N,N],[17,"MAP_RENAME","","",N,N],[17,"MAP_NORESERVE","","",N,N],[17,"MAP_NOEXTEND","","",N,N],[17,"MAP_HASSEMAPHORE","","",N,N],[17,"MAP_NOCACHE","","",N,N],[17,"MAP_JIT","","",N,N],[17,"_SC_ARG_MAX","","",N,N],[17,"_SC_CHILD_MAX","","",N,N],[17,"_SC_CLK_TCK","","",N,N],[17,"_SC_NGROUPS_MAX","","",N,N],[17,"_SC_OPEN_MAX","","",N,N],[17,"_SC_JOB_CONTROL","","",N,N],[17,"_SC_SAVED_IDS","","",N,N],[17,"_SC_VERSION","","",N,N],[17,"_SC_BC_BASE_MAX","","",N,N],[17,"_SC_BC_DIM_MAX","","",N,N],[17,"_SC_BC_SCALE_MAX","","",N,N],[17,"_SC_BC_STRING_MAX","","",N,N],[17,"_SC_COLL_WEIGHTS_MAX","","",N,N],[17,"_SC_EXPR_NEST_MAX","","",N,N],[17,"_SC_LINE_MAX","","",N,N],[17,"_SC_RE_DUP_MAX","","",N,N],[17,"_SC_2_VERSION","","",N,N],[17,"_SC_2_C_BIND","","",N,N],[17,"_SC_2_C_DEV","","",N,N],[17,"_SC_2_CHAR_TERM","","",N,N],[17,"_SC_2_FORT_DEV","","",N,N],[17,"_SC_2_FORT_RUN","","",N,N],[17,"_SC_2_LOCALEDEF","","",N,N],[17,"_SC_2_SW_DEV","","",N,N],[17,"_SC_2_UPE","","",N,N],[17,"_SC_STREAM_MAX","","",N,N],[17,"_SC_TZNAME_MAX","","",N,N],[17,"_SC_ASYNCHRONOUS_IO","","",N,N],[17,"_SC_PAGESIZE","","",N,N],[17,"_SC_MEMLOCK","","",N,N],[17,"_SC_MEMLOCK_RANGE","","",N,N],[17,"_SC_MEMORY_PROTECTION","","",N,N],[17,"_SC_MESSAGE_PASSING","","",N,N],[17,"_SC_PRIORITIZED_IO","","",N,N],[17,"_SC_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_REALTIME_SIGNALS","","",N,N],[17,"_SC_SEMAPHORES","","",N,N],[17,"_SC_FSYNC","","",N,N],[17,"_SC_SHARED_MEMORY_OBJECTS","","",N,N],[17,"_SC_SYNCHRONIZED_IO","","",N,N],[17,"_SC_TIMERS","","",N,N],[17,"_SC_AIO_LISTIO_MAX","","",N,N],[17,"_SC_AIO_MAX","","",N,N],[17,"_SC_AIO_PRIO_DELTA_MAX","","",N,N],[17,"_SC_DELAYTIMER_MAX","","",N,N],[17,"_SC_MQ_OPEN_MAX","","",N,N],[17,"_SC_MAPPED_FILES","","",N,N],[17,"_SC_RTSIG_MAX","","",N,N],[17,"_SC_SEM_NSEMS_MAX","","",N,N],[17,"_SC_SEM_VALUE_MAX","","",N,N],[17,"_SC_SIGQUEUE_MAX","","",N,N],[17,"_SC_TIMER_MAX","","",N,N],[17,"_SC_NPROCESSORS_CONF","","",N,N],[17,"_SC_NPROCESSORS_ONLN","","",N,N],[17,"_SC_2_PBS","","",N,N],[17,"_SC_2_PBS_ACCOUNTING","","",N,N],[17,"_SC_2_PBS_CHECKPOINT","","",N,N],[17,"_SC_2_PBS_LOCATE","","",N,N],[17,"_SC_2_PBS_MESSAGE","","",N,N],[17,"_SC_2_PBS_TRACK","","",N,N],[17,"_SC_ADVISORY_INFO","","",N,N],[17,"_SC_BARRIERS","","",N,N],[17,"_SC_CLOCK_SELECTION","","",N,N],[17,"_SC_CPUTIME","","",N,N],[17,"_SC_FILE_LOCKING","","",N,N],[17,"_SC_HOST_NAME_MAX","","",N,N],[17,"_SC_MONOTONIC_CLOCK","","",N,N],[17,"_SC_READER_WRITER_LOCKS","","",N,N],[17,"_SC_REGEXP","","",N,N],[17,"_SC_SHELL","","",N,N],[17,"_SC_SPAWN","","",N,N],[17,"_SC_SPIN_LOCKS","","",N,N],[17,"_SC_SPORADIC_SERVER","","",N,N],[17,"_SC_THREAD_CPUTIME","","",N,N],[17,"_SC_THREAD_SPORADIC_SERVER","","",N,N],[17,"_SC_TIMEOUTS","","",N,N],[17,"_SC_TRACE","","",N,N],[17,"_SC_TRACE_EVENT_FILTER","","",N,N],[17,"_SC_TRACE_INHERIT","","",N,N],[17,"_SC_TRACE_LOG","","",N,N],[17,"_SC_TYPED_MEMORY_OBJECTS","","",N,N],[17,"_SC_V6_ILP32_OFF32","","",N,N],[17,"_SC_V6_ILP32_OFFBIG","","",N,N],[17,"_SC_V6_LP64_OFF64","","",N,N],[17,"_SC_V6_LPBIG_OFFBIG","","",N,N],[17,"_SC_IPV6","","",N,N],[17,"_SC_RAW_SOCKETS","","",N,N],[17,"_SC_SYMLOOP_MAX","","",N,N],[17,"_SC_PAGE_SIZE","","",N,N],[17,"_SC_XOPEN_STREAMS","","",N,N],[17,"_SC_XBS5_ILP32_OFF32","","",N,N],[17,"_SC_XBS5_ILP32_OFFBIG","","",N,N],[17,"_SC_XBS5_LP64_OFF64","","",N,N],[17,"_SC_XBS5_LPBIG_OFFBIG","","",N,N],[17,"_SC_SS_REPL_MAX","","",N,N],[17,"_SC_TRACE_EVENT_NAME_MAX","","",N,N],[17,"_SC_TRACE_NAME_MAX","","",N,N],[17,"_SC_TRACE_SYS_MAX","","",N,N],[17,"_SC_TRACE_USER_EVENT_MAX","","",N,N],[17,"_SC_PASS_MAX","","",N,N],[17,"PTHREAD_MUTEX_NORMAL","","",N,N],[17,"PTHREAD_MUTEX_ERRORCHECK","","",N,N],[17,"PTHREAD_MUTEX_RECURSIVE","","",N,N],[17,"PTHREAD_MUTEX_DEFAULT","","",N,N],[17,"_PTHREAD_MUTEX_SIG_init","","",N,N],[17,"_PTHREAD_COND_SIG_init","","",N,N],[17,"_PTHREAD_RWLOCK_SIG_init","","",N,N],[17,"PTHREAD_MUTEX_INITIALIZER","","",N,N],[17,"PTHREAD_COND_INITIALIZER","","",N,N],[17,"PTHREAD_RWLOCK_INITIALIZER","","",N,N],[17,"SIGSTKSZ","","",N,N],[17,"FD_SETSIZE","","",N,N],[17,"ST_NOSUID","","",N,N],[17,"EVFILT_READ","","",N,N],[17,"EVFILT_WRITE","","",N,N],[17,"EVFILT_AIO","","",N,N],[17,"EVFILT_VNODE","","",N,N],[17,"EVFILT_PROC","","",N,N],[17,"EVFILT_SIGNAL","","",N,N],[17,"EVFILT_TIMER","","",N,N],[17,"EVFILT_MACHPORT","","",N,N],[17,"EVFILT_FS","","",N,N],[17,"EVFILT_USER","","",N,N],[17,"EVFILT_VM","","",N,N],[17,"EV_ADD","","",N,N],[17,"EV_DELETE","","",N,N],[17,"EV_ENABLE","","",N,N],[17,"EV_DISABLE","","",N,N],[17,"EV_ONESHOT","","",N,N],[17,"EV_CLEAR","","",N,N],[17,"EV_RECEIPT","","",N,N],[17,"EV_DISPATCH","","",N,N],[17,"EV_FLAG0","","",N,N],[17,"EV_POLL","","",N,N],[17,"EV_FLAG1","","",N,N],[17,"EV_OOBAND","","",N,N],[17,"EV_ERROR","","",N,N],[17,"EV_EOF","","",N,N],[17,"EV_SYSFLAGS","","",N,N],[17,"NOTE_TRIGGER","","",N,N],[17,"NOTE_FFNOP","","",N,N],[17,"NOTE_FFAND","","",N,N],[17,"NOTE_FFOR","","",N,N],[17,"NOTE_FFCOPY","","",N,N],[17,"NOTE_FFCTRLMASK","","",N,N],[17,"NOTE_FFLAGSMASK","","",N,N],[17,"NOTE_LOWAT","","",N,N],[17,"NOTE_DELETE","","",N,N],[17,"NOTE_WRITE","","",N,N],[17,"NOTE_EXTEND","","",N,N],[17,"NOTE_ATTRIB","","",N,N],[17,"NOTE_LINK","","",N,N],[17,"NOTE_RENAME","","",N,N],[17,"NOTE_REVOKE","","",N,N],[17,"NOTE_NONE","","",N,N],[17,"NOTE_EXIT","","",N,N],[17,"NOTE_FORK","","",N,N],[17,"NOTE_EXEC","","",N,N],[17,"NOTE_REAP","","",N,N],[17,"NOTE_SIGNAL","","",N,N],[17,"NOTE_EXITSTATUS","","",N,N],[17,"NOTE_EXIT_DETAIL","","",N,N],[17,"NOTE_PDATAMASK","","",N,N],[17,"NOTE_PCTRLMASK","","",N,N],[17,"NOTE_EXIT_REPARENTED","","",N,N],[17,"NOTE_EXIT_DETAIL_MASK","","",N,N],[17,"NOTE_EXIT_DECRYPTFAIL","","",N,N],[17,"NOTE_EXIT_MEMORY","","",N,N],[17,"NOTE_EXIT_CSERROR","","",N,N],[17,"NOTE_VM_PRESSURE","","",N,N],[17,"NOTE_VM_PRESSURE_TERMINATE","","",N,N],[17,"NOTE_VM_PRESSURE_SUDDEN_TERMINATE","","",N,N],[17,"NOTE_VM_ERROR","","",N,N],[17,"NOTE_SECONDS","","",N,N],[17,"NOTE_USECONDS","","",N,N],[17,"NOTE_NSECONDS","","",N,N],[17,"NOTE_ABSOLUTE","","",N,N],[17,"NOTE_LEEWAY","","",N,N],[17,"NOTE_CRITICAL","","",N,N],[17,"NOTE_BACKGROUND","","",N,N],[17,"NOTE_TRACK","","",N,N],[17,"NOTE_TRACKERR","","",N,N],[17,"NOTE_CHILD","","",N,N],[17,"OCRNL","","",N,N],[17,"ONOCR","","",N,N],[17,"ONLRET","","",N,N],[17,"OFILL","","",N,N],[17,"NLDLY","","",N,N],[17,"TABDLY","","",N,N],[17,"CRDLY","","",N,N],[17,"FFDLY","","",N,N],[17,"BSDLY","","",N,N],[17,"VTDLY","","",N,N],[17,"OFDEL","","",N,N],[17,"NL0","","",N,N],[17,"NL1","","",N,N],[17,"TAB0","","",N,N],[17,"TAB1","","",N,N],[17,"TAB2","","",N,N],[17,"CR0","","",N,N],[17,"CR1","","",N,N],[17,"CR2","","",N,N],[17,"CR3","","",N,N],[17,"FF0","","",N,N],[17,"FF1","","",N,N],[17,"BS0","","",N,N],[17,"BS1","","",N,N],[17,"TAB3","","",N,N],[17,"VT0","","",N,N],[17,"VT1","","",N,N],[17,"IUTF8","","",N,N],[17,"CRTSCTS","","",N,N],[17,"NI_MAXHOST","","",N,N],[17,"Q_GETQUOTA","","",N,N],[17,"Q_SETQUOTA","","",N,N],[17,"RTLD_LOCAL","","",N,N],[17,"RTLD_FIRST","","",N,N],[17,"RTLD_NODELETE","","",N,N],[17,"RTLD_NOLOAD","","",N,N],[17,"RTLD_GLOBAL","","",N,N],[17,"_WSTOPPED","","",N,N],[17,"LOG_NETINFO","","",N,N],[17,"LOG_REMOTEAUTH","","",N,N],[17,"LOG_INSTALL","","",N,N],[17,"LOG_RAS","","",N,N],[17,"LOG_LAUNCHD","","",N,N],[17,"LOG_NFACILITIES","","",N,N],[17,"CTLTYPE","","",N,N],[17,"CTLTYPE_NODE","","",N,N],[17,"CTLTYPE_INT","","",N,N],[17,"CTLTYPE_STRING","","",N,N],[17,"CTLTYPE_QUAD","","",N,N],[17,"CTLTYPE_OPAQUE","","",N,N],[17,"CTLTYPE_STRUCT","","",N,N],[17,"CTLFLAG_RD","","",N,N],[17,"CTLFLAG_WR","","",N,N],[17,"CTLFLAG_RW","","",N,N],[17,"CTLFLAG_NOLOCK","","",N,N],[17,"CTLFLAG_ANYBODY","","",N,N],[17,"CTLFLAG_SECURE","","",N,N],[17,"CTLFLAG_MASKED","","",N,N],[17,"CTLFLAG_NOAUTO","","",N,N],[17,"CTLFLAG_KERN","","",N,N],[17,"CTLFLAG_LOCKED","","",N,N],[17,"CTLFLAG_OID2","","",N,N],[17,"CTL_UNSPEC","","",N,N],[17,"CTL_KERN","","",N,N],[17,"CTL_VM","","",N,N],[17,"CTL_VFS","","",N,N],[17,"CTL_NET","","",N,N],[17,"CTL_DEBUG","","",N,N],[17,"CTL_HW","","",N,N],[17,"CTL_MACHDEP","","",N,N],[17,"CTL_USER","","",N,N],[17,"CTL_MAXID","","",N,N],[17,"KERN_OSTYPE","","",N,N],[17,"KERN_OSRELEASE","","",N,N],[17,"KERN_OSREV","","",N,N],[17,"KERN_VERSION","","",N,N],[17,"KERN_MAXVNODES","","",N,N],[17,"KERN_MAXPROC","","",N,N],[17,"KERN_MAXFILES","","",N,N],[17,"KERN_ARGMAX","","",N,N],[17,"KERN_SECURELVL","","",N,N],[17,"KERN_HOSTNAME","","",N,N],[17,"KERN_HOSTID","","",N,N],[17,"KERN_CLOCKRATE","","",N,N],[17,"KERN_VNODE","","",N,N],[17,"KERN_PROC","","",N,N],[17,"KERN_FILE","","",N,N],[17,"KERN_PROF","","",N,N],[17,"KERN_POSIX1","","",N,N],[17,"KERN_NGROUPS","","",N,N],[17,"KERN_JOB_CONTROL","","",N,N],[17,"KERN_SAVED_IDS","","",N,N],[17,"KERN_BOOTTIME","","",N,N],[17,"KERN_NISDOMAINNAME","","",N,N],[17,"KERN_DOMAINNAME","","",N,N],[17,"KERN_MAXPARTITIONS","","",N,N],[17,"KERN_KDEBUG","","",N,N],[17,"KERN_UPDATEINTERVAL","","",N,N],[17,"KERN_OSRELDATE","","",N,N],[17,"KERN_NTP_PLL","","",N,N],[17,"KERN_BOOTFILE","","",N,N],[17,"KERN_MAXFILESPERPROC","","",N,N],[17,"KERN_MAXPROCPERUID","","",N,N],[17,"KERN_DUMPDEV","","",N,N],[17,"KERN_IPC","","",N,N],[17,"KERN_DUMMY","","",N,N],[17,"KERN_PS_STRINGS","","",N,N],[17,"KERN_USRSTACK32","","",N,N],[17,"KERN_LOGSIGEXIT","","",N,N],[17,"KERN_SYMFILE","","",N,N],[17,"KERN_PROCARGS","","",N,N],[17,"KERN_NETBOOT","","",N,N],[17,"KERN_SYSV","","",N,N],[17,"KERN_AFFINITY","","",N,N],[17,"KERN_TRANSLATE","","",N,N],[17,"KERN_CLASSIC","","",N,N],[17,"KERN_EXEC","","",N,N],[17,"KERN_CLASSICHANDLER","","",N,N],[17,"KERN_AIOMAX","","",N,N],[17,"KERN_AIOPROCMAX","","",N,N],[17,"KERN_AIOTHREADS","","",N,N],[17,"KERN_COREFILE","","",N,N],[17,"KERN_COREDUMP","","",N,N],[17,"KERN_SUGID_COREDUMP","","",N,N],[17,"KERN_PROCDELAYTERM","","",N,N],[17,"KERN_SHREG_PRIVATIZABLE","","",N,N],[17,"KERN_LOW_PRI_WINDOW","","",N,N],[17,"KERN_LOW_PRI_DELAY","","",N,N],[17,"KERN_POSIX","","",N,N],[17,"KERN_USRSTACK64","","",N,N],[17,"KERN_NX_PROTECTION","","",N,N],[17,"KERN_TFP","","",N,N],[17,"KERN_PROCNAME","","",N,N],[17,"KERN_THALTSTACK","","",N,N],[17,"KERN_SPECULATIVE_READS","","",N,N],[17,"KERN_OSVERSION","","",N,N],[17,"KERN_SAFEBOOT","","",N,N],[17,"KERN_RAGEVNODE","","",N,N],[17,"KERN_TTY","","",N,N],[17,"KERN_CHECKOPENEVT","","",N,N],[17,"KERN_THREADNAME","","",N,N],[17,"KERN_MAXID","","",N,N],[17,"KERN_RAGE_PROC","","",N,N],[17,"KERN_RAGE_THREAD","","",N,N],[17,"KERN_UNRAGE_PROC","","",N,N],[17,"KERN_UNRAGE_THREAD","","",N,N],[17,"KERN_OPENEVT_PROC","","",N,N],[17,"KERN_UNOPENEVT_PROC","","",N,N],[17,"KERN_TFP_POLICY","","",N,N],[17,"KERN_TFP_POLICY_DENY","","",N,N],[17,"KERN_TFP_POLICY_DEFAULT","","",N,N],[17,"KERN_KDEFLAGS","","",N,N],[17,"KERN_KDDFLAGS","","",N,N],[17,"KERN_KDENABLE","","",N,N],[17,"KERN_KDSETBUF","","",N,N],[17,"KERN_KDGETBUF","","",N,N],[17,"KERN_KDSETUP","","",N,N],[17,"KERN_KDREMOVE","","",N,N],[17,"KERN_KDSETREG","","",N,N],[17,"KERN_KDGETREG","","",N,N],[17,"KERN_KDREADTR","","",N,N],[17,"KERN_KDPIDTR","","",N,N],[17,"KERN_KDTHRMAP","","",N,N],[17,"KERN_KDPIDEX","","",N,N],[17,"KERN_KDSETRTCDEC","","",N,N],[17,"KERN_KDGETENTROPY","","",N,N],[17,"KERN_KDWRITETR","","",N,N],[17,"KERN_KDWRITEMAP","","",N,N],[17,"KERN_KDENABLE_BG_TRACE","","",N,N],[17,"KERN_KDDISABLE_BG_TRACE","","",N,N],[17,"KERN_KDREADCURTHRMAP","","",N,N],[17,"KERN_KDSET_TYPEFILTER","","",N,N],[17,"KERN_KDBUFWAIT","","",N,N],[17,"KERN_KDCPUMAP","","",N,N],[17,"KERN_PROC_ALL","","",N,N],[17,"KERN_PROC_PID","","",N,N],[17,"KERN_PROC_PGRP","","",N,N],[17,"KERN_PROC_SESSION","","",N,N],[17,"KERN_PROC_TTY","","",N,N],[17,"KERN_PROC_UID","","",N,N],[17,"KERN_PROC_RUID","","",N,N],[17,"KERN_PROC_LCID","","",N,N],[17,"KIPC_MAXSOCKBUF","","",N,N],[17,"KIPC_SOCKBUF_WASTE","","",N,N],[17,"KIPC_SOMAXCONN","","",N,N],[17,"KIPC_MAX_LINKHDR","","",N,N],[17,"KIPC_MAX_PROTOHDR","","",N,N],[17,"KIPC_MAX_HDR","","",N,N],[17,"KIPC_MAX_DATALEN","","",N,N],[17,"KIPC_MBSTAT","","",N,N],[17,"KIPC_NMBCLUSTERS","","",N,N],[17,"KIPC_SOQLIMITCOMPAT","","",N,N],[17,"VM_METER","","",N,N],[17,"VM_LOADAVG","","",N,N],[17,"VM_MACHFACTOR","","",N,N],[17,"VM_SWAPUSAGE","","",N,N],[17,"VM_MAXID","","",N,N],[17,"HW_MACHINE","","",N,N],[17,"HW_MODEL","","",N,N],[17,"HW_NCPU","","",N,N],[17,"HW_BYTEORDER","","",N,N],[17,"HW_PHYSMEM","","",N,N],[17,"HW_USERMEM","","",N,N],[17,"HW_PAGESIZE","","",N,N],[17,"HW_DISKNAMES","","",N,N],[17,"HW_DISKSTATS","","",N,N],[17,"HW_EPOCH","","",N,N],[17,"HW_FLOATINGPT","","",N,N],[17,"HW_MACHINE_ARCH","","",N,N],[17,"HW_VECTORUNIT","","",N,N],[17,"HW_BUS_FREQ","","",N,N],[17,"HW_CPU_FREQ","","",N,N],[17,"HW_CACHELINE","","",N,N],[17,"HW_L1ICACHESIZE","","",N,N],[17,"HW_L1DCACHESIZE","","",N,N],[17,"HW_L2SETTINGS","","",N,N],[17,"HW_L2CACHESIZE","","",N,N],[17,"HW_L3SETTINGS","","",N,N],[17,"HW_L3CACHESIZE","","",N,N],[17,"HW_TB_FREQ","","",N,N],[17,"HW_MEMSIZE","","",N,N],[17,"HW_AVAILCPU","","",N,N],[17,"HW_MAXID","","",N,N],[17,"USER_CS_PATH","","",N,N],[17,"USER_BC_BASE_MAX","","",N,N],[17,"USER_BC_DIM_MAX","","",N,N],[17,"USER_BC_SCALE_MAX","","",N,N],[17,"USER_BC_STRING_MAX","","",N,N],[17,"USER_COLL_WEIGHTS_MAX","","",N,N],[17,"USER_EXPR_NEST_MAX","","",N,N],[17,"USER_LINE_MAX","","",N,N],[17,"USER_RE_DUP_MAX","","",N,N],[17,"USER_POSIX2_VERSION","","",N,N],[17,"USER_POSIX2_C_BIND","","",N,N],[17,"USER_POSIX2_C_DEV","","",N,N],[17,"USER_POSIX2_CHAR_TERM","","",N,N],[17,"USER_POSIX2_FORT_DEV","","",N,N],[17,"USER_POSIX2_FORT_RUN","","",N,N],[17,"USER_POSIX2_LOCALEDEF","","",N,N],[17,"USER_POSIX2_SW_DEV","","",N,N],[17,"USER_POSIX2_UPE","","",N,N],[17,"USER_STREAM_MAX","","",N,N],[17,"USER_TZNAME_MAX","","",N,N],[17,"USER_MAXID","","",N,N],[17,"CTL_DEBUG_NAME","","",N,N],[17,"CTL_DEBUG_VALUE","","",N,N],[17,"CTL_DEBUG_MAXID","","",N,N],[17,"PRIO_DARWIN_THREAD","","",N,N],[17,"PRIO_DARWIN_PROCESS","","",N,N],[17,"PRIO_DARWIN_BG","","",N,N],[17,"PRIO_DARWIN_NONUI","","",N,N],[17,"SEM_FAILED","","",N,N],[17,"SIGEV_NONE","","",N,N],[17,"SIGEV_SIGNAL","","",N,N],[17,"SIGEV_THREAD","","",N,N],[17,"AIO_CANCELED","","",N,N],[17,"AIO_NOTCANCELED","","",N,N],[17,"AIO_ALLDONE","","",N,N],[17,"AIO_LISTIO_MAX","","",N,N],[17,"LIO_NOP","","",N,N],[17,"LIO_WRITE","","",N,N],[17,"LIO_READ","","",N,N],[17,"LIO_WAIT","","",N,N],[17,"LIO_NOWAIT","","",N,N],[17,"WEXITED","","",N,N],[17,"WSTOPPED","","",N,N],[17,"WCONTINUED","","",N,N],[17,"WNOWAIT","","",N,N],[17,"P_ALL","","",N,N],[17,"P_PID","","",N,N],[17,"P_PGID","","",N,N],[17,"XATTR_NOFOLLOW","","",N,N],[17,"XATTR_CREATE","","",N,N],[17,"XATTR_REPLACE","","",N,N],[17,"XATTR_NOSECURITY","","",N,N],[17,"XATTR_NODEFAULT","","",N,N],[17,"XATTR_SHOWCOMPRESSION","","",N,N],[17,"NET_RT_IFLIST2","","",N,N],[17,"RTF_UP","","",N,N],[17,"RTF_GATEWAY","","",N,N],[17,"RTF_HOST","","",N,N],[17,"RTF_REJECT","","",N,N],[17,"RTF_DYNAMIC","","",N,N],[17,"RTF_MODIFIED","","",N,N],[17,"RTF_DONE","","",N,N],[17,"RTF_DELCLONE","","",N,N],[17,"RTF_CLONING","","",N,N],[17,"RTF_XRESOLVE","","",N,N],[17,"RTF_LLINFO","","",N,N],[17,"RTF_STATIC","","",N,N],[17,"RTF_BLACKHOLE","","",N,N],[17,"RTF_NOIFREF","","",N,N],[17,"RTF_PROTO2","","",N,N],[17,"RTF_PROTO1","","",N,N],[17,"RTF_PRCLONING","","",N,N],[17,"RTF_WASCLONED","","",N,N],[17,"RTF_PROTO3","","",N,N],[17,"RTF_PINNED","","",N,N],[17,"RTF_LOCAL","","",N,N],[17,"RTF_BROADCAST","","",N,N],[17,"RTF_MULTICAST","","",N,N],[17,"RTF_IFSCOPE","","",N,N],[17,"RTF_CONDEMNED","","",N,N],[17,"RTF_IFREF","","",N,N],[17,"RTF_PROXY","","",N,N],[17,"RTF_ROUTER","","",N,N],[17,"RTM_VERSION","","",N,N],[17,"RTM_ADD","","",N,N],[17,"RTM_DELETE","","",N,N],[17,"RTM_CHANGE","","",N,N],[17,"RTM_GET","","",N,N],[17,"RTM_LOSING","","",N,N],[17,"RTM_REDIRECT","","",N,N],[17,"RTM_MISS","","",N,N],[17,"RTM_LOCK","","",N,N],[17,"RTM_OLDADD","","",N,N],[17,"RTM_OLDDEL","","",N,N],[17,"RTM_RESOLVE","","",N,N],[17,"RTM_NEWADDR","","",N,N],[17,"RTM_DELADDR","","",N,N],[17,"RTM_IFINFO","","",N,N],[17,"RTM_NEWMADDR","","",N,N],[17,"RTM_DELMADDR","","",N,N],[17,"RTM_IFINFO2","","",N,N],[17,"RTM_NEWMADDR2","","",N,N],[17,"RTM_GET2","","",N,N],[17,"RTV_MTU","","",N,N],[17,"RTV_HOPCOUNT","","",N,N],[17,"RTV_EXPIRE","","",N,N],[17,"RTV_RPIPE","","",N,N],[17,"RTV_SPIPE","","",N,N],[17,"RTV_SSTHRESH","","",N,N],[17,"RTV_RTT","","",N,N],[17,"RTV_RTTVAR","","",N,N],[17,"RTA_DST","","",N,N],[17,"RTA_GATEWAY","","",N,N],[17,"RTA_NETMASK","","",N,N],[17,"RTA_GENMASK","","",N,N],[17,"RTA_IFP","","",N,N],[17,"RTA_IFA","","",N,N],[17,"RTA_AUTHOR","","",N,N],[17,"RTA_BRD","","",N,N],[17,"RTAX_DST","","",N,N],[17,"RTAX_GATEWAY","","",N,N],[17,"RTAX_NETMASK","","",N,N],[17,"RTAX_GENMASK","","",N,N],[17,"RTAX_IFP","","",N,N],[17,"RTAX_IFA","","",N,N],[17,"RTAX_AUTHOR","","",N,N],[17,"RTAX_BRD","","",N,N],[17,"RTAX_MAX","","",N,N],[17,"KERN_PROCARGS2","","",N,N],[17,"PROC_PIDTASKALLINFO","","",N,N],[17,"PROC_PIDTASKINFO","","",N,N],[17,"PROC_PIDTHREADINFO","","",N,N],[17,"MAXCOMLEN","","",N,N],[17,"MAXTHREADNAMESIZE","","",N,N],[17,"XUCRED_VERSION","","",N,N],[17,"LC_SEGMENT","","",N,N],[17,"LC_SEGMENT_64","","",N,N],[17,"MH_MAGIC","","",N,N],[17,"MH_MAGIC_64","","",N,N],[17,"UTUN_OPT_FLAGS","","",N,N],[17,"UTUN_OPT_IFNAME","","",N,N],[17,"DLT_NULL","","",N,N],[17,"DLT_EN10MB","","",N,N],[17,"DLT_EN3MB","","",N,N],[17,"DLT_AX25","","",N,N],[17,"DLT_PRONET","","",N,N],[17,"DLT_CHAOS","","",N,N],[17,"DLT_IEEE802","","",N,N],[17,"DLT_ARCNET","","",N,N],[17,"DLT_SLIP","","",N,N],[17,"DLT_PPP","","",N,N],[17,"DLT_FDDI","","",N,N],[17,"DLT_ATM_RFC1483","","",N,N],[17,"DLT_RAW","","",N,N],[17,"DLT_LOOP","","",N,N],[17,"BPF_ALIGNMENT","","",N,N],[17,"POSIX_SPAWN_RESETIDS","","",N,N],[17,"POSIX_SPAWN_SETPGROUP","","",N,N],[17,"POSIX_SPAWN_SETSIGDEF","","",N,N],[17,"POSIX_SPAWN_SETSIGMASK","","",N,N],[17,"IPC_CREAT","","",N,N],[17,"IPC_EXCL","","",N,N],[17,"IPC_NOWAIT","","",N,N],[17,"IPC_PRIVATE","","",N,N],[17,"IPC_RMID","","",N,N],[17,"IPC_SET","","",N,N],[17,"IPC_STAT","","",N,N],[17,"IPC_R","","",N,N],[17,"IPC_W","","",N,N],[17,"IPC_M","","",N,N],[17,"SHM_RDONLY","","",N,N],[17,"SHM_RND","","",N,N],[17,"SHMLBA","","",N,N],[17,"SHM_R","","",N,N],[17,"SHM_W","","",N,N],[17,"__PTHREAD_MUTEX_SIZE__","","",N,N],[17,"__PTHREAD_COND_SIZE__","","",N,N],[17,"__PTHREAD_CONDATTR_SIZE__","","",N,N],[17,"__PTHREAD_RWLOCK_SIZE__","","",N,N],[17,"__PTHREAD_RWLOCKATTR_SIZE__","","",N,N],[17,"TIOCTIMESTAMP","","",N,N],[17,"TIOCDCDTIMESTAMP","","",N,N],[17,"FIONREAD","","",N,N]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"cmsghdr"],[3,"if_nameindex"],[3,"aiocb"],[3,"utmpx"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"if_msghdr"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"lconv"],[3,"sigevent"],[3,"proc_taskinfo"],[3,"proc_bsdinfo"],[3,"proc_taskallinfo"],[3,"proc_threadinfo"],[3,"xsw_usage"],[3,"xucred"],[3,"mach_header"],[3,"mach_header_64"],[3,"segment_command"],[3,"segment_command_64"],[3,"load_command"],[3,"sockaddr_dl"],[3,"sockaddr_inarp"],[3,"sockaddr_ctl"],[3,"in_pktinfo"],[3,"in6_pktinfo"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"timeval32"],[3,"if_data"],[3,"bpf_hdr"],[3,"pthread_attr_t"],[3,"pthread_mutex_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"pthread_rwlock_t"],[3,"pthread_rwlockattr_t"],[3,"fd_set"],[3,"fsid_t"]]};
searchIndex["log"]={"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message.",N,N],[3,"LogMetadata","","Metadata about a log message.",N,N],[3,"LogLocation","","The location of a log message.",N,N],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",N,N],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",N,N],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",N,N],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",N,N],[13,"Error","","The \"error\" level.",0,N],[13,"Warn","","The \"warn\" level.",0,N],[13,"Info","","The \"info\" level.",0,N],[13,"Debug","","The \"debug\" level.",0,N],[13,"Trace","","The \"trace\" level.",0,N],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",N,N],[13,"Off","","A level lower than all log levels.",1,N],[13,"Error","","Corresponds to the `Error` log level.",1,N],[13,"Warn","","Corresponds to the `Warn` log level.",1,N],[13,"Info","","Corresponds to the `Info` log level.",1,N],[13,"Debug","","Corresponds to the `Debug` log level.",1,N],[13,"Trace","","Corresponds to the `Trace` log level.",1,N],[5,"max_log_level","","Returns the current maximum log level.",N,[[],["loglevelfilter"]]],[5,"set_logger","","Sets the global logger.",N,[[["m"]],["result",["setloggererror"]]]],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",N,[[["m"]],["result",["setloggererror"]]]],[5,"shutdown_logger","","Shuts down the global logger.",N,[[],["result",["box","shutdownloggererror"]]]],[5,"shutdown_logger_raw","","Shuts down the global logger.",N,[[],["result",["shutdownloggererror"]]]],[8,"Log","","A trait encapsulating the operations required of a logger",N,N],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,[[["self"],["logmetadata"]],["bool"]]],[10,"log","","Logs the `LogRecord`.",2,[[["self"],["logrecord"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["loglevel"]]],[11,"eq","","",0,[[["self"],["loglevel"]],["bool"]]],[11,"eq","","",0,[[["self"],["loglevelfilter"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["loglevel"]],["option",["ordering"]]]],[11,"partial_cmp","","",0,[[["self"],["loglevelfilter"]],["option",["ordering"]]]],[11,"cmp","","",0,[[["self"],["loglevel"]],["ordering"]]],[11,"from_str","","",0,[[["str"]],["result",["loglevel"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"max","","Returns the most verbose logging level.",0,[[],["loglevel"]]],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,[[["self"]],["loglevelfilter"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["loglevelfilter"]]],[11,"eq","","",1,[[["self"],["loglevelfilter"]],["bool"]]],[11,"eq","","",1,[[["self"],["loglevel"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["loglevelfilter"]],["option",["ordering"]]]],[11,"partial_cmp","","",1,[[["self"],["loglevel"]],["option",["ordering"]]]],[11,"cmp","","",1,[[["self"],["loglevelfilter"]],["ordering"]]],[11,"from_str","","",1,[[["str"]],["result",["loglevelfilter"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"max","","Returns the most verbose logging level filter.",1,[[],["loglevelfilter"]]],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,[[["self"]],["option",["loglevel"]]]],[11,"args","","The message body.",3,[[["self"]],["arguments"]]],[11,"metadata","","Metadata about the log directive.",3,[[["self"]],["logmetadata"]]],[11,"location","","The location of the log directive.",3,[[["self"]],["loglocation"]]],[11,"level","","The verbosity level of the message.",3,[[["self"]],["loglevel"]]],[11,"target","","The name of the target of the directive.",3,[[["self"]],["str"]]],[11,"level","","The verbosity level of the message.",4,[[["self"]],["loglevel"]]],[11,"target","","The name of the target of the directive.",4,[[["self"]],["str"]]],[11,"clone","","",5,[[["self"]],["loglocation"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"module_path","","The module path of the message.",5,[[["self"]],["str"]]],[11,"file","","The source file containing the message.",5,[[["self"]],["str"]]],[11,"line","","The line containing the message.",5,[[["self"]],["u32"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"get","","Gets the current maximum log level filter.",6,[[["self"]],["loglevelfilter"]]],[11,"set","","Sets the maximum log level.",6,[[["self"],["loglevelfilter"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"description","","",7,[[["self"]],["str"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"description","","",8,[[["self"]],["str"]]],[14,"log","","The standard logging macro.",N,N],[14,"error","","Logs a message at the error level.",N,N],[14,"warn","","Logs a message at the warn level.",N,N],[14,"info","","Logs a message at the info level.",N,N],[14,"debug","","Logs a message at the debug level.",N,N],[14,"trace","","Logs a message at the trace level.",N,N],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",N,N]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["nodrop"]={"doc":"The nodrop crate has the following cargo feature flags:","items":[[3,"NoDrop","nodrop","A type holding T that will not call its destructor on drop",N,N],[11,"new","","Create a new NoDrop.",0,[[["t"]],["nodrop"]]],[11,"into_inner","","Extract the inner value.",0,[[["self"]],["t"]]],[11,"drop","","",0,[[["self"]]]],[11,"deref","","",0,[[["self"]],["t"]]],[11,"deref_mut","","",0,[[["self"]],["t"]]]],"paths":[[3,"NoDrop"]]};
searchIndex["parity_crypto"]={"doc":"Crypto utils used ethstore and network.","items":[[5,"derive_key_iterations","parity_crypto","",N,N],[5,"derive_mac","","",N,N],[5,"is_equal","","",N,N],[0,"aes","","",N,N],[5,"encrypt_128_ctr","parity_crypto::aes","Encrypt a message (CTR mode).",N,N],[5,"decrypt_128_ctr","","Decrypt a message (CTR mode).",N,N],[5,"decrypt_128_cbc","","Decrypt a message (CBC mode).",N,N],[0,"aes_gcm","parity_crypto","",N,N],[3,"Encryptor","parity_crypto::aes_gcm","AES GCM encryptor.",N,N],[3,"Decryptor","","AES GCM decryptor.",N,N],[11,"aes_128_gcm","","",0,N],[11,"aes_256_gcm","","",0,N],[11,"associate","","Optional associated data which is not encrypted but authenticated.",0,N],[11,"offset","","Optional offset value. Only the slice `[offset..]` will be encrypted.",0,[[["self"],["usize"]],["self"]]],[11,"encrypt","","Please note that the pair (key, nonce) must never be reused. Using random nonces limits the number of messages encrypted with the same key to 2^32 (cf. [[1]])",0,N],[11,"aes_128_gcm","","",1,N],[11,"aes_256_gcm","","",1,N],[11,"associate","","Optional associated data which is not encrypted but authenticated.",1,N],[11,"offset","","Optional offset value. Only the slice `[offset..]` will be decrypted.",1,[[["self"],["usize"]],["self"]]],[11,"decrypt","","",1,N],[0,"error","parity_crypto","",N,N],[3,"SymmError","parity_crypto::error","",N,N],[4,"Error","","",N,N],[13,"Scrypt","","",2,N],[13,"Symm","","",2,N],[4,"ScryptError","","",N,N],[13,"InvalidN","","",3,N],[13,"InvalidP","","",3,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"cause","","",2,[[["self"]],["option",["error"]]]],[11,"from","","",2,[[["scrypterror"]],["error"]]],[11,"from","","",2,[[["symmerror"]],["error"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"cause","","",3,[[["self"]],["option",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"description","","",4,[[["self"]],["str"]]],[11,"cause","","",4,[[["self"]],["option",["error"]]]],[11,"from","","",4,[[["unspecified"]],["symmerror"]]],[11,"from","","",4,[[["symmetricciphererror"]],["symmerror"]]],[0,"scrypt","parity_crypto","",N,N],[5,"derive_key","parity_crypto::scrypt","",N,N],[0,"digest","parity_crypto","",N,N],[3,"Digest","parity_crypto::digest","The message digest.",N,N],[3,"Hasher","","Stateful digest computation.",N,N],[4,"Sha256","","",N,N],[4,"Sha512","","",N,N],[4,"Ripemd160","","",N,N],[5,"sha256","","Single-step sha256 digest computation.",N,N],[5,"sha512","","Single-step sha512 digest computation.",N,N],[5,"ripemd160","","Single-step ripemd160 digest computation.",N,N],[11,"deref","","",5,N],[11,"sha256","","",6,[[],["hasher",["sha256"]]]],[11,"sha512","","",6,[[],["hasher",["sha512"]]]],[11,"ripemd160","","",6,[[],["hasher",["ripemd160"]]]],[11,"update","","",6,N],[11,"finish","","",6,[[["self"]],["digest"]]],[0,"hmac","parity_crypto","",N,N],[3,"Signature","parity_crypto::hmac","HMAC signature.",N,N],[3,"SigKey","","HMAC signing key.",N,N],[3,"Signer","","Stateful HMAC computation.",N,N],[3,"VerifyKey","","HMAC signature verification key.",N,N],[5,"sign","","Compute HMAC signature of `data`.",N,N],[5,"verify","","Verify HMAC signature of `data`.",N,N],[11,"deref","","",7,N],[11,"sha256","","",8,N],[11,"sha512","","",8,N],[11,"with","","",9,[[["sigkey"]],["signer"]]],[11,"update","","",9,N],[11,"sign","","",9,[[["self"]],["signature"]]],[11,"sha256","","",10,N],[11,"sha512","","",10,N],[0,"pbkdf2","parity_crypto","",N,N],[3,"Salt","parity_crypto::pbkdf2","",N,N],[12,"0","","",11,N],[3,"Secret","","",N,N],[12,"0","","",12,N],[5,"sha256","","",N,N],[5,"sha512","","",N,N],[17,"KEY_LENGTH","parity_crypto","",N,N],[17,"KEY_ITERATIONS","","",N,N],[17,"KEY_LENGTH_AES","","",N,N],[17,"DEFAULT_MAC","","Default authenticated data to use (in RPC).",N,N],[8,"Keccak256","","",N,N],[10,"keccak256","","",13,[[["self"]],["t"]]]],"paths":[[3,"Encryptor"],[3,"Decryptor"],[4,"Error"],[4,"ScryptError"],[3,"SymmError"],[3,"Digest"],[3,"Hasher"],[3,"Signature"],[3,"SigKey"],[3,"Signer"],[3,"VerifyKey"],[3,"Salt"],[3,"Secret"],[8,"Keccak256"]]};
searchIndex["parity_wordlist"]={"doc":"Parity Brain Wallet Generator.","items":[[4,"Error","parity_wordlist","Phrase Validation Error",N,N],[13,"PhraseTooShort","","Phrase is shorter than it was expected.",0,N],[13,"WordNotFromDictionary","","Phrase contains a word that doesn't come from our dictionary.",0,N],[5,"random_phrase","","Generate a string which is a random phrase of a number of lowercase words.",N,[[["usize"]],["string"]]],[5,"validate_phrase","","Validates given phrase and checks if: 1. All the words are coming from the dictionary. 2. There are at least `expected_no_of_words` in the phrase.",N,[[["str"],["usize"]],["result",["error"]]]],[17,"WORDS","","The list of dictionary words.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["error"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"Error"]]};
searchIndex["proc_macro2"]={"doc":"A \"shim crate\" intended to multiplex the [`proc_macro`] API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","An abstract stream of tokens, or more concretely a sequence of token trees.",N,N],[3,"LexError","","Error returned from `TokenStream::from_str`.",N,N],[3,"Span","","A region of source code, along with macro expansion information.",N,N],[3,"Group","","A delimited token stream.",N,N],[3,"Punct","","An `Punct` is an single punctuation character like `+`, `-` or `#`.",N,N],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",N,N],[3,"Literal","","A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).",N,N],[4,"TokenTree","","A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).",N,N],[13,"Group","","A token stream surrounded by bracket delimiters.",0,N],[13,"Ident","","An identifier.",0,N],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",0,N],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.",0,N],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",N,N],[13,"Parenthesis","","`( ... )`",1,N],[13,"Brace","","`{ ... }`",1,N],[13,"Bracket","","`[ ... ]`",1,N],[13,"None","","`Ø ... Ø`",1,N],[4,"Spacing","","Whether an `Punct` is followed immediately by another `Punct` or followed by another token or whitespace.",N,N],[13,"Alone","","E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.",2,N],[13,"Joint","","E.g. `+` is `Joint` in `+=` or `'#`.",2,N],[0,"token_stream","","Public implementation details for the `TokenStream` type, such as iterators.",N,N],[3,"IntoIter","proc_macro2::token_stream","An iterator over `TokenStream`'s `TokenTree`s.",N,N],[11,"next","","",3,[[["self"]],["option",["tokentree"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"into_iter","proc_macro2","",4,[[["self"]],["intoiter"]]],[11,"clone","","",4,[[["self"]],["tokenstream"]]],[11,"new","","Returns an empty `TokenStream` containing no token trees.",4,[[],["tokenstream"]]],[11,"empty","","",4,[[],["tokenstream"]]],[11,"is_empty","","Checks if this `TokenStream` is empty.",4,[[["self"]],["bool"]]],[11,"default","","",4,[[],["self"]]],[11,"from_str","","",4,[[["str"]],["result",["tokenstream","lexerror"]]]],[11,"from","","",4,[[["tokenstream"]],["tokenstream"]]],[11,"extend","","",4,[[["self"],["i"]]]],[11,"from_iter","","",4,[[["i"]],["self"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["span"]]],[11,"call_site","","The span of the invocation of the current procedural macro.",6,[[],["span"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["tokentree"]]],[11,"span","","Returns the span of this tree, delegating to the `span` method of the contained token or a delimited stream.",0,[[["self"]],["span"]]],[11,"set_span","","Configures the span for only this token.",0,[[["self"],["span"]]]],[11,"from","","",0,[[["group"]],["tokentree"]]],[11,"from","","",0,[[["ident"]],["tokentree"]]],[11,"from","","",0,[[["punct"]],["tokentree"]]],[11,"from","","",0,[[["literal"]],["tokentree"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["delimiter"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["delimiter"]],["bool"]]],[11,"new","","Creates a new `Group` with the given delimiter and token stream.",7,[[["delimiter"],["tokenstream"]],["group"]]],[11,"delimiter","","Returns the delimiter of this `Group`",7,[[["self"]],["delimiter"]]],[11,"stream","","Returns the `TokenStream` of tokens that are delimited in this `Group`.",7,[[["self"]],["tokenstream"]]],[11,"span","","Returns the span for the delimiters of this token stream, spanning the entire `Group`.",7,[[["self"]],["span"]]],[11,"set_span","","Configures the span for this `Group`'s delimiters, but not its internal tokens.",7,[[["self"],["span"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["punct"]]],[11,"clone","","",2,[[["self"]],["spacing"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["spacing"]],["bool"]]],[11,"new","","Creates a new `Punct` from the given character and spacing.",8,[[["char"],["spacing"]],["punct"]]],[11,"as_char","","Returns the value of this punctuation character as `char`.",8,[[["self"]],["char"]]],[11,"spacing","","Returns the spacing of this punctuation character, indicating whether it's immediately followed by another `Punct` in the token stream, so they can potentially be combined into a multicharacter operator (`Joint`), or it's followed by some other token or whitespace (`Alone`) so the operator has certainly ended.",8,[[["self"]],["spacing"]]],[11,"span","","Returns the span for this punctuation character.",8,[[["self"]],["span"]]],[11,"set_span","","Configure the span for this punctuation character.",8,[[["self"],["span"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["ident"]]],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",9,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",9,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",9,[[["self"],["span"]]]],[11,"eq","","",9,[[["self"],["ident"]],["bool"]]],[11,"eq","","",9,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["ident"]],["option",["ordering"]]]],[11,"cmp","","",9,[[["self"],["ident"]],["ordering"]]],[11,"hash","","",9,[[["self"],["h"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["literal"]]],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u8"]],["literal"]]],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u16"]],["literal"]]],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u32"]],["literal"]]],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u64"]],["literal"]]],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["usize"]],["literal"]]],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i8"]],["literal"]]],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i16"]],["literal"]]],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i32"]],["literal"]]],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i64"]],["literal"]]],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["isize"]],["literal"]]],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u8"]],["literal"]]],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u16"]],["literal"]]],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u32"]],["literal"]]],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u64"]],["literal"]]],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["usize"]],["literal"]]],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i8"]],["literal"]]],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i16"]],["literal"]]],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i32"]],["literal"]]],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i64"]],["literal"]]],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["isize"]],["literal"]]],[11,"f64_unsuffixed","","",10,[[["f64"]],["literal"]]],[11,"f64_suffixed","","",10,[[["f64"]],["literal"]]],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",10,[[["f32"]],["literal"]]],[11,"f32_suffixed","","",10,[[["f32"]],["literal"]]],[11,"string","","",10,[[["str"]],["literal"]]],[11,"character","","",10,[[["char"]],["literal"]]],[11,"byte_string","","",10,N],[11,"span","","",10,[[["self"]],["span"]]],[11,"set_span","","",10,[[["self"],["span"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"IntoIter"],[3,"TokenStream"],[3,"LexError"],[3,"Span"],[3,"Group"],[3,"Punct"],[3,"Ident"],[3,"Literal"]]};
searchIndex["quick_error"]={"doc":"A macro which makes errors easy to write","items":[[3,"Context","quick_error","Generic context type",N,N],[12,"0","","",0,N],[12,"1","","",0,N],[8,"ResultExt","","Result extension trait adding a `context` method",N,N],[10,"context","","The method is use to add context information to current operation",1,[[["self"],["x"]],["result",["context"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[14,"quick_error","","Main macro that does all the work",N,N]],"paths":[[3,"Context"],[8,"ResultExt"]]};
searchIndex["quote"]={"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[8,"TokenStreamExt","quote","TokenStream extension trait with methods for appending tokens.",N,N],[10,"append","","",0,[[["self"],["u"]]]],[10,"append_all","","",0,[[["self"],["i"]]]],[10,"append_separated","","",0,[[["self"],["i"],["u"]]]],[10,"append_terminated","","",0,[[["self"],["i"],["u"]]]],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",N,N],[10,"to_tokens","","Write `self` to the given `TokenStream`.",1,[[["self"],["tokenstream"]]]],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,[[["self"]],["tokenstream"]]],[14,"quote","","The whole point.",N,N],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",N,N],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,[[["self"]],["tokenstream"]]]],"paths":[[8,"TokenStreamExt"],[8,"ToTokens"]]};
searchIndex["rand"]={"doc":"Utilities for random number generation","items":[[3,"OsRng","rand","A random number generator that retrieves randomness straight from the operating system. Platform sources:",N,N],[3,"IsaacRng","","A random number generator that uses the ISAAC algorithm[1].",N,N],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",N,N],[3,"ChaChaRng","","A random number generator that uses the ChaCha20 algorithm [1].",N,N],[0,"isaac","","The ISAAC random number generator.",N,N],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",N,N],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",N,N],[0,"chacha","rand","The ChaCha random number generator.",N,N],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",N,N],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",N,N],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",N,N],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",0,N],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",N,N],[10,"reseed","","Reseed the given RNG.",1,N],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",N,N],[0,"os","rand","Interfaces to the operating system provided random number generators.",N,N],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",N,N],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",N,N],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",N,N],[8,"Rng","rand","A random number generator.",N,N],[10,"next_u32","","Return the next random u32.",2,[[["self"]],["u32"]]],[11,"next_u64","","Return the next random u64.",2,[[["self"]],["u64"]]],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",2,[[["self"]],["f32"]]],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",2,[[["self"]],["f64"]]],[11,"fill_bytes","","Fill `dest` with random data.",2,N],[11,"gen","","Return a random value of a `Rand` type.",2,[[["self"]],["t"]]],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",2,[[["self"]],["generator"]]],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",2,[[["self"],["t"],["t"]],["t"]]],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",2,[[["self"],["u32"]],["bool"]]],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",2,[[["self"]],["asciigenerator"]]],[11,"choose","","Return a random element from `values`.",2,N],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",2,N],[11,"shuffle","","Shuffle a mutable slice in place.",2,N],[8,"Rand","","A type that can be randomly generated using an `Rng`.",N,N],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",3,[[["r"]],["self"]]],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",N,N],[10,"reseed","","Reseed an RNG with the given seed.",4,N],[10,"from_seed","","Create a new RNG with the given seed.",4,[[["seed"]],["self"]]],[3,"Generator","","Iterator which will generate a stream of random items.",N,N],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",N,N],[3,"XorShiftRng","","An Xorshift[1] random number generator.",N,N],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",N,N],[12,"0","","",5,N],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",N,N],[12,"0","","",6,N],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",N,N],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",N,[[],["xorshiftrng"]]],[3,"ThreadRng","","The thread-local RNG.",N,N],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",N,[[],["threadrng"]]],[5,"random","","Generates a random value using the thread-local random number generator.",N,[[],["t"]]],[5,"sample","","DEPRECATED: use `seq::sample_iter` instead.",N,[[["r"],["i"],["usize"]],["vec"]]],[0,"distributions","","Sampling from random distributions.",N,N],[3,"Range","rand::distributions","Sample values uniformly between two bounds.",N,N],[3,"Gamma","","The Gamma distribution `Gamma(shape, scale)` distribution.",N,N],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",N,N],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",N,N],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",N,N],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",N,N],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",N,N],[3,"Exp","","The exponential distribution `Exp(lambda)`.",N,N],[0,"range","","Generating numbers between two others.",N,N],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",N,N],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",N,N],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",7,[[["self"],["self"]],["range"]]],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",7,[[["range"],["r"]],["self"]]],[0,"gamma","rand::distributions","The Gamma and derived distributions.",N,N],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",N,N],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",N,N],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",N,N],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",N,N],[0,"normal","rand::distributions","The normal and derived distributions.",N,N],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",N,N],[12,"0","","",8,N],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",N,N],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",N,N],[0,"exponential","rand::distributions","The exponential distribution.",N,N],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",N,N],[12,"0","","",9,N],[3,"Exp","","The exponential distribution `Exp(lambda)`.",N,N],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",N,N],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",10,[[["self"],["r"]],["support"]]],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",N,N],[10,"ind_sample","","Generate a random value.",11,[[["self"],["r"]],["support"]]],[3,"RandSample","","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",N,N],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",N,N],[12,"weight","","The numerical weight of this item",12,N],[12,"item","","The actual item which is being weighted",12,N],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",N,N],[11,"new","rand::os","Create a new `OsRng`.",13,[[],["result",["osrng","error"]]]],[11,"clone","rand::distributions","",14,[[["self"]],["randsample"]]],[11,"clone","rand::isaac","",15,[[["self"]],["isaac64rng"]]],[11,"clone","rand","",16,[[["self"]],["xorshiftrng"]]],[11,"clone","rand::distributions::gamma","",17,[[["self"]],["gamma"]]],[11,"clone","rand::distributions::range","",18,[[["self"]],["range"]]],[11,"clone","rand::isaac","",19,[[["self"]],["isaacrng"]]],[11,"clone","rand::distributions","",12,[[["self"]],["weighted"]]],[11,"clone","rand::distributions::gamma","",20,[[["self"]],["chisquared"]]],[11,"clone","rand::distributions::exponential","",21,[[["self"]],["exp"]]],[11,"clone","rand::reseeding","",22,[[["self"]],["reseedwithdefault"]]],[11,"clone","rand::chacha","",23,[[["self"]],["chacharng"]]],[11,"clone","rand::distributions::gamma","",24,[[["self"]],["studentt"]]],[11,"clone","rand::distributions::normal","",25,[[["self"]],["lognormal"]]],[11,"clone","rand::distributions::gamma","",26,[[["self"]],["fisherf"]]],[11,"clone","rand::distributions::normal","",27,[[["self"]],["normal"]]],[11,"clone","rand","",28,[[["self"]],["stdrng"]]],[11,"clone","rand::distributions::normal","",8,[[["self"]],["standardnormal"]]],[11,"clone","rand::distributions::exponential","",9,[[["self"]],["exp1"]]],[11,"clone","rand","",29,[[["self"]],["threadrng"]]],[11,"next_u32","","",16,[[["self"]],["u32"]]],[11,"next_u32","rand::chacha","",23,[[["self"]],["u32"]]],[11,"next_u32","rand","",28,[[["self"]],["u32"]]],[11,"next_u64","","",28,[[["self"]],["u64"]]],[11,"next_u32","rand::reseeding","",0,[[["self"]],["u32"]]],[11,"next_u64","","",0,[[["self"]],["u64"]]],[11,"fill_bytes","","",0,N],[11,"next_u32","rand::os","",13,[[["self"]],["u32"]]],[11,"next_u64","","",13,[[["self"]],["u64"]]],[11,"fill_bytes","","",13,N],[11,"next_u32","rand::isaac","",19,[[["self"]],["u32"]]],[11,"next_u32","rand","",29,[[["self"]],["u32"]]],[11,"next_u64","","",29,[[["self"]],["u64"]]],[11,"fill_bytes","","",29,N],[11,"next_u32","rand::read","",30,[[["self"]],["u32"]]],[11,"next_u64","","",30,[[["self"]],["u64"]]],[11,"fill_bytes","","",30,N],[11,"next_u32","rand::isaac","",15,[[["self"]],["u32"]]],[11,"next_u64","","",15,[[["self"]],["u64"]]],[11,"next","rand","",31,[[["self"]],["option"]]],[11,"next","","",32,[[["self"]],["option",["char"]]]],[11,"fmt","rand::distributions::gamma","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::os","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::reseeding","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::chacha","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::reseeding","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::normal","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::gamma","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::read","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::gamma","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::exponential","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::range","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::isaac","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::exponential","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::gamma","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::normal","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::isaac","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::normal","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"default","rand::reseeding","",22,[[],["reseedwithdefault"]]],[11,"ind_sample","rand::distributions::exponential","",21,[[["self"],["r"]],["f64"]]],[11,"ind_sample","rand::distributions::normal","",27,[[["self"],["r"]],["f64"]]],[11,"ind_sample","rand::distributions::gamma","",26,[[["self"],["r"]],["f64"]]],[11,"ind_sample","rand::distributions::normal","",25,[[["self"],["r"]],["f64"]]],[11,"ind_sample","rand::distributions::gamma","",20,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",24,[[["self"],["r"]],["f64"]]],[11,"ind_sample","rand::distributions","",14,[[["self"],["r"]],["sup"]]],[11,"ind_sample","rand::distributions::gamma","",17,[[["self"],["r"]],["f64"]]],[11,"ind_sample","rand::distributions::range","",18,[[["self"],["r"]],["sup"]]],[11,"ind_sample","rand::distributions","",33,[[["self"],["r"]],["t"]]],[11,"rand","rand::distributions::exponential","",9,[[["r"]],["exp1"]]],[11,"rand","rand","",6,[[["r"]],["closed01",["f64"]]]],[11,"rand","","",5,[[["r"]],["open01",["f64"]]]],[11,"rand","","",16,[[["r"]],["xorshiftrng"]]],[11,"rand","","",6,[[["r"]],["closed01",["f32"]]]],[11,"rand","rand::chacha","",23,[[["r"]],["chacharng"]]],[11,"rand","rand","",5,[[["r"]],["open01",["f32"]]]],[11,"rand","rand::distributions::normal","",8,[[["r"]],["standardnormal"]]],[11,"rand","rand::isaac","",19,[[["r"]],["isaacrng"]]],[11,"rand","","",15,[[["r"]],["isaac64rng"]]],[11,"reseed","rand","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",16,N],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",16,N],[11,"reseed","rand::isaac","",15,N],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",15,N],[11,"reseed","rand","",28,N],[11,"from_seed","","",28,N],[11,"reseed","rand::isaac","",19,N],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",19,N],[11,"reseed","rand::reseeding","",0,N],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",0,N],[11,"reseed","rand::chacha","",23,N],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",23,N],[11,"sample","rand::distributions::exponential","",21,[[["self"],["r"]],["f64"]]],[11,"sample","rand::distributions::gamma","",26,[[["self"],["r"]],["f64"]]],[11,"sample","","",24,[[["self"],["r"]],["f64"]]],[11,"sample","rand::distributions","",33,[[["self"],["r"]],["t"]]],[11,"sample","rand::distributions::gamma","",20,[[["self"],["r"]],["f64"]]],[11,"sample","rand::distributions::normal","",27,[[["self"],["r"]],["f64"]]],[11,"sample","rand::distributions::gamma","",17,[[["self"],["r"]],["f64"]]],[11,"sample","rand::distributions::normal","",25,[[["self"],["r"]],["f64"]]],[11,"sample","rand::distributions","",14,[[["self"],["r"]],["sup"]]],[11,"sample","rand::distributions::range","",18,[[["self"],["r"]],["sup"]]],[11,"reseed","rand::reseeding","",22,N],[11,"new_unseeded","rand::isaac","Create an ISAAC random number generator using the default fixed seed.",19,[[],["isaacrng"]]],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",15,[[],["isaac64rng"]]],[11,"new_unseeded","rand::chacha","Create an ChaCha random number generator using the default fixed key of 8 zero words.",23,[[],["chacharng"]]],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",23,N],[11,"new","rand::reseeding","Create a new `ReseedingRng` with the given parameters.",0,[[["r"],["u64"],["rsdr"]],["reseedingrng"]]],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",0,N],[11,"new","rand::read","Create a new `ReadRng` from a `Read`.",30,[[["r"]],["readrng"]]],[11,"new_unseeded","rand","Creates a new XorShiftRng instance which is not seeded.",16,[[],["xorshiftrng"]]],[11,"new","","Create a randomly seeded instance of `StdRng`.",28,[[],["result",["stdrng","error"]]]],[11,"new","rand::distributions::range","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",18,[[["x"],["x"]],["range"]]],[11,"new","rand::distributions::gamma","Construct an object representing the `Gamma(shape, scale)` distribution.",17,[[["f64"],["f64"]],["gamma"]]],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",20,[[["f64"]],["chisquared"]]],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",26,[[["f64"],["f64"]],["fisherf"]]],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",24,[[["f64"]],["studentt"]]],[11,"new","rand::distributions::normal","Construct a new `Normal` distribution with the given mean and standard deviation.",27,[[["f64"],["f64"]],["normal"]]],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",25,[[["f64"],["f64"]],["lognormal"]]],[11,"new","rand::distributions::exponential","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",21,[[["f64"]],["exp"]]],[11,"new","rand::distributions","",14,[[],["randsample"]]],[11,"new","","Create a new `WeightedChoice`.",33,N]],"paths":[[3,"ReseedingRng"],[8,"Reseeder"],[8,"Rng"],[8,"Rand"],[8,"SeedableRng"],[3,"Open01"],[3,"Closed01"],[8,"SampleRange"],[3,"StandardNormal"],[3,"Exp1"],[8,"Sample"],[8,"IndependentSample"],[3,"Weighted"],[3,"OsRng"],[3,"RandSample"],[3,"Isaac64Rng"],[3,"XorShiftRng"],[3,"Gamma"],[3,"Range"],[3,"IsaacRng"],[3,"ChiSquared"],[3,"Exp"],[3,"ReseedWithDefault"],[3,"ChaChaRng"],[3,"StudentT"],[3,"LogNormal"],[3,"FisherF"],[3,"Normal"],[3,"StdRng"],[3,"ThreadRng"],[3,"ReadRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"WeightedChoice"]]};
searchIndex["ring"]={"doc":"Safe, fast, small crypto using Rust with BoringSSL's cryptography primitives.","items":[[0,"aead","ring","Authenticated Encryption with Associated Data (AEAD).",N,N],[3,"OpeningKey","ring::aead","A key for authenticating and decrypting (“opening”) AEAD-protected data.",N,N],[3,"SealingKey","","A key for encrypting and signing (“sealing”) data.",N,N],[3,"Algorithm","","An AEAD Algorithm.",N,N],[5,"open_in_place","","Authenticates and decrypts (“opens”) data in place. When",N,N],[5,"seal_in_place","","Encrypts and signs (“seals”) data in place.",N,N],[0,"chacha20_poly1305_openssh","","The [chacha20-poly1305@openssh.com] AEAD-ish construct.",N,N],[3,"SealingKey","ring::aead::chacha20_poly1305_openssh","A key for sealing packets.",N,N],[3,"OpeningKey","","A key for opening packets.",N,N],[17,"KEY_LEN","","The length of key.",N,N],[17,"TAG_LEN","","The length of a tag.",N,N],[17,"PACKET_LENGTH_LEN","","The length in bytes of the `packet_length` field in a SSH packet.",N,N],[11,"new","","Constructs a new `SealingKey`.",0,N],[11,"seal_in_place","","Seals (encrypts and signs) a packet.",0,N],[11,"new","","Constructs a new `OpeningKey`.",1,N],[11,"decrypt_packet_length","","Returns the decrypted, but unauthenticated, packet length.",1,N],[11,"open_in_place","","Opens (authenticates and decrypts) a packet.",1,N],[7,"CHACHA20_POLY1305","ring::aead","ChaCha20-Poly1305 as described in [RFC 7539].",N,N],[7,"AES_128_GCM","","AES-128 in GCM mode with 128-bit tags and 96 bit nonces.",N,N],[7,"AES_256_GCM","","AES-256 in GCM mode with 128-bit tags and 96 bit nonces.",N,N],[17,"MAX_TAG_LEN","","The maximum length of a tag for the algorithms in this module.",N,N],[11,"new","","Create a new opening key.",2,N],[11,"algorithm","","The key's AEAD algorithm.",2,[[["self"]],["algorithm"]]],[11,"new","","C analogs: `EVP_AEAD_CTX_init_with_direction` with direction            `evp_aead_seal`, `EVP_AEAD_CTX_init`.",3,N],[11,"algorithm","","The key's AEAD algorithm.",3,[[["self"]],["algorithm"]]],[11,"key_len","","The length of the key.",4,[[["self"]],["usize"]]],[11,"tag_len","","The length of a tag.",4,[[["self"]],["usize"]]],[11,"nonce_len","","The length of the nonces.",4,[[["self"]],["usize"]]],[11,"eq","","",4,[[["self"],["self"]],["bool"]]],[0,"agreement","ring","Key Agreement: ECDH, including X25519.",N,N],[3,"Algorithm","ring::agreement","A key agreement algorithm.",N,N],[3,"EphemeralPrivateKey","","An ephemeral private key for use (only) with `agree_ephemeral`. The signature of `agree_ephemeral` ensures that an `EphemeralPrivateKey` can be used for at most one key agreement.",N,N],[5,"agree_ephemeral","","Performs a key agreement with an ephemeral private key and the given public key.",N,[[["ephemeralprivatekey"],["algorithm"],["input"],["e"],["f"]],["result"]]],[7,"ECDH_P256","","ECDH using the NSA Suite B P-256 (secp256r1) curve.",N,N],[7,"ECDH_P384","","ECDH using the NSA Suite B P-384 (secp384r1) curve.",N,N],[7,"X25519","","X25519 (ECDH using Curve25519) as described in [RFC 7748].",N,N],[17,"PUBLIC_KEY_MAX_LEN","","The maximum length, in bytes, of an encoded public key.",N,N],[11,"eq","","",5,[[["self"],["algorithm"]],["bool"]]],[11,"ne","","",5,[[["self"],["algorithm"]],["bool"]]],[11,"generate","","Generate a new ephemeral private key for the given algorithm.",6,[[["algorithm"],["securerandom"]],["result",["ephemeralprivatekey","unspecified"]]]],[11,"algorithm","","The key exchange algorithm.",6,[[["self"]],["algorithm"]]],[11,"public_key_len","","The size in bytes of the encoded public key.",6,[[["self"]],["usize"]]],[11,"compute_public_key","","Computes the public key from the private key's value and fills `out` with the public point encoded in the standard form for the algorithm.",6,N],[0,"constant_time","ring","Constant-time operations.",N,N],[5,"verify_slices_are_equal","ring::constant_time","Returns `Ok(())` if `a == b` and `Err(error::Unspecified)` otherwise. The comparison of `a` and `b` is done in constant time with respect to the contents of each, but NOT in constant time with respect to the lengths of `a` and `b`.",N,N],[0,"digest","ring","SHA-2 and the legacy SHA-1 digest algorithm.",N,N],[3,"Context","ring::digest","A context for multi-step (Init-Update-Finish) digest calculations.",N,N],[12,"algorithm","","The context's algorithm.",7,N],[3,"Digest","","A calculated digest value.",N,N],[3,"Algorithm","","A digest algorithm.",N,N],[12,"output_len","","C analog: `EVP_MD_size`",8,N],[12,"chaining_len","","The size of the chaining value of the digest function, in bytes. For non-truncated algorithms (SHA-1, SHA-256, SHA-512), this is equal to `output_len`. For truncated algorithms (e.g. SHA-384, SHA-512/256), this is equal to the length before truncation. This is mostly helpful for determining the size of an HMAC key that is appropriate for the digest algorithm.",8,N],[12,"block_len","","C analog: `EVP_MD_block_size`",8,N],[5,"digest","","Returns the digest of `data` using the given digest algorithm.",N,N],[7,"SHA1","","SHA-1 as specified in [FIPS 180-4]. Deprecated.",N,N],[7,"SHA256","","SHA-256 as specified in [FIPS 180-4].",N,N],[7,"SHA384","","SHA-384 as specified in [FIPS 180-4].",N,N],[7,"SHA512","","SHA-512 as specified in [FIPS 180-4].",N,N],[7,"SHA512_256","","SHA-512/256 as specified in [FIPS 180-4].",N,N],[17,"MAX_BLOCK_LEN","","The maximum block length (`Algorithm::block_len`) of all the algorithms in this module.",N,N],[17,"MAX_OUTPUT_LEN","","The maximum output length (`Algorithm::output_len`) of all the algorithms in this module.",N,N],[17,"MAX_CHAINING_LEN","","The maximum chaining length (`Algorithm::chaining_len`) of all the algorithms in this module.",N,N],[17,"SHA1_OUTPUT_LEN","","The length of the output of SHA-1, in bytes.",N,N],[17,"SHA256_OUTPUT_LEN","","The length of the output of SHA-256, in bytes.",N,N],[17,"SHA384_OUTPUT_LEN","","The length of the output of SHA-384, in bytes.",N,N],[17,"SHA512_OUTPUT_LEN","","The length of the output of SHA-512, in bytes.",N,N],[17,"SHA512_256_OUTPUT_LEN","","The length of the output of SHA-512/256, in bytes.",N,N],[11,"new","","Constructs a new context.",7,[[["algorithm"]],["context"]]],[11,"update","","Updates the digest with all the data in `data`. `update` may be called zero or more times until `finish` is called. It must not be called after `finish` has been called.",7,N],[11,"finish","","Finalizes the digest calculation and returns the digest value. `finish` consumes the context so it cannot be (mis-)used after `finish` has been called.",7,[[["self"]],["digest"]]],[11,"algorithm","","The algorithm that this context is using.",7,[[["self"]],["algorithm"]]],[11,"clone","","",7,[[["self"]],["context"]]],[11,"clone","","",9,[[["self"]],["digest"]]],[11,"algorithm","","The algorithm that was used to calculate the digest value.",9,[[["self"]],["algorithm"]]],[11,"as_ref","","",9,N],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["self"]],["bool"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[0,"error","ring","Error reporting.",N,N],[3,"Unspecified","ring::error","An error with absolutely no details.",N,N],[11,"clone","","",10,[[["self"]],["unspecified"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["unspecified"]],["bool"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"cause","","",10,[[["self"]],["option",["error"]]]],[11,"description","","",10,[[["self"]],["str"]]],[11,"from","","",10,[[["endofinput"]],["self"]]],[0,"hkdf","ring","HMAC-based Extract-and-Expand Key Derivation Function.",N,N],[5,"extract_and_expand","ring::hkdf","Fills `out` with the output of the HKDF Extract-and-Expand operation for the given inputs.",N,N],[5,"extract","","The HKDF-Extract operation.",N,N],[5,"expand","","Fills `out` with the output of the HKDF-Expand operation for the given inputs.",N,N],[0,"hmac","ring","HMAC is specified in [RFC 2104].",N,N],[3,"Signature","ring::hmac","An HMAC signature.",N,N],[3,"SigningKey","","A key to use for HMAC signing.",N,N],[3,"SigningContext","","A context for multi-step (Init-Update-Finish) HMAC signing.",N,N],[3,"VerificationKey","","A key to use for HMAC authentication.",N,N],[5,"sign","","Calculates the HMAC of `data` using the key `key` in one step.",N,N],[5,"verify","","Calculates the HMAC of `data` using the key `key`, and verifies whether the resultant value equals `signature`, in one step.",N,N],[5,"verify_with_own_key","","Calculates the HMAC of `data` using the signing key `key`, and verifies whether the resultant value equals `signature`, in one step.",N,N],[5,"recommended_key_len","","Returns the recommended key length for HMAC using the given digest algorithm.",N,[[["algorithm"]],["usize"]]],[11,"clone","","",11,[[["self"]],["signature"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"as_ref","","",11,N],[11,"generate","","Generate an HMAC signing key using the given digest algorithm with a random value generated from `rng`.",12,[[["algorithm"],["securerandom"]],["result",["signingkey","unspecified"]]]],[11,"generate_serializable","","Generate an HMAC signing key using the given digest algorithm with a random value generated from `rng`, and puts the raw key value in `key_bytes`.",12,N],[11,"new","","Construct an HMAC signing key using the given digest algorithm and key value.",12,N],[11,"digest_algorithm","","The digest algorithm for the key.",12,[[["self"]],["algorithm"]]],[11,"clone","","",13,[[["self"]],["signingcontext"]]],[11,"with_key","","Constructs a new HMAC signing context using the given digest algorithm and key.",13,[[["signingkey"]],["signingcontext"]]],[11,"update","","Updates the HMAC with all the data in `data`. `update` may be called zero or more times until `finish` is called.",13,N],[11,"sign","","Finalizes the HMAC calculation and returns the HMAC value. `sign` consumes the context so it cannot be (mis-)used after `sign` has been called.",13,[[["self"]],["signature"]]],[11,"new","","Construct an HMAC verification key using the given digest algorithm and key value.",14,N],[0,"pbkdf2","ring","PBKDF2 derivation and verification.",N,N],[5,"derive","ring::pbkdf2","Fills `out` with the key derived using PBKDF2 with the given inputs.",N,N],[5,"verify","","Verifies that a previously-derived (e.g., using `derive`) PBKDF2 value matches the PBKDF2 value derived from the other inputs.",N,N],[0,"rand","ring","Cryptographic pseudo-random number generation.",N,N],[3,"SystemRandom","ring::rand","A secure random number generator where the random values come directly from the operating system.",N,N],[8,"SecureRandom","","A secure random number generator.",N,N],[10,"fill","","Fills `dest` with random bytes.",15,N],[11,"new","","Constructs a new `SystemRandom`.",16,[[],["systemrandom"]]],[11,"fill","","",16,N],[0,"signature","ring","Public key signatures: signing and verification.",N,N],[3,"ECDSAVerificationAlgorithm","ring::signature","An ECDSA verification algorithm.",N,N],[3,"EdDSAParameters","","Parameters for EdDSA signing and verification.",N,N],[3,"Ed25519KeyPair","","An Ed25519 key pair, for signing.",N,N],[3,"PKCS8Document","","A generated PKCS#8 document.",N,N],[3,"RSAParameters","","Parameters for RSA verification.",N,N],[3,"Signature","","A public key signature returned from a signing operation.",N,N],[5,"verify","","Verify the signature `signature` of message `msg` with the public key `public_key` using the algorithm `alg`.",N,[[["verificationalgorithm"],["input"],["input"],["input"]],["result",["unspecified"]]]],[0,"primitive","","Lower-level verification primitives. Usage of `ring::signature::verify()` is preferred when the public key and signature are encoded in standard formats, as it also handles the parsing.",N,N],[5,"verify_rsa","ring::signature::primitive","Lower-level API for the verification of RSA signatures.",N,N],[7,"ECDSA_P256_SHA256_ASN1","ring::signature","Verification of ASN.1 DER-encoded ECDSA signatures using the P-256 curve and SHA-256.",N,N],[7,"ECDSA_P256_SHA256_FIXED","","Verification of fixed-length (PKCS#11 style) ECDSA signatures using the P-256 curve and SHA-256.",N,N],[7,"ECDSA_P256_SHA384_ASN1","","Not recommended. Verification of ASN.1 DER-encoded ECDSA signatures using the P-256 curve and SHA-384.",N,N],[7,"ECDSA_P384_SHA256_ASN1","","Not recommended. Verification of ASN.1 DER-encoded ECDSA signatures using the P-384 curve and SHA-256.",N,N],[7,"ECDSA_P384_SHA384_ASN1","","Verification of ASN.1 DER-encoded ECDSA signatures using the P-384 curve and SHA-384.",N,N],[7,"ECDSA_P384_SHA384_FIXED","","Verification of fixed-length (PKCS#11 style) ECDSA signatures using the P-384 curve and SHA-384.",N,N],[7,"ED25519","","Verification of [Ed25519] signatures.",N,N],[7,"RSA_PKCS1_2048_8192_SHA1","","Verification of signatures using RSA keys of 2048-8192 bits,              PKCS#1.5 padding, and SHA-1.",N,N],[7,"RSA_PKCS1_2048_8192_SHA256","","Verification of signatures using RSA keys of 2048-8192 bits,              PKCS#1.5 padding, and SHA-256.",N,N],[7,"RSA_PKCS1_2048_8192_SHA384","","Verification of signatures using RSA keys of 2048-8192 bits,              PKCS#1.5 padding, and SHA-384.",N,N],[7,"RSA_PKCS1_2048_8192_SHA512","","Verification of signatures using RSA keys of 2048-8192 bits,              PKCS#1.5 padding, and SHA-512.",N,N],[7,"RSA_PKCS1_3072_8192_SHA384","","Verification of signatures using RSA keys of 3072-8192 bits,              PKCS#1.5 padding, and SHA-384.",N,N],[7,"RSA_PSS_2048_8192_SHA256","","Verification of signatures using RSA keys of 2048-8192 bits,              PSS padding, and SHA-256.",N,N],[7,"RSA_PSS_2048_8192_SHA384","","Verification of signatures using RSA keys of 2048-8192 bits,              PSS padding, and SHA-384.",N,N],[7,"RSA_PSS_2048_8192_SHA512","","Verification of signatures using RSA keys of 2048-8192 bits,              PSS padding, and SHA-512.",N,N],[17,"ED25519_PKCS8_V2_LEN","","The length of a Ed25519 PKCS#8 (v2) private key generated by `Ed25519KeyPair::generate_pkcs8()`. Ed25519 PKCS#8 files generated by other software may have different lengths, and `Ed25519KeyPair::generate_pkcs8()` may generate files of a different length in the future.",N,N],[17,"ED25519_PUBLIC_KEY_LEN","","The length of an Ed25519 public key.",N,N],[8,"VerificationAlgorithm","","A signature verification algorithm.",N,N],[10,"verify","","Verify the signature `signature` of message `msg` with the public key `public_key`.",17,[[["self"],["input"],["input"],["input"]],["result",["unspecified"]]]],[11,"as_ref","","",18,N],[0,"test","ring","Testing framework.",N,N],[3,"TestCase","ring::test","A test case. A test case consists of a set of named attributes. Every attribute in the test case must be consumed exactly once; this helps catch typos and omissions.",N,N],[5,"ring_src_path","","Returns the path for ring source code root.",N,[[],["pathbuf"]]],[5,"from_file","","Reads test cases out of the file with the path given by `test_data_relative_file_path`, calling `f` on each vector until `f` fails or until all the test vectors have been read. `f` can indicate failure either by returning `Err()` or by panicking.",N,[[["str"],["f"]]]],[5,"from_hex","","Decode an string of hex digits into a sequence of bytes. The input must have an even number of digits.",N,[[["str"]],["result",["vec","string"]]]],[0,"rand","","Deterministic implementations of `ring::rand::SecureRandom`.",N,N],[3,"FixedByteRandom","ring::test::rand","An implementation of `SecureRandom` that always fills the output slice with the given byte.",N,N],[12,"byte","","",19,N],[3,"FixedSliceRandom","","An implementation of `SecureRandom` that always fills the output slice with the slice in `bytes`. The length of the slice given to `slice` must match exactly.",N,N],[12,"bytes","","",20,N],[3,"FixedSliceSequenceRandom","","An implementation of `SecureRandom` where each slice in `bytes` is a test vector for one call to `fill()`. Not thread-safe.",N,N],[12,"bytes","","The value.",21,N],[12,"current","","",21,N],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fill","","",19,N],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fill","","",20,N],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fill","","",21,N],[11,"drop","","",21,[[["self"]]]],[11,"fmt","ring::test","",22,[[["self"],["formatter"]],["result"]]],[11,"consume_digest_alg","","Maps the strings \"SHA1\", \"SHA256\", \"SHA384\", and \"SHA512\" to digest algorithms, maps \"SHA224\" to `None`, and panics on other (erroneous) inputs. \"SHA224\" is mapped to None because ring intentionally does not support SHA224, but we need to consume test vectors from NIST that have SHA224 vectors in them.",22,[[["self"],["str"]],["option",["algorithm"]]]],[11,"consume_bytes","","Returns the value of an attribute that is encoded as a sequence of an even number of hex digits, or as a double-quoted UTF-8 string. The empty (zero-length) value is represented as \"\".",22,[[["self"],["str"]],["vec",["u8"]]]],[11,"consume_usize","","Returns the value of an attribute that is an integer, in decimal notation.",22,[[["self"],["str"]],["usize"]]],[11,"consume_usize_bits","","Returns the value of an attribute that is an integer, in decimal notation, as a bit length.",22,[[["self"],["str"]],["bitlength"]]],[11,"consume_string","","Returns the raw value of an attribute, without any unquoting or other interpretation.",22,[[["self"],["str"]],["string"]]],[11,"consume_optional_string","","Like `consume_string()` except it returns `None` if the test case doesn't have the attribute.",22,[[["self"],["str"]],["option",["string"]]]],[11,"fmt","ring::signature","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"generate_pkcs8","","Generates a new key pair and returns the key pair serialized as a PKCS#8 document.",24,[[["securerandom"]],["result",["unspecified"]]]],[11,"from_pkcs8","","Constructs an Ed25519 key pair by parsing an unencrypted PKCS#8 v2 Ed25519 private key.",24,[[["input"]],["result",["ed25519keypair","unspecified"]]]],[11,"from_pkcs8_maybe_unchecked","","Constructs an Ed25519 key pair by parsing an unencrypted PKCS#8 v1 or v2 Ed25519 private key.",24,[[["input"]],["result",["ed25519keypair","unspecified"]]]],[11,"from_seed_and_public_key","","Constructs an Ed25519 key pair from the private key seed `seed` and its public key `public_key`.",24,[[["input"],["input"]],["result",["ed25519keypair","unspecified"]]]],[11,"from_seed_unchecked","","Constructs a Ed25519 key pair from the private key seed `seed`.",24,[[["input"]],["result",["ed25519keypair","unspecified"]]]],[11,"public_key_bytes","","Returns a reference to the little-endian-encoded public key bytes.",24,N],[11,"sign","","Returns the signature of the message `msg`.",24,N],[11,"verify","","",23,[[["self"],["input"],["input"],["input"]],["result",["unspecified"]]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"verify","","",25,[[["self"],["input"],["input"],["input"]],["result",["unspecified"]]]],[11,"as_ref","","",26,N],[11,"verify","","",27,[[["self"],["input"],["input"],["input"]],["result",["unspecified"]]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result",["error"]]]]],"paths":[[3,"SealingKey"],[3,"OpeningKey"],[3,"OpeningKey"],[3,"SealingKey"],[3,"Algorithm"],[3,"Algorithm"],[3,"EphemeralPrivateKey"],[3,"Context"],[3,"Algorithm"],[3,"Digest"],[3,"Unspecified"],[3,"Signature"],[3,"SigningKey"],[3,"SigningContext"],[3,"VerificationKey"],[8,"SecureRandom"],[3,"SystemRandom"],[8,"VerificationAlgorithm"],[3,"Signature"],[3,"FixedByteRandom"],[3,"FixedSliceRandom"],[3,"FixedSliceSequenceRandom"],[3,"TestCase"],[3,"EdDSAParameters"],[3,"Ed25519KeyPair"],[3,"ECDSAVerificationAlgorithm"],[3,"PKCS8Document"],[3,"RSAParameters"]]};
searchIndex["rustc_hex"]={"doc":"Hex binary-to-text encoding","items":[[4,"FromHexError","rustc_hex","Errors that can occur when decoding a hex encoded string",N,N],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",0,N],[13,"InvalidHexLength","","The input had an invalid length",0,N],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",N,N],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",1,[[["self"]],["string"]]],[8,"FromHex","","A trait for converting hexadecimal encoded values",N,N],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",2,[[["self"]],["result",["vec","fromhexerror"]]]],[11,"clone","","",0,[[["self"]],["fromhexerror"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"]]};
searchIndex["rustc_serialize"]={"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",N,N],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",N,N],[12,"char_set","","Character set to use",0,N],[12,"newline","","Newline to use",0,N],[12,"pad","","True to pad output with `=` characters",0,N],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,N],[4,"CharacterSet","","Available encoding character sets",N,N],[13,"Standard","","The standard character set (uses `+` and `/`)",1,N],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,N],[4,"Newline","","Available newline types",N,N],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,N],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,N],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",N,N],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,N],[13,"InvalidBase64Length","","The input had an invalid length",3,N],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",N,N],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",N,N],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",N,N],[8,"ToBase64","","A trait for converting a value to base64 encoding.",N,N],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,[[["self"],["config"]],["string"]]],[8,"FromBase64","","A trait for converting from base64 encoded values.",N,N],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,[[["self"]],["result",["vec","frombase64error"]]]],[11,"clone","","",1,[[["self"]],["characterset"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["newline"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["config"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["frombase64error"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[0,"hex","rustc_serialize","Hex binary-to-text encoding",N,N],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",N,N],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,N],[13,"InvalidHexLength","","The input had an invalid length",6,N],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",N,N],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,[[["self"]],["string"]]],[8,"FromHex","","A trait for converting hexadecimal encoded values",N,N],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,[[["self"]],["result",["vec","fromhexerror"]]]],[11,"clone","","",6,[[["self"]],["fromhexerror"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"description","","",6,[[["self"]],["str"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[0,"json","rustc_serialize","JSON parsing and serialization",N,N],[3,"PrettyJson","rustc_serialize::json","",N,N],[3,"AsJson","","",N,N],[3,"AsPrettyJson","","",N,N],[3,"Encoder","","A structure for implementing serialization to JSON.",N,N],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",N,N],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",N,N],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",N,N],[3,"Decoder","","A structure to decode JSON to values in rust.",N,N],[4,"Json","","Represents a json value",N,N],[13,"I64","","",9,N],[13,"U64","","",9,N],[13,"F64","","",9,N],[13,"String","","",9,N],[13,"Boolean","","",9,N],[13,"Array","","",9,N],[13,"Object","","",9,N],[13,"Null","","",9,N],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",N,N],[13,"InvalidSyntax","","",10,N],[13,"InvalidNumber","","",10,N],[13,"EOFWhileParsingObject","","",10,N],[13,"EOFWhileParsingArray","","",10,N],[13,"EOFWhileParsingValue","","",10,N],[13,"EOFWhileParsingString","","",10,N],[13,"KeyMustBeAString","","",10,N],[13,"ExpectedColon","","",10,N],[13,"TrailingCharacters","","",10,N],[13,"TrailingComma","","",10,N],[13,"InvalidEscape","","",10,N],[13,"InvalidUnicodeCodePoint","","",10,N],[13,"LoneLeadingSurrogateInHexEscape","","",10,N],[13,"UnexpectedEndOfHexEscape","","",10,N],[13,"UnrecognizedHex","","",10,N],[13,"NotFourDigit","","",10,N],[13,"ControlCharacterInString","","",10,N],[13,"NotUtf8","","",10,N],[4,"ParserError","","",N,N],[13,"SyntaxError","","msg, line, col",11,N],[13,"IoError","","",11,N],[4,"DecoderError","","",N,N],[13,"ParseError","","",12,N],[13,"ExpectedError","","",12,N],[13,"MissingFieldError","","",12,N],[13,"UnknownVariantError","","",12,N],[13,"ApplicationError","","",12,N],[13,"EOF","","",12,N],[4,"EncoderError","","",N,N],[13,"FmtError","","",13,N],[13,"BadHashmapKey","","",13,N],[4,"JsonEvent","","The output of the streaming parser.",N,N],[13,"ObjectStart","","",14,N],[13,"ObjectEnd","","",14,N],[13,"ArrayStart","","",14,N],[13,"ArrayEnd","","",14,N],[13,"BooleanValue","","",14,N],[13,"I64Value","","",14,N],[13,"U64Value","","",14,N],[13,"F64Value","","",14,N],[13,"StringValue","","",14,N],[13,"NullValue","","",14,N],[13,"Error","","",14,N],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",N,N],[13,"Index","","",15,N],[13,"Key","","",15,N],[5,"error_str","","Returns a readable error string for a given error code.",N,[[["errorcode"]],["str"]]],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",N,[[["str"]],["decoderesult"]]],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",N,[[["t"]],["encoderesult",["string"]]]],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",N,[[["t"]],["asjson"]]],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",N,[[["t"]],["asprettyjson"]]],[6,"Array","","",N,N],[6,"Object","","",N,N],[6,"BuilderError","","",N,N],[6,"EncodeResult","","",N,N],[6,"DecodeResult","","",N,N],[8,"ToJson","","A trait for converting values to JSON",N,N],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,[[["self"]],["json"]]],[11,"clone","","",9,[[["self"]],["json"]]],[11,"eq","","",9,[[["self"],["json"]],["bool"]]],[11,"ne","","",9,[[["self"],["json"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["json"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["json"]],["bool"]]],[11,"le","","",9,[[["self"],["json"]],["bool"]]],[11,"gt","","",9,[[["self"],["json"]],["bool"]]],[11,"ge","","",9,[[["self"],["json"]],["bool"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["errorcode"]]],[11,"eq","","",10,[[["self"],["errorcode"]],["bool"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["parsererror"]],["bool"]]],[11,"eq","","",12,[[["self"],["decodererror"]],["bool"]]],[11,"ne","","",12,[[["self"],["decodererror"]],["bool"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"eq","","",13,[[["self"],["encodererror"]],["bool"]]],[11,"clone","","",13,[[["self"]],["self"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"description","","",12,[[["self"]],["str"]]],[11,"cause","","",12,[[["self"]],["option",["stderror"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"from","","",12,[[["parsererror"]],["decodererror"]]],[11,"description","","",11,[[["self"]],["str"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"from","","",11,[[["error"]],["parsererror"]]],[11,"description","","",13,[[["self"]],["str"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"from","","",13,[[["error"]],["encodererror"]]],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,[[["write"]],["encoder"]]],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,[[["write"]],["encoder"]]],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,[[["self"],["u32"]],["result"]]],[11,"emit_nil","","",17,[[["self"]],["encoderesult"]]],[11,"emit_usize","","",17,[[["self"],["usize"]],["encoderesult"]]],[11,"emit_u64","","",17,[[["self"],["u64"]],["encoderesult"]]],[11,"emit_u32","","",17,[[["self"],["u32"]],["encoderesult"]]],[11,"emit_u16","","",17,[[["self"],["u16"]],["encoderesult"]]],[11,"emit_u8","","",17,[[["self"],["u8"]],["encoderesult"]]],[11,"emit_isize","","",17,[[["self"],["isize"]],["encoderesult"]]],[11,"emit_i64","","",17,[[["self"],["i64"]],["encoderesult"]]],[11,"emit_i32","","",17,[[["self"],["i32"]],["encoderesult"]]],[11,"emit_i16","","",17,[[["self"],["i16"]],["encoderesult"]]],[11,"emit_i8","","",17,[[["self"],["i8"]],["encoderesult"]]],[11,"emit_bool","","",17,[[["self"],["bool"]],["encoderesult"]]],[11,"emit_f64","","",17,[[["self"],["f64"]],["encoderesult"]]],[11,"emit_f32","","",17,[[["self"],["f32"]],["encoderesult"]]],[11,"emit_char","","",17,[[["self"],["char"]],["encoderesult"]]],[11,"emit_str","","",17,[[["self"],["str"]],["encoderesult"]]],[11,"emit_enum","","",17,[[["self"],["str"],["f"]],["encoderesult"]]],[11,"emit_enum_variant","","",17,[[["self"],["str"],["usize"],["usize"],["f"]],["encoderesult"]]],[11,"emit_enum_variant_arg","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_enum_struct_variant","","",17,[[["self"],["str"],["usize"],["usize"],["f"]],["encoderesult"]]],[11,"emit_enum_struct_variant_field","","",17,[[["self"],["str"],["usize"],["f"]],["encoderesult"]]],[11,"emit_struct","","",17,[[["self"],["str"],["usize"],["f"]],["encoderesult"]]],[11,"emit_struct_field","","",17,[[["self"],["str"],["usize"],["f"]],["encoderesult"]]],[11,"emit_tuple","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_tuple_arg","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_tuple_struct","","",17,[[["self"],["str"],["usize"],["f"]],["encoderesult"]]],[11,"emit_tuple_struct_arg","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_option","","",17,[[["self"],["f"]],["encoderesult"]]],[11,"emit_option_none","","",17,[[["self"]],["encoderesult"]]],[11,"emit_option_some","","",17,[[["self"],["f"]],["encoderesult"]]],[11,"emit_seq","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_seq_elt","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_map","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_map_elt_key","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_map_elt_val","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"encode","","",9,[[["self"],["s"]],["result"]]],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,[[["read"]],["result",["buildererror"]]]],[11,"from_str","","Decodes a json value from a string",9,[[["str"]],["result",["buildererror"]]]],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,[[["self"]],["prettyjson"]]],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,[[["self"],["str"]],["option",["json"]]]],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,N],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,[[["self"],["str"]],["option",["json"]]]],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,[[["self"]],["option",["object"]]]],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,[[["self"]],["option",["object"]]]],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,[[["self"]],["option",["object"]]]],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,[[["self"]],["option",["array"]]]],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,[[["self"]],["option",["array"]]]],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,[[["self"]],["option",["array"]]]],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,[[["self"]],["option",["str"]]]],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,[[["self"]],["option",["u64"]]]],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,[[["self"]],["option",["f64"]]]],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,[[["self"]],["option",["bool"]]]],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,[[["self"]],["option"]]],[11,"index","","",9,[[["self"],["str"]],["json"]]],[11,"index","","",9,[[["self"],["usize"]],["json"]]],[11,"eq","","",14,[[["self"],["jsonevent"]],["bool"]]],[11,"ne","","",14,[[["self"],["jsonevent"]],["bool"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["stackelement"]],["bool"]]],[11,"ne","","",15,[[["self"],["stackelement"]],["bool"]]],[11,"clone","","",15,[[["self"]],["stackelement"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"new","","",18,[[],["stack"]]],[11,"len","","Returns The number of elements in the Stack.",18,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the stack is empty.",18,[[["self"]],["bool"]]],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,[[["self"],["usize"]],["stackelement"]]],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,N],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,N],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,N],[11,"top","","Returns the top-most element (if any).",18,[[["self"]],["option",["stackelement"]]]],[11,"next","","",19,[[["self"]],["option",["jsonevent"]]]],[11,"new","","Creates the JSON parser.",19,[[["t"]],["parser"]]],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,[[["self"]],["stack"]]],[11,"new","","Create a JSON Builder.",20,[[["t"]],["builder"]]],[11,"build","","",20,[[["self"]],["result",["json","buildererror"]]]],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,[[["json"]],["decoder"]]],[11,"read_nil","","",21,[[["self"]],["decoderesult"]]],[11,"read_usize","","",21,[[["self"]],["decoderesult",["usize"]]]],[11,"read_u8","","",21,[[["self"]],["decoderesult",["u8"]]]],[11,"read_u16","","",21,[[["self"]],["decoderesult",["u16"]]]],[11,"read_u32","","",21,[[["self"]],["decoderesult",["u32"]]]],[11,"read_u64","","",21,[[["self"]],["decoderesult",["u64"]]]],[11,"read_isize","","",21,[[["self"]],["decoderesult",["isize"]]]],[11,"read_i8","","",21,[[["self"]],["decoderesult",["i8"]]]],[11,"read_i16","","",21,[[["self"]],["decoderesult",["i16"]]]],[11,"read_i32","","",21,[[["self"]],["decoderesult",["i32"]]]],[11,"read_i64","","",21,[[["self"]],["decoderesult",["i64"]]]],[11,"read_f32","","",21,[[["self"]],["decoderesult",["f32"]]]],[11,"read_f64","","",21,[[["self"]],["decoderesult",["f64"]]]],[11,"read_bool","","",21,[[["self"]],["decoderesult",["bool"]]]],[11,"read_char","","",21,[[["self"]],["decoderesult",["char"]]]],[11,"read_str","","",21,[[["self"]],["decoderesult",["string"]]]],[11,"read_enum","","",21,[[["self"],["str"],["f"]],["decoderesult"]]],[11,"read_enum_variant","","",21,N],[11,"read_enum_variant_arg","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"read_enum_struct_variant","","",21,N],[11,"read_enum_struct_variant_field","","",21,[[["self"],["str"],["usize"],["f"]],["decoderesult"]]],[11,"read_struct","","",21,[[["self"],["str"],["usize"],["f"]],["decoderesult"]]],[11,"read_struct_field","","",21,[[["self"],["str"],["usize"],["f"]],["decoderesult"]]],[11,"read_tuple","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"read_tuple_arg","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"read_tuple_struct","","",21,[[["self"],["str"],["usize"],["f"]],["decoderesult"]]],[11,"read_tuple_struct_arg","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"read_option","","",21,[[["self"],["f"]],["decoderesult"]]],[11,"read_seq","","",21,[[["self"],["f"]],["decoderesult"]]],[11,"read_seq_elt","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"read_map","","",21,[[["self"],["f"]],["decoderesult"]]],[11,"read_map_elt_key","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"read_map_elt_val","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"error","","",21,[[["self"],["str"]],["decodererror"]]],[11,"to_json","","",9,[[["self"]],["json"]]],[11,"fmt","","Encodes a json value into a string",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Encodes a json value into a string",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Encodes a json value into a string",23,[[["self"],["formatter"]],["result"]]],[11,"indent","","Set the indentation level for the emitted JSON",24,[[["self"],["u32"]],["asprettyjson"]]],[11,"fmt","","Encodes a json value into a string",24,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",9,[[["str"]],["result",["json","parsererror"]]]],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",N,N],[16,"Error","","The error type for method results.",25,N],[10,"read_nil","","Read a nil value.",25,[[["self"]],["result"]]],[10,"read_usize","","Read a usize value.",25,[[["self"]],["result",["usize"]]]],[10,"read_u64","","Read a u64 value.",25,[[["self"]],["result",["u64"]]]],[10,"read_u32","","Read a u32 value.",25,[[["self"]],["result",["u32"]]]],[10,"read_u16","","Read a u16 value.",25,[[["self"]],["result",["u16"]]]],[10,"read_u8","","Read a u8 value.",25,[[["self"]],["result",["u8"]]]],[10,"read_isize","","Read a isize value.",25,[[["self"]],["result",["isize"]]]],[10,"read_i64","","Read a i64 value.",25,[[["self"]],["result",["i64"]]]],[10,"read_i32","","Read a i32 value.",25,[[["self"]],["result",["i32"]]]],[10,"read_i16","","Read a i16 value.",25,[[["self"]],["result",["i16"]]]],[10,"read_i8","","Read a i8 value.",25,[[["self"]],["result",["i8"]]]],[10,"read_bool","","Read a bool value.",25,[[["self"]],["result",["bool"]]]],[10,"read_f64","","Read a f64 value.",25,[[["self"]],["result",["f64"]]]],[10,"read_f32","","Read a f32 value.",25,[[["self"]],["result",["f32"]]]],[10,"read_char","","Read a char value.",25,[[["self"]],["result",["char"]]]],[10,"read_str","","Read a string value.",25,[[["self"]],["result",["string"]]]],[10,"read_enum","","Read an enumeration value.",25,[[["self"],["str"],["f"]],["result"]]],[10,"read_enum_variant","","Read an enumeration value.",25,N],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,[[["self"],["usize"],["f"]],["result"]]],[10,"read_enum_struct_variant","","Read an enumeration value.",25,N],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"read_struct","","Read an struct value.",25,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"read_struct_field","","Read a field for a struct value.",25,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"read_tuple","","Read a tuple value.",25,[[["self"],["usize"],["f"]],["result"]]],[10,"read_tuple_arg","","Read a data item for a tuple.",25,[[["self"],["usize"],["f"]],["result"]]],[10,"read_tuple_struct","","Read a tuple struct value.",25,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,[[["self"],["usize"],["f"]],["result"]]],[10,"read_option","","Read an optional value.",25,[[["self"],["f"]],["result"]]],[10,"read_seq","","Read a sequence of values.",25,[[["self"],["f"]],["result"]]],[10,"read_seq_elt","","Read an element in the sequence.",25,[[["self"],["usize"],["f"]],["result"]]],[10,"read_map","","Read an associative container (map).",25,[[["self"],["f"]],["result"]]],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,[[["self"],["usize"],["f"]],["result"]]],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,[[["self"],["usize"],["f"]],["result"]]],[10,"error","","Record a decoding error.",25,N],[8,"Encoder","","Trait for writing out an encoding when serializing.",N,N],[16,"Error","","The error type for method results.",26,N],[10,"emit_nil","","Emit a nil value.",26,[[["self"]],["result"]]],[10,"emit_usize","","Emit a usize value.",26,[[["self"],["usize"]],["result"]]],[10,"emit_u64","","Emit a u64 value.",26,[[["self"],["u64"]],["result"]]],[10,"emit_u32","","Emit a u32 value.",26,[[["self"],["u32"]],["result"]]],[10,"emit_u16","","Emit a u16 value.",26,[[["self"],["u16"]],["result"]]],[10,"emit_u8","","Emit a u8 value.",26,[[["self"],["u8"]],["result"]]],[10,"emit_isize","","Emit a isize value.",26,[[["self"],["isize"]],["result"]]],[10,"emit_i64","","Emit a i64 value.",26,[[["self"],["i64"]],["result"]]],[10,"emit_i32","","Emit a i32 value.",26,[[["self"],["i32"]],["result"]]],[10,"emit_i16","","Emit a i16 value.",26,[[["self"],["i16"]],["result"]]],[10,"emit_i8","","Emit a i8 value.",26,[[["self"],["i8"]],["result"]]],[10,"emit_bool","","Emit a bool value.",26,[[["self"],["bool"]],["result"]]],[10,"emit_f64","","Emit a f64 value.",26,[[["self"],["f64"]],["result"]]],[10,"emit_f32","","Emit a f32 value.",26,[[["self"],["f32"]],["result"]]],[10,"emit_char","","Emit a char value.",26,[[["self"],["char"]],["result"]]],[10,"emit_str","","Emit a string value.",26,[[["self"],["str"]],["result"]]],[10,"emit_enum","","Emit an enumeration value.",26,[[["self"],["str"],["f"]],["result"]]],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,[[["self"],["str"],["usize"],["usize"],["f"]],["result"]]],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,[[["self"],["str"],["usize"],["usize"],["f"]],["result"]]],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"emit_struct","","Emit a struct value.",26,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"emit_struct_field","","Emit a field item for a struct.",26,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"emit_tuple","","Emit a tuple value.",26,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_option","","Emit an optional value.",26,[[["self"],["f"]],["result"]]],[10,"emit_option_none","","Emit the `None` optional value.",26,[[["self"]],["result"]]],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,[[["self"],["f"]],["result"]]],[10,"emit_seq","","Emit a sequence of values.",26,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_seq_elt","","Emit an element in a sequence.",26,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_map","","Emit an associative container (map).",26,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,[[["self"],["usize"],["f"]],["result"]]],[8,"Decodable","","Trait for deserializing a type.",N,N],[10,"decode","","Deserialize a value using a `Decoder`.",27,[[["d"]],["result"]]],[8,"Encodable","","Trait for serializing a type.",N,N],[10,"encode","","Serialize a value using an `Encoder`.",28,[[["self"],["s"]],["result"]]],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",N,N],[10,"read_to_vec","","Read a sequence into a vector.",29,[[["self"],["f"]],["result",["vec"]]]],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",N,N],[10,"emit_from_vec","","Emit a vector as a sequence.",30,N]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["secp256k1"]={"doc":"Secp256k1 Rust bindings for Pieter Wuille's secp256k1 library, which is used for fast and accurate manipulation of ECDSA signatures on the secp256k1 curve. Such signatures are used extensively by the Bitcoin network and its derivatives.","items":[[3,"RecoveryId","secp256k1","A tag used for recovering the public key from a compact signature",N,N],[3,"Signature","","An ECDSA signature",N,N],[3,"RecoverableSignature","","An ECDSA signature with a recovery ID for pubkey recovery",N,N],[3,"Message","","A (hashed) message input to an ECDSA signature",N,N],[3,"Secp256k1","","The secp256k1 engine, used to execute all signature operations",N,N],[4,"Error","","An ECDSA error",N,N],[13,"IncapableContext","","A `Secp256k1` was used for an operation, but it was not created to support this (so necessary precomputations have not been done)",0,N],[13,"IncorrectSignature","","Signature failed verification",0,N],[13,"InvalidMessage","","Badly sized message (\"messages\" are actually fixed-sized digests; see the `MESSAGE_SIZE` constant)",0,N],[13,"InvalidPublicKey","","Bad public key",0,N],[13,"InvalidSignature","","Bad signature",0,N],[13,"InvalidSecretKey","","Bad secret key",0,N],[13,"InvalidRecoveryId","","Bad recovery id",0,N],[4,"ContextFlag","","Flags used to determine the capabilities of a `Secp256k1` object; the more capabilities, the more expensive it is to create.",N,N],[13,"None","","Can neither sign nor verify signatures (cheapest to create, useful for cases not involving signatures, such as creating keys from slices)",1,N],[13,"SignOnly","","Can sign but not verify signatures",1,N],[13,"VerifyOnly","","Can verify but not create signatures",1,N],[13,"Full","","Can verify and create signatures",1,N],[0,"constants","","Constants Constants related to the API and the underlying curve",N,N],[17,"MESSAGE_SIZE","secp256k1::constants","The size (in bytes) of a message",N,N],[17,"SECRET_KEY_SIZE","","The size (in bytes) of a secret key",N,N],[17,"PUBLIC_KEY_SIZE","","The size (in bytes) of a public key array. This only needs to be 65 but must be 72 for compatibility with the `ArrayVec` library.",N,N],[17,"UNCOMPRESSED_PUBLIC_KEY_SIZE","","The size (in bytes) of an uncompressed public key",N,N],[17,"COMPRESSED_PUBLIC_KEY_SIZE","","The size (in bytes) of a compressed public key",N,N],[17,"MAX_SIGNATURE_SIZE","","The maximum size of a signature",N,N],[17,"SCHNORR_SIGNATURE_SIZE","","The size of a Schnorr signature",N,N],[17,"COMPACT_SIGNATURE_SIZE","","The maximum size of a compact signature",N,N],[17,"CURVE_ORDER","","The order of the secp256k1 curve",N,N],[17,"GENERATOR_X","","The X coordinate of the generator",N,N],[17,"GENERATOR_Y","","The Y coordinate of the generator",N,N],[0,"ecdh","secp256k1","ECDH Support for shared secret computations",N,N],[3,"SharedSecret","secp256k1::ecdh","A tag used for recovering the public key from a compact signature",N,N],[11,"clone","","",2,[[["self"]],["sharedsecret"]]],[11,"eq","","",2,[[["self"],["sharedsecret"]],["bool"]]],[11,"ne","","",2,[[["self"],["sharedsecret"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new shared secret from a pubkey and secret key",2,[[["secp256k1"],["publickey"],["secretkey"]],["sharedsecret"]]],[11,"new_raw","","Creates a new unhashed shared secret from a pubkey and secret key",2,[[["secp256k1"],["publickey"],["secretkey"]],["sharedsecret"]]],[11,"as_ptr","","Obtains a raw pointer suitable for use with FFI functions",2,N],[11,"from","","",2,[[["sharedsecret"]],["sharedsecret"]]],[11,"index","","",2,[[["self"],["usize"]],["u8"]]],[11,"index","","",2,N],[11,"index","","",2,N],[11,"index","","",2,N],[0,"ffi","secp256k1","FFI bindings Direct bindings to the underlying C library functions. These should not be needed for most users.",N,N],[3,"Context","secp256k1::ffi","A Secp256k1 context, containing various precomputed values and such needed to do elliptic curve computations. If you create one of these with `secp256k1_context_create` you MUST destroy it with `secp256k1_context_destroy`, or else you will have a memory leak.",N,N],[3,"PublicKey","","Library-internal representation of a Secp256k1 public key",N,N],[3,"Signature","","Library-internal representation of a Secp256k1 signature",N,N],[3,"RecoverableSignature","","Library-internal representation of a Secp256k1 signature + recovery ID",N,N],[3,"SharedSecret","","Library-internal representation of an ECDH shared secret",N,N],[7,"secp256k1_nonce_function_rfc6979","","",N,N],[7,"secp256k1_nonce_function_default","","",N,N],[5,"secp256k1_context_create","","",N,N],[5,"secp256k1_context_clone","","",N,N],[5,"secp256k1_context_destroy","","",N,N],[5,"secp256k1_context_randomize","","",N,N],[5,"secp256k1_ec_pubkey_parse","","",N,N],[5,"secp256k1_ec_pubkey_serialize","","",N,N],[5,"secp256k1_ecdsa_signature_parse_der","","",N,N],[5,"ecdsa_signature_parse_der_lax","","",N,N],[5,"secp256k1_ecdsa_signature_serialize_der","","",N,N],[5,"secp256k1_ecdsa_recoverable_signature_parse_compact","","",N,N],[5,"secp256k1_ecdsa_recoverable_signature_serialize_compact","","",N,N],[5,"secp256k1_ecdsa_recoverable_signature_convert","","",N,N],[5,"secp256k1_ecdsa_signature_normalize","","",N,N],[5,"secp256k1_ecdsa_verify","","",N,N],[5,"secp256k1_ecdsa_sign","","",N,N],[5,"secp256k1_ecdsa_sign_recoverable","","",N,N],[5,"secp256k1_ecdsa_recover","","",N,N],[5,"secp256k1_schnorr_sign","","",N,N],[5,"secp256k1_schnorr_verify","","",N,N],[5,"secp256k1_schnorr_recover","","",N,N],[5,"secp256k1_ec_seckey_verify","","",N,N],[5,"secp256k1_ec_pubkey_create","","",N,N],[5,"secp256k1_ec_privkey_tweak_add","","",N,N],[5,"secp256k1_ec_pubkey_tweak_add","","",N,N],[5,"secp256k1_ec_privkey_tweak_mul","","",N,N],[5,"secp256k1_ec_pubkey_tweak_mul","","",N,N],[5,"secp256k1_ec_pubkey_combine","","",N,N],[5,"secp256k1_ecdh","","",N,N],[5,"secp256k1_ecdh_raw","","",N,N],[5,"secp256k1_ec_privkey_inverse","","",N,N],[6,"NonceFn","","A nonce generation function. Ordinary users of the library never need to see this type; only if you need to control nonce generation do you need to use it. I have deliberately made this hard to do: you have to write your own wrapper around the FFI functions to use it. And it's an unsafe type. Nonces are generated deterministically by RFC6979 by default; there should be no need to ever change this.",N,N],[17,"SECP256K1_START_NONE","","Flag for context to enable no precomputation",N,N],[17,"SECP256K1_START_VERIFY","","Flag for context to enable verification precomputation",N,N],[17,"SECP256K1_START_SIGN","","Flag for context to enable signing precomputation",N,N],[17,"SECP256K1_SER_UNCOMPRESSED","","Flag for keys to indicate uncompressed serialization format",N,N],[17,"SECP256K1_SER_COMPRESSED","","Flag for keys to indicate compressed serialization format",N,N],[11,"clone","","",3,[[["self"]],["context"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",4,N],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",4,N],[11,"len","","Returns the length of the object as an array",4,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether the object as an array is empty",4,[[["self"]],["bool"]]],[11,"eq","","",4,[[["self"],["publickey"]],["bool"]]],[11,"clone","","",4,[[["self"]],["publickey"]]],[11,"index","","",4,[[["self"],["usize"]],["c_uchar"]]],[11,"index","","",4,N],[11,"index","","",4,N],[11,"index","","",4,N],[11,"index","","",4,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new (zeroed) public key usable for the FFI interface",4,[[],["publickey"]]],[11,"blank","","Create a new (uninitialized) public key usable for the FFI interface",4,[[],["publickey"]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",5,N],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",5,N],[11,"len","","Returns the length of the object as an array",5,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether the object as an array is empty",5,[[["self"]],["bool"]]],[11,"eq","","",5,[[["self"],["signature"]],["bool"]]],[11,"clone","","",5,[[["self"]],["signature"]]],[11,"index","","",5,[[["self"],["usize"]],["c_uchar"]]],[11,"index","","",5,N],[11,"index","","",5,N],[11,"index","","",5,N],[11,"index","","",5,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",6,N],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",6,N],[11,"len","","Returns the length of the object as an array",6,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether the object as an array is empty",6,[[["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["recoverablesignature"]],["bool"]]],[11,"clone","","",6,[[["self"]],["recoverablesignature"]]],[11,"index","","",6,[[["self"],["usize"]],["c_uchar"]]],[11,"index","","",6,N],[11,"index","","",6,N],[11,"index","","",6,N],[11,"index","","",6,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new (zeroed) signature usable for the FFI interface",5,[[],["signature"]]],[11,"blank","","Create a new (uninitialized) signature usable for the FFI interface",5,[[],["signature"]]],[11,"new","","Create a new (zeroed) signature usable for the FFI interface",6,[[],["recoverablesignature"]]],[11,"blank","","Create a new (uninitialized) signature usable for the FFI interface",6,[[],["recoverablesignature"]]],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",7,N],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",7,N],[11,"len","","Returns the length of the object as an array",7,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether the object as an array is empty",7,[[["self"]],["bool"]]],[11,"eq","","",7,[[["self"],["sharedsecret"]],["bool"]]],[11,"clone","","",7,[[["self"]],["sharedsecret"]]],[11,"index","","",7,[[["self"],["usize"]],["c_uchar"]]],[11,"index","","",7,N],[11,"index","","",7,N],[11,"index","","",7,N],[11,"index","","",7,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new (zeroed) signature usable for the FFI interface",7,[[],["sharedsecret"]]],[11,"blank","","Create a new (uninitialized) signature usable for the FFI interface",7,[[],["sharedsecret"]]],[0,"key","secp256k1","Public and secret keys",N,N],[3,"SecretKey","secp256k1::key","Secret 256-bit key used as `x` in an ECDSA signature",N,N],[3,"PublicKey","","A Secp256k1 public key, used for verification of signatures",N,N],[7,"ONE","","The number 1 encoded as a secret key Deprecated; `static` is not what I want; use `ONE_KEY` instead",N,N],[17,"ZERO_KEY","","The number 0 encoded as a secret key",N,N],[17,"ONE_KEY","","The number 1 encoded as a secret key",N,N],[17,"MINUS_ONE_KEY","","The number -1 encoded as a secret key",N,N],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",8,N],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",8,N],[11,"len","","Returns the length of the object as an array",8,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether the object as an array is empty",8,[[["self"]],["bool"]]],[11,"eq","","",8,[[["self"],["secretkey"]],["bool"]]],[11,"clone","","",8,[[["self"]],["secretkey"]]],[11,"index","","",8,[[["self"],["usize"]],["u8"]]],[11,"index","","",8,N],[11,"index","","",8,N],[11,"index","","",8,N],[11,"index","","",8,N],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"from","","",8,N],[11,"clone","","",9,[[["self"]],["publickey"]]],[11,"eq","","",9,[[["self"],["publickey"]],["bool"]]],[11,"ne","","",9,[[["self"],["publickey"]],["bool"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"hash","","",9,N],[11,"new","","Creates a new random secret key",8,[[["secp256k1"],["r"]],["secretkey"]]],[11,"from_slice","","Converts a `SECRET_KEY_SIZE`-byte slice to a secret key",8,N],[11,"add_assign","","Adds one secret key to another, modulo the curve order",8,[[["self"],["secp256k1"],["secretkey"]],["result",["error"]]]],[11,"mul_assign","","Multiplies one secret key by another, modulo the curve order",8,[[["self"],["secp256k1"],["secretkey"]],["result",["error"]]]],[11,"inv_assign","","Inverts (1 / self) this secret key.",8,[[["self"],["secp256k1"]],["result",["error"]]]],[11,"new","","Creates a new zeroed out public key",9,[[],["publickey"]]],[11,"is_valid","","Determines whether a pubkey is valid",9,[[["self"]],["bool"]]],[11,"as_ptr","","Obtains a raw pointer suitable for use with FFI functions",9,N],[11,"from_secret_key","","Creates a new public key from a secret key.",9,[[["secp256k1"],["secretkey"]],["result",["publickey","error"]]]],[11,"from_slice","","Creates a public key directly from a slice",9,N],[11,"serialize_vec","","Serialize the key as a byte-encoded pair of values. In compressed form the y-coordinate is represented by only a single bit, as x determines it up to one bit.",9,[[["self"],["secp256k1"],["bool"]],["arrayvec"]]],[11,"add_exp_assign","","Adds the pk corresponding to `other` to the pk `self` in place",9,[[["self"],["secp256k1"],["secretkey"]],["result",["error"]]]],[11,"add_assign","","Adds another point on the curve in place",9,[[["self"],["secp256k1"],["publickey"]],["result",["error"]]]],[11,"mul_assign","","Multiplies this point by `secret` scalar",9,[[["self"],["secp256k1"],["secretkey"]],["result",["error"]]]],[11,"from","","",9,[[["publickey"]],["publickey"]]],[0,"schnorr","secp256k1","Schnorr signatures",N,N],[3,"Signature","secp256k1::schnorr","A Schnorr signature.",N,N],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",10,N],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",10,N],[11,"len","","Returns the length of the object as an array",10,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether the object as an array is empty",10,[[["self"]],["bool"]]],[11,"eq","","",10,[[["self"],["signature"]],["bool"]]],[11,"clone","","",10,[[["self"]],["signature"]]],[11,"index","","",10,[[["self"],["usize"]],["u8"]]],[11,"index","","",10,N],[11,"index","","",10,N],[11,"index","","",10,N],[11,"index","","",10,N],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"deserialize","","Deserializes a signature from a 64-byte vector",10,N],[11,"serialize","","Serializes a signature to a 64-byte vector",10,[[["self"]],["vec",["u8"]]]],[11,"sign_schnorr","secp256k1","Create a Schnorr signature",11,[[["self"],["message"],["secretkey"]],["result",["signature","error"]]]],[11,"verify_schnorr","","Verify a Schnorr signature",11,[[["self"],["message"],["signature"],["publickey"]],["result",["error"]]]],[11,"recover_schnorr","","Retrieves the public key for which `sig` is a valid signature for `msg`. Requires a verify-capable context.",11,[[["self"],["message"],["signature"]],["result",["publickey","error"]]]],[11,"clone","","",12,[[["self"]],["recoveryid"]]],[11,"eq","","",12,[[["self"],["recoveryid"]],["bool"]]],[11,"ne","","",12,[[["self"],["recoveryid"]],["bool"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["signature"]]],[11,"eq","","",13,[[["self"],["signature"]],["bool"]]],[11,"ne","","",13,[[["self"],["signature"]],["bool"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["recoverablesignature"]]],[11,"eq","","",14,[[["self"],["recoverablesignature"]],["bool"]]],[11,"ne","","",14,[[["self"],["recoverablesignature"]],["bool"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"from_i32","","Allows library users to create valid recovery IDs from i32.",12,[[["i32"]],["result",["recoveryid","error"]]]],[11,"to_i32","","Allows library users to convert recovery IDs to i32.",12,[[["self"]],["i32"]]],[11,"from_der","","Converts a DER-encoded byte slice to a signature",13,N],[11,"from_der_lax","","Converts a \"lax DER\"-encoded byte slice to a signature. This is basically only useful for validating signatures in the Bitcoin blockchain from before 2016. It should never be used in new applications. This library does not support serializing to this \"format\"",13,N],[11,"normalize_s","","Normalizes a signature to a \"low S\" form. In ECDSA, signatures are of the form (r, s) where r and s are numbers lying in some finite field. The verification equation will pass for (r, s) iff it passes for (r, -s), so it is possible to ``modify'' signatures in transit by flipping the sign of s. This does not constitute a forgery since the signed message still cannot be changed, but for some applications, changing even the signature itself can be a problem. Such applications require a \"strong signature\". It is believed that ECDSA is a strong signature except for this ambiguity in the sign of s, so to accomodate these applications libsecp256k1 will only accept signatures for which s is in the lower half of the field range. This eliminates the ambiguity.",13,[[["self"],["secp256k1"]]]],[11,"as_ptr","","Obtains a raw pointer suitable for use with FFI functions",13,N],[11,"as_mut_ptr","","Obtains a raw mutable pointer suitable for use with FFI functions",13,N],[11,"serialize_der","","Serializes the signature in DER format",13,[[["self"],["secp256k1"]],["vec",["u8"]]]],[11,"from","","",13,[[["signature"]],["signature"]]],[11,"from_compact","","Converts a compact-encoded byte slice to a signature. This representation is nonstandard and defined by the libsecp256k1 library.",14,N],[11,"as_ptr","","Obtains a raw pointer suitable for use with FFI functions",14,N],[11,"serialize_compact","","Serializes the recoverable signature in compact format",14,N],[11,"to_standard","","Converts a recoverable signature to a non-recoverable one (this is needed for verification",14,[[["self"],["secp256k1"]],["signature"]]],[11,"from","","",14,[[["recoverablesignature"]],["recoverablesignature"]]],[11,"index","","",13,[[["self"],["usize"]],["u8"]]],[11,"index","","",13,N],[11,"index","","",13,N],[11,"index","","",13,N],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",15,N],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",15,N],[11,"len","","Returns the length of the object as an array",15,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether the object as an array is empty",15,[[["self"]],["bool"]]],[11,"eq","","",15,[[["self"],["message"]],["bool"]]],[11,"clone","","",15,[[["self"]],["message"]]],[11,"index","","",15,[[["self"],["usize"]],["u8"]]],[11,"index","","",15,N],[11,"index","","",15,N],[11,"index","","",15,N],[11,"index","","",15,N],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"from_slice","","Converts a `MESSAGE_SIZE`-byte slice to a message object",15,N],[11,"from","","",15,N],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"clone","","",0,[[["self"]],["error"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"eq","","",1,[[["self"],["contextflag"]],["bool"]]],[11,"clone","","",1,[[["self"]],["contextflag"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",11,[[["self"]],["secp256k1"]]],[11,"eq","","",11,[[["self"],["secp256k1"]],["bool"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","","",11,[[["self"]]]],[11,"new","","Creates a new Secp256k1 context",11,[[],["secp256k1"]]],[11,"with_caps","","Creates a new Secp256k1 context with the specified capabilities",11,[[["contextflag"]],["secp256k1"]]],[11,"without_caps","","Creates a new Secp256k1 context with no capabilities (just de/serialization)",11,[[],["secp256k1"]]],[11,"randomize","","(Re)randomizes the Secp256k1 context for cheap sidechannel resistence; see comment in libsecp256k1 commit d2275795f by Gregory Maxwell",11,[[["self"],["r"]]]],[11,"generate_keypair","","Generates a random keypair. Convenience function for `key::SecretKey::new` and `key::PublicKey::from_secret_key`; call those functions directly for batch key generation. Requires a signing-capable context.",11,[[["self"],["r"]],["result",["error"]]]],[11,"sign","","Constructs a signature for `msg` using the secret key `sk` and RFC6979 nonce Requires a signing-capable context.",11,[[["self"],["message"],["secretkey"]],["result",["signature","error"]]]],[11,"sign_recoverable","","Constructs a signature for `msg` using the secret key `sk` and RFC6979 nonce Requires a signing-capable context.",11,[[["self"],["message"],["secretkey"]],["result",["recoverablesignature","error"]]]],[11,"recover","","Determines the public key for which `sig` is a valid signature for `msg`. Requires a verify-capable context.",11,[[["self"],["message"],["recoverablesignature"]],["result",["publickey","error"]]]],[11,"verify","","Checks that `sig` is a valid ECDSA signature for `msg` using the public key `pubkey`. Returns `Ok(true)` on success. Note that this function cannot be used for Bitcoin consensus checking since there may exist signatures which OpenSSL would verify but not libsecp256k1, or vice-versa. Requires a verify-capable context.",11,[[["self"],["message"],["signature"],["publickey"]],["result",["error"]]]]],"paths":[[4,"Error"],[4,"ContextFlag"],[3,"SharedSecret"],[3,"Context"],[3,"PublicKey"],[3,"Signature"],[3,"RecoverableSignature"],[3,"SharedSecret"],[3,"SecretKey"],[3,"PublicKey"],[3,"Signature"],[3,"Secp256k1"],[3,"RecoveryId"],[3,"Signature"],[3,"RecoverableSignature"],[3,"Message"]]};
searchIndex["serde"]={"doc":"Serde","items":[[0,"de","serde","Generic data structure deserialization framework.",N,N],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",N,N],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",N,N],[13,"Bool","","The input contained a boolean value that was not expected.",0,N],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",0,N],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",0,N],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",0,N],[13,"Char","","The input contained a `char` that was not expected.",0,N],[13,"Str","","The input contained a `&str` or `String` that was not expected.",0,N],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",0,N],[13,"Unit","","The input contained a unit `()` that was not expected.",0,N],[13,"Option","","The input contained an `Option<T>` that was not expected.",0,N],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",0,N],[13,"Seq","","The input contained a sequence that was not expected.",0,N],[13,"Map","","The input contained a map that was not expected.",0,N],[13,"Enum","","The input contained an enum that was not expected.",0,N],[13,"UnitVariant","","The input contained a unit variant that was not expected.",0,N],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",0,N],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",0,N],[13,"StructVariant","","The input contained a struct variant that was not expected.",0,N],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",0,N],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",N,N],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",N,N],[3,"UnitDeserializer","","A deserializer holding a `()`.",N,N],[3,"BoolDeserializer","","A deserializer holding a `bool`.",N,N],[3,"I8Deserializer","","A deserializer holding an `i8`.",N,N],[3,"I16Deserializer","","A deserializer holding an `i16`.",N,N],[3,"I32Deserializer","","A deserializer holding an `i32`.",N,N],[3,"I64Deserializer","","A deserializer holding an `i64`.",N,N],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",N,N],[3,"U8Deserializer","","A deserializer holding a `u8`.",N,N],[3,"U16Deserializer","","A deserializer holding a `u16`.",N,N],[3,"U64Deserializer","","A deserializer holding a `u64`.",N,N],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",N,N],[3,"F32Deserializer","","A deserializer holding an `f32`.",N,N],[3,"F64Deserializer","","A deserializer holding an `f64`.",N,N],[3,"CharDeserializer","","A deserializer holding a `char`.",N,N],[3,"I128Deserializer","","A deserializer holding an `i128`.",N,N],[3,"U128Deserializer","","A deserializer holding a `u128`.",N,N],[3,"U32Deserializer","","A deserializer holding a `u32`.",N,N],[3,"StrDeserializer","","A deserializer holding a `&str`.",N,N],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",N,N],[3,"StringDeserializer","","A deserializer holding a `String`.",N,N],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",N,N],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",N,N],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",N,N],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",N,N],[3,"MapDeserializer","","A deserializer that iterates over a map.",N,N],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",N,N],[11,"clone","","",1,[[["self"]],["error"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"custom","","",1,[[["t"]],["self"]]],[11,"custom","","",1,[[["t"]],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"deserialize_bool","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",2,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",2,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",2,N],[11,"deserialize_enum","","",2,N],[11,"deserialize_identifier","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",2,[[["self"],["v"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"deserialize_bool","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",3,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",3,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",3,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",3,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",3,N],[11,"deserialize_enum","","",3,N],[11,"deserialize_identifier","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",3,[[["self"],["v"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"deserialize_bool","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",4,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",4,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",4,N],[11,"deserialize_enum","","",4,N],[11,"deserialize_identifier","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",4,[[["self"],["v"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"deserialize_bool","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",5,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",5,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",5,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",5,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",5,N],[11,"deserialize_enum","","",5,N],[11,"deserialize_identifier","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",5,[[["self"],["v"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"deserialize_bool","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",6,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",6,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",6,N],[11,"deserialize_enum","","",6,N],[11,"deserialize_identifier","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",6,[[["self"],["v"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"deserialize_bool","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",7,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",7,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",7,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",7,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",7,N],[11,"deserialize_enum","","",7,N],[11,"deserialize_identifier","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",7,[[["self"],["v"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["self"]]],[11,"deserialize_bool","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",8,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",8,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",8,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",8,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",8,N],[11,"deserialize_enum","","",8,N],[11,"deserialize_identifier","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",8,[[["self"],["v"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["self"]]],[11,"deserialize_bool","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",9,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",9,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",9,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",9,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",9,N],[11,"deserialize_enum","","",9,N],[11,"deserialize_identifier","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",9,[[["self"],["v"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["self"]]],[11,"deserialize_bool","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",10,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",10,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",10,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",10,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",10,N],[11,"deserialize_enum","","",10,N],[11,"deserialize_identifier","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",10,[[["self"],["v"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["self"]]],[11,"deserialize_bool","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",11,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",11,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",11,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",11,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",11,N],[11,"deserialize_enum","","",11,N],[11,"deserialize_identifier","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",11,[[["self"],["v"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["self"]]],[11,"deserialize_bool","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",12,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",12,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",12,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",12,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",12,N],[11,"deserialize_enum","","",12,N],[11,"deserialize_identifier","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",12,[[["self"],["v"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["self"]]],[11,"deserialize_bool","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",13,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",13,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",13,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",13,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",13,N],[11,"deserialize_enum","","",13,N],[11,"deserialize_identifier","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",13,[[["self"],["v"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["self"]]],[11,"deserialize_bool","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",14,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",14,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",14,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",14,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",14,N],[11,"deserialize_enum","","",14,N],[11,"deserialize_identifier","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",14,[[["self"],["v"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["self"]]],[11,"deserialize_bool","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",15,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",15,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",15,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",15,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",15,N],[11,"deserialize_enum","","",15,N],[11,"deserialize_identifier","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",15,[[["self"],["v"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["self"]]],[11,"deserialize_bool","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",16,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",16,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",16,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",16,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",16,N],[11,"deserialize_enum","","",16,N],[11,"deserialize_identifier","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",16,[[["self"],["v"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["self"]]],[11,"deserialize_bool","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",17,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",17,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",17,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",17,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",17,N],[11,"deserialize_enum","","",17,N],[11,"deserialize_identifier","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",17,[[["self"],["v"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"clone","","",18,[[["self"]],["self"]]],[11,"deserialize_bool","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",18,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",18,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",18,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",18,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",18,N],[11,"deserialize_identifier","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",18,N],[11,"variant_seed","","",18,[[["self"],["t"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",19,[[["self"]],["self"]]],[11,"deserialize_any","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",19,N],[11,"deserialize_bool","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",19,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",19,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",19,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",19,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",19,N],[11,"deserialize_identifier","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",19,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",19,[[["self"],["t"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["self"]]],[11,"new","","Create a new borrowed deserializer from the given string.",20,[[["str"]],["borrowedstrdeserializer"]]],[11,"deserialize_any","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",20,N],[11,"deserialize_bool","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",20,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",20,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",20,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",20,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",20,N],[11,"deserialize_identifier","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",20,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",20,[[["self"],["t"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["self"]]],[11,"deserialize_any","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",21,N],[11,"deserialize_bool","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",21,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",21,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",21,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",21,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",21,N],[11,"deserialize_identifier","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",21,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",21,[[["self"],["t"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["self"]]],[11,"deserialize_any","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",22,N],[11,"deserialize_bool","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",22,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",22,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",22,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",22,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",22,N],[11,"deserialize_identifier","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",22,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",22,[[["self"],["t"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",23,[[["self"]],["self"]]],[11,"new","","Create a new borrowed deserializer from the given byte slice.",23,N],[11,"deserialize_any","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",23,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",23,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",23,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",23,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",23,N],[11,"deserialize_identifier","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",23,N],[11,"clone","","",24,[[["self"]],["seqdeserializer"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",24,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",24,[[["self"]],["result"]]],[11,"deserialize_any","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",24,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",24,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",24,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",24,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",24,N],[11,"deserialize_enum","","",24,N],[11,"deserialize_identifier","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",24,[[["self"],["v"]],["result"]]],[11,"next_element_seed","","",24,[[["self"],["v"]],["result",["option"]]]],[11,"size_hint","","",24,[[["self"]],["option",["usize"]]]],[11,"clone","","",25,[[["self"]],["seqaccessdeserializer"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",25,[[["a"]],["self"]]],[11,"deserialize_any","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",25,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",25,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",25,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",25,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",25,N],[11,"deserialize_enum","","",25,N],[11,"deserialize_identifier","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",25,[[["self"],["v"]],["result"]]],[11,"new","","Construct a new `MapDeserializer<I, E>`.",26,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",26,[[["self"]],["result"]]],[11,"deserialize_any","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",26,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_bool","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",26,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",26,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",26,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",26,N],[11,"deserialize_enum","","",26,N],[11,"deserialize_identifier","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",26,[[["self"],["v"]],["result"]]],[11,"next_key_seed","","",26,[[["self"],["t"]],["result",["option"]]]],[11,"next_value_seed","","",26,[[["self"],["t"]],["result"]]],[11,"next_entry_seed","","",26,[[["self"],["tk"],["tv"]],["result",["option"]]]],[11,"size_hint","","",26,[[["self"]],["option",["usize"]]]],[11,"next_element_seed","","",26,[[["self"],["t"]],["result",["option"]]]],[11,"size_hint","","",26,[[["self"]],["option",["usize"]]]],[11,"clone","","",26,[[["self"]],["self"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",27,[[["self"]],["mapaccessdeserializer"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",27,[[["a"]],["self"]]],[11,"deserialize_any","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",27,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",27,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",27,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",27,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",27,N],[11,"deserialize_enum","","",27,N],[11,"deserialize_identifier","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",27,[[["self"],["v"]],["result"]]],[11,"clone","serde::de","",28,[[["self"]],["ignoredany"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"default","","",28,[[],["ignoredany"]]],[11,"expecting","","",28,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","",28,[[["self"],["bool"]],["result"]]],[11,"visit_i64","","",28,[[["self"],["i64"]],["result"]]],[11,"visit_u64","","",28,[[["self"],["u64"]],["result"]]],[11,"visit_f64","","",28,[[["self"],["f64"]],["result"]]],[11,"visit_str","","",28,[[["self"],["str"]],["result"]]],[11,"visit_none","","",28,[[["self"]],["result"]]],[11,"visit_some","","",28,[[["self"],["d"]],["result"]]],[11,"visit_newtype_struct","","",28,[[["self"],["d"]],["result"]]],[11,"visit_unit","","",28,[[["self"]],["result"]]],[11,"visit_seq","","",28,[[["self"],["a"]],["result"]]],[11,"visit_map","","",28,[[["self"],["a"]],["result"]]],[11,"visit_bytes","","",28,N],[11,"deserialize","","",28,[[["d"]],["result",["ignoredany"]]]],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",N,N],[10,"custom","","Raised when there is general error when deserializing a type.",29,[[["t"]],["self"]]],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",29,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",29,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",29,[[["usize"],["expected"]],["self"]]],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",29,N],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",29,N],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",29,[[["str"]],["self"]]],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",29,[[["str"]],["self"]]],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",N,N],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",30,[[["self"],["formatter"]],["result"]]],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",N,N],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,[[["d"]],["result"]]],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",N,N],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",N,N],[16,"Value","","The type produced by using this seed.",32,N],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",32,[[["self"],["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,N],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,N],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,N],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,[[["self"],["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,[[["self"]],["bool"]]],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",N,N],[16,"Value","","The value produced by this visitor.",34,N],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",34,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","The input contains a boolean.",34,[[["self"],["bool"]],["result"]]],[11,"visit_i8","","The input contains an `i8`.",34,[[["self"],["i8"]],["result"]]],[11,"visit_i16","","The input contains an `i16`.",34,[[["self"],["i16"]],["result"]]],[11,"visit_i32","","The input contains an `i32`.",34,[[["self"],["i32"]],["result"]]],[11,"visit_i64","","The input contains an `i64`.",34,[[["self"],["i64"]],["result"]]],[11,"visit_i128","","The input contains a `i128`.",34,[[["self"],["i128"]],["result"]]],[11,"visit_u8","","The input contains a `u8`.",34,[[["self"],["u8"]],["result"]]],[11,"visit_u16","","The input contains a `u16`.",34,[[["self"],["u16"]],["result"]]],[11,"visit_u32","","The input contains a `u32`.",34,[[["self"],["u32"]],["result"]]],[11,"visit_u64","","The input contains a `u64`.",34,[[["self"],["u64"]],["result"]]],[11,"visit_u128","","The input contains a `u128`.",34,[[["self"],["u128"]],["result"]]],[11,"visit_f32","","The input contains an `f32`.",34,[[["self"],["f32"]],["result"]]],[11,"visit_f64","","The input contains an `f64`.",34,[[["self"],["f64"]],["result"]]],[11,"visit_char","","The input contains a `char`.",34,[[["self"],["char"]],["result"]]],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",34,[[["self"],["str"]],["result"]]],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",34,[[["self"],["str"]],["result"]]],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",34,[[["self"],["string"]],["result"]]],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",34,N],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",34,N],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",34,[[["self"],["vec",["u8"]]],["result"]]],[11,"visit_none","","The input contains an optional that is absent.",34,[[["self"]],["result"]]],[11,"visit_some","","The input contains an optional that is present.",34,[[["self"],["d"]],["result"]]],[11,"visit_unit","","The input contains a unit `()`.",34,[[["self"]],["result"]]],[11,"visit_newtype_struct","","The input contains a newtype struct.",34,[[["self"],["d"]],["result"]]],[11,"visit_seq","","The input contains a sequence of elements.",34,[[["self"],["a"]],["result"]]],[11,"visit_map","","The input contains a key-value map.",34,[[["self"],["a"]],["result"]]],[11,"visit_enum","","The input contains an enum.",34,[[["self"],["a"]],["result"]]],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",35,N],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,[[["self"],["t"]],["result",["option"]]]],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",35,[[["self"]],["option",["usize"]]]],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",36,N],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,[[["self"],["k"]],["result",["option"]]]],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",36,[[["self"],["v"]],["result"]]],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,[[["self"],["k"],["v"]],["result",["option"]]]],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,[[["self"]],["result",["option"]]]],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",36,[[["self"]],["result"]]],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",36,[[["self"]],["option",["usize"]]]],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",37,N],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",37,N],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",37,[[["self"],["v"]],["result"]]],[11,"variant","","`variant` is called to identify which variant to deserialize.",37,[[["self"]],["result"]]],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",38,N],[10,"unit_variant","","Called when deserializing a variant with no values.",38,[[["self"]],["result"]]],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",38,[[["self"],["t"]],["result"]]],[11,"newtype_variant","","Called when deserializing a variant with a single value.",38,[[["self"]],["result"]]],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",38,[[["self"],["usize"],["v"]],["result"]]],[10,"struct_variant","","Called when deserializing a struct-like variant.",38,N],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",N,N],[16,"Deserializer","","The type of the deserializer being converted into.",39,N],[10,"into_deserializer","","Convert this value into a deserializer.",39,N],[11,"clone","","",0,[[["self"]],["unexpected"]]],[11,"eq","","",0,[[["self"],["unexpected"]],["bool"]]],[11,"ne","","",0,[[["self"],["unexpected"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[0,"ser","serde","Generic data structure serialization framework.",N,N],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",N,N],[11,"serialize_element","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_element","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_key","","",40,[[["self"],["t"]],["result"]]],[11,"serialize_value","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",N,N],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",41,[[["t"]],["self"]]],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",N,N],[10,"serialize","","Serialize this value into the given Serde serializer.",42,[[["self"],["s"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",N,N],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,N],[16,"Error","","The error type when some error occurs during serialization.",43,N],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,N],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,N],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,N],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,N],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,N],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,N],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,N],[10,"serialize_bool","","Serialize a `bool` value.",43,[[["self"],["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",43,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",43,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",43,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",43,[[["self"],["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",43,[[["self"],["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",43,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",43,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",43,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",43,[[["self"],["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",43,[[["self"],["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",43,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",43,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",43,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,N],[10,"serialize_none","","Serialize a [`None`] value.",43,[[["self"]],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,[[["self"],["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",43,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,[[["self"],["str"],["u32"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,[[["self"],["str"],["u32"],["str"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",43,[[["self"],["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",43,[[["self"],["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,[[["self"],["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,[[["self"]],["bool"]]],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",44,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",44,N],[10,"serialize_element","","Serialize a sequence element.",44,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a sequence.",44,[[["self"]],["result"]]],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",45,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",45,N],[10,"serialize_element","","Serialize a tuple element.",45,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple.",45,[[["self"]],["result"]]],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",46,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",46,N],[10,"serialize_field","","Serialize a tuple struct field.",46,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple struct.",46,[[["self"]],["result"]]],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",47,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",47,N],[10,"serialize_field","","Serialize a tuple variant field.",47,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple variant.",47,[[["self"]],["result"]]],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",48,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",48,N],[10,"serialize_key","","Serialize a map key.",48,[[["self"],["t"]],["result"]]],[10,"serialize_value","","Serialize a map value.",48,[[["self"],["t"]],["result"]]],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",48,[[["self"],["k"],["v"]],["result"]]],[10,"end","","Finish serializing a map.",48,[[["self"]],["result"]]],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",49,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",49,N],[10,"serialize_field","","Serialize a struct field.",49,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct field has been skipped.",49,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct.",49,[[["self"]],["result"]]],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",50,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",50,N],[10,"serialize_field","","Serialize a struct variant field.",50,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct variant field has been skipped.",50,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct variant.",50,[[["self"]],["result"]]],[8,"Deserialize","serde","A data structure that can be deserialized from any data format supported by Serde.",N,N],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,[[["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,N],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,N],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,N],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,[[["self"],["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,[[["self"]],["bool"]]],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",N,N],[10,"serialize","","Serialize this value into the given Serde serializer.",42,[[["self"],["s"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",N,N],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,N],[16,"Error","","The error type when some error occurs during serialization.",43,N],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,N],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,N],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,N],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,N],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,N],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,N],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,N],[10,"serialize_bool","","Serialize a `bool` value.",43,[[["self"],["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",43,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",43,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",43,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",43,[[["self"],["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",43,[[["self"],["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",43,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",43,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",43,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",43,[[["self"],["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",43,[[["self"],["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",43,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",43,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",43,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,N],[10,"serialize_none","","Serialize a [`None`] value.",43,[[["self"]],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,[[["self"],["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",43,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,[[["self"],["str"],["u32"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,[[["self"],["str"],["u32"],["str"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",43,[[["self"],["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",43,[[["self"],["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,[[["self"],["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,[[["self"]],["bool"]]],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",N,N],[14,"serde_if_integer128","","Conditional compilation depending on whether Serde is built with support for 128-bit integers.",N,N]],"paths":[[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]};
searchIndex["serde_derive"]={"doc":"This crate provides Serde's two derive macros.","items":[[5,"derive_serialize","serde_derive","",N,[[["tokenstream"]],["tokenstream"]]],[5,"derive_deserialize","","",N,[[["tokenstream"]],["tokenstream"]]]],"paths":[]};
searchIndex["syn"]={"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal variable name.",N,N],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",N,N],[12,"pound_token","","",0,N],[12,"style","","",0,N],[12,"bracket_token","","",0,N],[12,"path","","",0,N],[12,"tts","","",0,N],[12,"is_sugared_doc","","",0,N],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",N,N],[12,"ident","","",1,N],[12,"paren_token","","",1,N],[12,"nested","","",1,N],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",N,N],[12,"ident","","",2,N],[12,"eq_token","","",2,N],[12,"lit","","",2,N],[3,"Field","","A field of a struct or enum variant.",N,N],[12,"attrs","","Attributes tagged on the field.",3,N],[12,"vis","","Visibility of the field.",3,N],[12,"ident","","Name of the field, if any.",3,N],[12,"colon_token","","",3,N],[12,"ty","","Type of the field.",3,N],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",N,N],[12,"brace_token","","",4,N],[12,"named","","",4,N],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",N,N],[12,"paren_token","","",5,N],[12,"unnamed","","",5,N],[3,"Variant","","An enum variant.",N,N],[12,"attrs","","Attributes tagged on the variant.",6,N],[12,"ident","","Name of the variant.",6,N],[12,"fields","","Content stored in the variant.",6,N],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,N],[3,"VisCrate","","A crate-level visibility: `crate`.",N,N],[12,"crate_token","","",7,N],[3,"VisPublic","","A public visibility level: `pub`.",N,N],[12,"pub_token","","",8,N],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",N,N],[12,"pub_token","","",9,N],[12,"paren_token","","",9,N],[12,"in_token","","",9,N],[12,"path","","",9,N],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",N,N],[3,"ExprAssign","","An assignment expression: `a = compute()`.",N,N],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",N,N],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",N,N],[12,"attrs","","",10,N],[12,"left","","",10,N],[12,"op","","",10,N],[12,"right","","",10,N],[3,"ExprBlock","","A blocked scope: `{ ... }`.",N,N],[3,"ExprBox","","A box expression: `box f`.",N,N],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",N,N],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",N,N],[12,"attrs","","",11,N],[12,"func","","",11,N],[12,"paren_token","","",11,N],[12,"args","","",11,N],[3,"ExprCast","","A cast expression: `foo as f64`.",N,N],[12,"attrs","","",12,N],[12,"expr","","",12,N],[12,"as_token","","",12,N],[12,"ty","","",12,N],[3,"ExprCatch","","A catch expression: `do catch { ... }`.",N,N],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",N,N],[3,"ExprContinue","","A `continue`, with an optional label.",N,N],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",N,N],[12,"attrs","","",13,N],[12,"base","","",13,N],[12,"dot_token","","",13,N],[12,"member","","",13,N],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",N,N],[3,"ExprGroup","","An expression contained within invisible delimiters.",N,N],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",N,N],[3,"ExprIfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",N,N],[3,"ExprInPlace","","A placement expression: `place <- value`.",N,N],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",N,N],[12,"attrs","","",14,N],[12,"expr","","",14,N],[12,"bracket_token","","",14,N],[12,"index","","",14,N],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",N,N],[12,"attrs","","",15,N],[12,"lit","","",15,N],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",N,N],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",N,N],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",N,N],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",N,N],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",N,N],[12,"attrs","","",16,N],[12,"paren_token","","",16,N],[12,"expr","","",16,N],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",N,N],[12,"attrs","","",17,N],[12,"qself","","",17,N],[12,"path","","",17,N],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",N,N],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",N,N],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",N,N],[3,"ExprReturn","","A `return`, with an optional value to be returned.",N,N],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",N,N],[3,"ExprTry","","A try-expression: `expr?`.",N,N],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",N,N],[3,"ExprType","","A type ascription expression: `foo: f64`.",N,N],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",N,N],[12,"attrs","","",18,N],[12,"op","","",18,N],[12,"expr","","",18,N],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",N,N],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",N,N],[12,"tts","","",19,N],[3,"ExprWhile","","A while loop: `while expr { ... }`.",N,N],[3,"ExprWhileLet","","A while-let loop: `while let pat = expr { ... }`.",N,N],[3,"ExprYield","","A yield expression: `yield expr`.",N,N],[3,"Index","","The index of an unnamed tuple struct field.",N,N],[12,"index","","",20,N],[12,"span","","",20,N],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",N,N],[12,"for_token","","",21,N],[12,"lt_token","","",21,N],[12,"lifetimes","","",21,N],[12,"gt_token","","",21,N],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",N,N],[12,"attrs","","",22,N],[12,"const_token","","",22,N],[12,"ident","","",22,N],[12,"colon_token","","",22,N],[12,"ty","","",22,N],[12,"eq_token","","",22,N],[12,"default","","",22,N],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",N,N],[12,"lt_token","","",23,N],[12,"params","","",23,N],[12,"gt_token","","",23,N],[12,"where_clause","","",23,N],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",N,N],[12,"attrs","","",24,N],[12,"lifetime","","",24,N],[12,"colon_token","","",24,N],[12,"bounds","","",24,N],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",N,N],[12,"lhs_ty","","",25,N],[12,"eq_token","","",25,N],[12,"rhs_ty","","",25,N],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",N,N],[12,"lifetime","","",26,N],[12,"colon_token","","",26,N],[12,"bounds","","",26,N],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",N,N],[12,"lifetimes","","Any lifetimes from a `for` binding",27,N],[12,"bounded_ty","","The type being bounded",27,N],[12,"colon_token","","",27,N],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",27,N],[3,"TraitBound","","A trait used as a bound on a type parameter.",N,N],[12,"paren_token","","",28,N],[12,"modifier","","",28,N],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",28,N],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",28,N],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",N,N],[12,"attrs","","",29,N],[12,"ident","","",29,N],[12,"colon_token","","",29,N],[12,"bounds","","",29,N],[12,"eq_token","","",29,N],[12,"default","","",29,N],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",N,N],[12,"where_token","","",30,N],[12,"predicates","","",30,N],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",N,N],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"Lifetime","","A Rust lifetime: `'a`.",N,N],[12,"apostrophe","","",31,N],[12,"ident","","",31,N],[3,"LitBool","","A boolean literal: `true` or `false`.",N,N],[12,"value","","",32,N],[12,"span","","",32,N],[3,"LitByte","","A byte literal: `b'f'`.",N,N],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",N,N],[3,"LitChar","","A character literal: `'a'`.",N,N],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",N,N],[3,"LitInt","","An integer literal: `1` or `1u16`.",N,N],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",N,N],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",N,N],[12,"token","","",33,N],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",N,N],[12,"path","","",34,N],[12,"bang_token","","",34,N],[12,"delimiter","","",34,N],[12,"tts","","",34,N],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",N,N],[12,"enum_token","","",35,N],[12,"brace_token","","",35,N],[12,"variants","","",35,N],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",N,N],[12,"struct_token","","",36,N],[12,"fields","","",36,N],[12,"semi_token","","",36,N],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",N,N],[12,"union_token","","",37,N],[12,"fields","","",37,N],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",N,N],[12,"attrs","","Attributes tagged on the whole struct or enum.",38,N],[12,"vis","","Visibility of the struct or enum.",38,N],[12,"ident","","Name of the struct or enum.",38,N],[12,"generics","","Generics required to complete the definition.",38,N],[12,"data","","Data within the struct or enum.",38,N],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",N,N],[12,"extern_token","","",39,N],[12,"name","","",39,N],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",N,N],[12,"name","","",40,N],[12,"ty","","",40,N],[3,"TypeArray","","A fixed size array type: `[T; n]`.",N,N],[12,"bracket_token","","",41,N],[12,"elem","","",41,N],[12,"semi_token","","",41,N],[12,"len","","",41,N],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",N,N],[12,"unsafety","","",42,N],[12,"abi","","",42,N],[12,"fn_token","","",42,N],[12,"lifetimes","","",42,N],[12,"paren_token","","",42,N],[12,"inputs","","",42,N],[12,"variadic","","",42,N],[12,"output","","",42,N],[3,"TypeGroup","","A type contained within invisible delimiters.",N,N],[12,"group_token","","",43,N],[12,"elem","","",43,N],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",N,N],[12,"impl_token","","",44,N],[12,"bounds","","",44,N],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",N,N],[12,"underscore_token","","",45,N],[3,"TypeMacro","","A macro in the type position.",N,N],[12,"mac","","",46,N],[3,"TypeNever","","The never type: `!`.",N,N],[12,"bang_token","","",47,N],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",N,N],[12,"paren_token","","",48,N],[12,"elem","","",48,N],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",N,N],[12,"qself","","",49,N],[12,"path","","",49,N],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",N,N],[12,"star_token","","",50,N],[12,"const_token","","",50,N],[12,"mutability","","",50,N],[12,"elem","","",50,N],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",N,N],[12,"and_token","","",51,N],[12,"lifetime","","",51,N],[12,"mutability","","",51,N],[12,"elem","","",51,N],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",N,N],[12,"bracket_token","","",52,N],[12,"elem","","",52,N],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",N,N],[12,"dyn_token","","",53,N],[12,"bounds","","",53,N],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",N,N],[12,"paren_token","","",54,N],[12,"elems","","",54,N],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",N,N],[12,"tts","","",55,N],[3,"PathTokens","","A helper for printing a self-type qualified path as tokens.",N,N],[12,"0","","",56,N],[12,"1","","",56,N],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",N,N],[12,"colon2_token","","",57,N],[12,"lt_token","","",57,N],[12,"args","","",57,N],[12,"gt_token","","",57,N],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",N,N],[12,"ident","","",58,N],[12,"eq_token","","",58,N],[12,"ty","","",58,N],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",N,N],[12,"paren_token","","",59,N],[12,"inputs","","`(A, B)`",59,N],[12,"output","","`C`",59,N],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",N,N],[12,"leading_colon","","",60,N],[12,"segments","","",60,N],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",N,N],[12,"ident","","",61,N],[12,"arguments","","",61,N],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",N,N],[12,"lt_token","","",62,N],[12,"ty","","",62,N],[12,"position","","",62,N],[12,"as_token","","",62,N],[12,"gt_token","","",62,N],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",N,N],[13,"Outer","","",63,N],[13,"Inner","","",63,N],[4,"Meta","","Content of a compile-time structured attribute.",N,N],[13,"Word","","",64,N],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",64,N],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",64,N],[4,"NestedMeta","","Element of a compile-time attribute list.",N,N],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",65,N],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",65,N],[4,"Fields","","Data stored within an enum variant or struct.",N,N],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",66,N],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",66,N],[13,"Unit","","Unit struct or unit variant such as `None`.",66,N],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",N,N],[13,"Public","","A public visibility level: `pub`.",67,N],[13,"Crate","","A crate-level visibility: `crate`.",67,N],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",67,N],[13,"Inherited","","An inherited visibility, which usually means private.",67,N],[4,"Expr","","A Rust expression.",N,N],[13,"Box","","A box expression: `box f`.",68,N],[13,"InPlace","","A placement expression: `place <- value`.",68,N],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",68,N],[13,"Call","","A function call expression: `invoke(a, b)`.",68,N],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",68,N],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",68,N],[13,"Binary","","A binary operation: `a + b`, `a * b`.",68,N],[13,"Unary","","A unary operation: `!x`, `*x`.",68,N],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",68,N],[13,"Cast","","A cast expression: `foo as f64`.",68,N],[13,"Type","","A type ascription expression: `foo: f64`.",68,N],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",68,N],[13,"IfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",68,N],[13,"While","","A while loop: `while expr { ... }`.",68,N],[13,"WhileLet","","A while-let loop: `while let pat = expr { ... }`.",68,N],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",68,N],[13,"Loop","","Conditionless loop: `loop { ... }`.",68,N],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",68,N],[13,"Closure","","A closure expression: `|a, b| a + b`.",68,N],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",68,N],[13,"Block","","A blocked scope: `{ ... }`.",68,N],[13,"Assign","","An assignment expression: `a = compute()`.",68,N],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",68,N],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",68,N],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",68,N],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",68,N],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",68,N],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",68,N],[13,"Break","","A `break`, with an optional label to break and an optional expression.",68,N],[13,"Continue","","A `continue`, with an optional label.",68,N],[13,"Return","","A `return`, with an optional value to be returned.",68,N],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",68,N],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",68,N],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",68,N],[13,"Paren","","A parenthesized expression: `(a + b)`.",68,N],[13,"Group","","An expression contained within invisible delimiters.",68,N],[13,"Try","","A try-expression: `expr?`.",68,N],[13,"Catch","","A catch expression: `do catch { ... }`.",68,N],[13,"Yield","","A yield expression: `yield expr`.",68,N],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",68,N],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",N,N],[13,"Named","","A named field like `self.x`.",69,N],[13,"Unnamed","","An unnamed field like `self.0`.",69,N],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",N,N],[13,"Type","","A generic type parameter: `T: Into<String>`.",70,N],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",70,N],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",70,N],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",N,N],[13,"None","","",71,N],[13,"Maybe","","",71,N],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",N,N],[13,"Trait","","",72,N],[13,"Lifetime","","",72,N],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",N,N],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",73,N],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",73,N],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",73,N],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",N,N],[13,"F32","","",74,N],[13,"F64","","",74,N],[13,"None","","",74,N],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",N,N],[13,"I8","","",75,N],[13,"I16","","",75,N],[13,"I32","","",75,N],[13,"I64","","",75,N],[13,"I128","","",75,N],[13,"Isize","","",75,N],[13,"U8","","",75,N],[13,"U16","","",75,N],[13,"U32","","",75,N],[13,"U64","","",75,N],[13,"U128","","",75,N],[13,"Usize","","",75,N],[13,"None","","",75,N],[4,"Lit","","A Rust literal such as a string or integer or boolean.",N,N],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",76,N],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",76,N],[13,"Byte","","A byte literal: `b'f'`.",76,N],[13,"Char","","A character literal: `'a'`.",76,N],[13,"Int","","An integer literal: `1` or `1u16`.",76,N],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",76,N],[13,"Bool","","A boolean literal: `true` or `false`.",76,N],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",76,N],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",N,N],[13,"Cooked","","An ordinary string like `\"data\"`.",77,N],[13,"Raw","","A raw string like `r##\"data\"##`.",77,N],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",N,N],[13,"Paren","","",78,N],[13,"Brace","","",78,N],[13,"Bracket","","",78,N],[4,"Data","","The storage of a struct, enum or union data structure.",N,N],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",79,N],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",79,N],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",79,N],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",N,N],[13,"Add","","The `+` operator (addition)",80,N],[13,"Sub","","The `-` operator (subtraction)",80,N],[13,"Mul","","The `*` operator (multiplication)",80,N],[13,"Div","","The `/` operator (division)",80,N],[13,"Rem","","The `%` operator (modulus)",80,N],[13,"And","","The `&&` operator (logical and)",80,N],[13,"Or","","The `||` operator (logical or)",80,N],[13,"BitXor","","The `^` operator (bitwise xor)",80,N],[13,"BitAnd","","The `&` operator (bitwise and)",80,N],[13,"BitOr","","The `|` operator (bitwise or)",80,N],[13,"Shl","","The `<<` operator (shift left)",80,N],[13,"Shr","","The `>>` operator (shift right)",80,N],[13,"Eq","","The `==` operator (equality)",80,N],[13,"Lt","","The `<` operator (less than)",80,N],[13,"Le","","The `<=` operator (less than or equal to)",80,N],[13,"Ne","","The `!=` operator (not equal to)",80,N],[13,"Ge","","The `>=` operator (greater than or equal to)",80,N],[13,"Gt","","The `>` operator (greater than)",80,N],[13,"AddEq","","The `+=` operator",80,N],[13,"SubEq","","The `-=` operator",80,N],[13,"MulEq","","The `*=` operator",80,N],[13,"DivEq","","The `/=` operator",80,N],[13,"RemEq","","The `%=` operator",80,N],[13,"BitXorEq","","The `^=` operator",80,N],[13,"BitAndEq","","The `&=` operator",80,N],[13,"BitOrEq","","The `|=` operator",80,N],[13,"ShlEq","","The `<<=` operator",80,N],[13,"ShrEq","","The `>>=` operator",80,N],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",N,N],[13,"Deref","","The `*` operator for dereferencing",81,N],[13,"Not","","The `!` operator for logical inversion",81,N],[13,"Neg","","The `-` operator for negation",81,N],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",N,N],[13,"Named","","Argument given a name.",82,N],[13,"Wild","","Argument not given a name, matched with `_`.",82,N],[4,"ReturnType","","Return type of a function signature.",N,N],[13,"Default","","Return type is not specified.",83,N],[13,"Type","","A particular type is returned.",83,N],[4,"Type","","The possible types that a Rust value could have.",N,N],[13,"Slice","","A dynamically sized slice type: `[T]`.",84,N],[13,"Array","","A fixed size array type: `[T; n]`.",84,N],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",84,N],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",84,N],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",84,N],[13,"Never","","The never type: `!`.",84,N],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",84,N],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",84,N],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",84,N],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",84,N],[13,"Paren","","A parenthesized type equivalent to the inner type.",84,N],[13,"Group","","A type contained within invisible delimiters.",84,N],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",84,N],[13,"Macro","","A macro in the type position.",84,N],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",84,N],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",N,N],[13,"Lifetime","","A lifetime argument.",85,N],[13,"Type","","A type argument.",85,N],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",85,N],[13,"Const","","A const expression. Must be inside of a block.",85,N],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",N,N],[13,"None","","",86,N],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",86,N],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",86,N],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["parseerror"]]]],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["parseerror"]]]],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",N,[[["str"]],["result",["parseerror"]]]],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",N,N],[3,"Underscore","syn::token","`_`",N,N],[12,"0","","",87,N],[3,"Apostrophe","","`'`",N,N],[12,"0","","",88,N],[3,"Add","","`+`",N,N],[12,"0","","",89,N],[3,"AddEq","","`+=`",N,N],[12,"0","","",90,N],[3,"And","","`&`",N,N],[12,"0","","",91,N],[3,"AndAnd","","`&&`",N,N],[12,"0","","",92,N],[3,"AndEq","","`&=`",N,N],[12,"0","","",93,N],[3,"At","","`@`",N,N],[12,"0","","",94,N],[3,"Bang","","`!`",N,N],[12,"0","","",95,N],[3,"Caret","","`^`",N,N],[12,"0","","",96,N],[3,"CaretEq","","`^=`",N,N],[12,"0","","",97,N],[3,"Colon","","`:`",N,N],[12,"0","","",98,N],[3,"Colon2","","`::`",N,N],[12,"0","","",99,N],[3,"Comma","","`,`",N,N],[12,"0","","",100,N],[3,"Div","","`/`",N,N],[12,"0","","",101,N],[3,"DivEq","","`/=`",N,N],[12,"0","","",102,N],[3,"Dollar","","`$`",N,N],[12,"0","","",103,N],[3,"Dot","","`.`",N,N],[12,"0","","",104,N],[3,"Dot2","","`..`",N,N],[12,"0","","",105,N],[3,"Dot3","","`...`",N,N],[12,"0","","",106,N],[3,"DotDotEq","","`..=`",N,N],[12,"0","","",107,N],[3,"Eq","","`=`",N,N],[12,"0","","",108,N],[3,"EqEq","","`==`",N,N],[12,"0","","",109,N],[3,"Ge","","`>=`",N,N],[12,"0","","",110,N],[3,"Gt","","`>`",N,N],[12,"0","","",111,N],[3,"Le","","`<=`",N,N],[12,"0","","",112,N],[3,"Lt","","`<`",N,N],[12,"0","","",113,N],[3,"MulEq","","`*=`",N,N],[12,"0","","",114,N],[3,"Ne","","`!=`",N,N],[12,"0","","",115,N],[3,"Or","","`|`",N,N],[12,"0","","",116,N],[3,"OrEq","","`|=`",N,N],[12,"0","","",117,N],[3,"OrOr","","`||`",N,N],[12,"0","","",118,N],[3,"Pound","","`#`",N,N],[12,"0","","",119,N],[3,"Question","","`?`",N,N],[12,"0","","",120,N],[3,"RArrow","","`->`",N,N],[12,"0","","",121,N],[3,"LArrow","","`<-`",N,N],[12,"0","","",122,N],[3,"Rem","","`%`",N,N],[12,"0","","",123,N],[3,"RemEq","","`%=`",N,N],[12,"0","","",124,N],[3,"FatArrow","","`=>`",N,N],[12,"0","","",125,N],[3,"Semi","","`;`",N,N],[12,"0","","",126,N],[3,"Shl","","`<<`",N,N],[12,"0","","",127,N],[3,"ShlEq","","`<<=`",N,N],[12,"0","","",128,N],[3,"Shr","","`>>`",N,N],[12,"0","","",129,N],[3,"ShrEq","","`>>=`",N,N],[12,"0","","",130,N],[3,"Star","","`*`",N,N],[12,"0","","",131,N],[3,"Sub","","`-`",N,N],[12,"0","","",132,N],[3,"SubEq","","`-=`",N,N],[12,"0","","",133,N],[3,"Brace","","`{...}`",N,N],[12,"0","","",134,N],[3,"Bracket","","`[...]`",N,N],[12,"0","","",135,N],[3,"Paren","","`(...)`",N,N],[12,"0","","",136,N],[3,"Group","","None-delimited group",N,N],[12,"0","","",137,N],[3,"As","","`as`",N,N],[12,"0","","",138,N],[3,"Auto","","`auto`",N,N],[12,"0","","",139,N],[3,"Box","","`box`",N,N],[12,"0","","",140,N],[3,"Break","","`break`",N,N],[12,"0","","",141,N],[3,"CapSelf","","`Self`",N,N],[12,"0","","",142,N],[3,"Catch","","`catch`",N,N],[12,"0","","",143,N],[3,"Const","","`const`",N,N],[12,"0","","",144,N],[3,"Continue","","`continue`",N,N],[12,"0","","",145,N],[3,"Crate","","`crate`",N,N],[12,"0","","",146,N],[3,"Default","","`default`",N,N],[12,"0","","",147,N],[3,"Do","","`do`",N,N],[12,"0","","",148,N],[3,"Dyn","","`dyn`",N,N],[12,"0","","",149,N],[3,"Else","","`else`",N,N],[12,"0","","",150,N],[3,"Enum","","`enum`",N,N],[12,"0","","",151,N],[3,"Extern","","`extern`",N,N],[12,"0","","",152,N],[3,"Fn","","`fn`",N,N],[12,"0","","",153,N],[3,"For","","`for`",N,N],[12,"0","","",154,N],[3,"If","","`if`",N,N],[12,"0","","",155,N],[3,"Impl","","`impl`",N,N],[12,"0","","",156,N],[3,"In","","`in`",N,N],[12,"0","","",157,N],[3,"Let","","`let`",N,N],[12,"0","","",158,N],[3,"Loop","","`loop`",N,N],[12,"0","","",159,N],[3,"Macro","","`macro`",N,N],[12,"0","","",160,N],[3,"Match","","`match`",N,N],[12,"0","","",161,N],[3,"Mod","","`mod`",N,N],[12,"0","","",162,N],[3,"Move","","`move`",N,N],[12,"0","","",163,N],[3,"Mut","","`mut`",N,N],[12,"0","","",164,N],[3,"Pub","","`pub`",N,N],[12,"0","","",165,N],[3,"Ref","","`ref`",N,N],[12,"0","","",166,N],[3,"Return","","`return`",N,N],[12,"0","","",167,N],[3,"Self_","","`self`",N,N],[12,"0","","",168,N],[3,"Static","","`static`",N,N],[12,"0","","",169,N],[3,"Struct","","`struct`",N,N],[12,"0","","",170,N],[3,"Super","","`super`",N,N],[12,"0","","",171,N],[3,"Trait","","`trait`",N,N],[12,"0","","",172,N],[3,"Type","","`type`",N,N],[12,"0","","",173,N],[3,"Union","","`union`",N,N],[12,"0","","",174,N],[3,"Unsafe","","`unsafe`",N,N],[12,"0","","",175,N],[3,"Use","","`use`",N,N],[12,"0","","",176,N],[3,"Where","","`where`",N,N],[12,"0","","",177,N],[3,"While","","`while`",N,N],[12,"0","","",178,N],[3,"Yield","","`yield`",N,N],[12,"0","","",179,N],[11,"clone","","",87,[[["self"]],["underscore"]]],[11,"new","","",87,[[["span"]],["self"]]],[11,"default","","",87,[[],["self"]]],[11,"from","","",87,[[["span"]],["self"]]],[11,"to_tokens","","",87,[[["self"],["tokenstream"]]]],[11,"parse","","",87,[[["cursor"]],["presult",["underscore"]]]],[11,"description","","",87,[[],["option",["str"]]]],[11,"clone","","",88,[[["self"]],["apostrophe"]]],[11,"new","","",88,[[["span"]],["self"]]],[11,"default","","",88,[[],["self"]]],[11,"from","","",88,[[["span"]],["self"]]],[11,"to_tokens","","",88,[[["self"],["tokenstream"]]]],[11,"parse","","",88,[[["cursor"]],["presult",["apostrophe"]]]],[11,"description","","",88,[[],["option",["str"]]]],[11,"clone","","",89,[[["self"]],["add"]]],[11,"new","","",89,[[["span"]],["self"]]],[11,"default","","",89,[[],["self"]]],[11,"from","","",89,[[["span"]],["self"]]],[11,"clone","","",90,[[["self"]],["addeq"]]],[11,"new","","",90,[[["span"]],["self"]]],[11,"default","","",90,[[],["self"]]],[11,"from","","",90,[[["span"]],["self"]]],[11,"clone","","",91,[[["self"]],["and"]]],[11,"new","","",91,[[["span"]],["self"]]],[11,"default","","",91,[[],["self"]]],[11,"from","","",91,[[["span"]],["self"]]],[11,"clone","","",92,[[["self"]],["andand"]]],[11,"new","","",92,[[["span"]],["self"]]],[11,"default","","",92,[[],["self"]]],[11,"from","","",92,[[["span"]],["self"]]],[11,"clone","","",93,[[["self"]],["andeq"]]],[11,"new","","",93,[[["span"]],["self"]]],[11,"default","","",93,[[],["self"]]],[11,"from","","",93,[[["span"]],["self"]]],[11,"clone","","",94,[[["self"]],["at"]]],[11,"new","","",94,[[["span"]],["self"]]],[11,"default","","",94,[[],["self"]]],[11,"from","","",94,[[["span"]],["self"]]],[11,"clone","","",95,[[["self"]],["bang"]]],[11,"new","","",95,[[["span"]],["self"]]],[11,"default","","",95,[[],["self"]]],[11,"from","","",95,[[["span"]],["self"]]],[11,"clone","","",96,[[["self"]],["caret"]]],[11,"new","","",96,[[["span"]],["self"]]],[11,"default","","",96,[[],["self"]]],[11,"from","","",96,[[["span"]],["self"]]],[11,"clone","","",97,[[["self"]],["careteq"]]],[11,"new","","",97,[[["span"]],["self"]]],[11,"default","","",97,[[],["self"]]],[11,"from","","",97,[[["span"]],["self"]]],[11,"clone","","",98,[[["self"]],["colon"]]],[11,"new","","",98,[[["span"]],["self"]]],[11,"default","","",98,[[],["self"]]],[11,"from","","",98,[[["span"]],["self"]]],[11,"clone","","",99,[[["self"]],["colon2"]]],[11,"new","","",99,[[["span"]],["self"]]],[11,"default","","",99,[[],["self"]]],[11,"from","","",99,[[["span"]],["self"]]],[11,"clone","","",100,[[["self"]],["comma"]]],[11,"new","","",100,[[["span"]],["self"]]],[11,"default","","",100,[[],["self"]]],[11,"from","","",100,[[["span"]],["self"]]],[11,"clone","","",101,[[["self"]],["div"]]],[11,"new","","",101,[[["span"]],["self"]]],[11,"default","","",101,[[],["self"]]],[11,"from","","",101,[[["span"]],["self"]]],[11,"clone","","",102,[[["self"]],["diveq"]]],[11,"new","","",102,[[["span"]],["self"]]],[11,"default","","",102,[[],["self"]]],[11,"from","","",102,[[["span"]],["self"]]],[11,"clone","","",103,[[["self"]],["dollar"]]],[11,"new","","",103,[[["span"]],["self"]]],[11,"default","","",103,[[],["self"]]],[11,"from","","",103,[[["span"]],["self"]]],[11,"clone","","",104,[[["self"]],["dot"]]],[11,"new","","",104,[[["span"]],["self"]]],[11,"default","","",104,[[],["self"]]],[11,"from","","",104,[[["span"]],["self"]]],[11,"clone","","",105,[[["self"]],["dot2"]]],[11,"new","","",105,[[["span"]],["self"]]],[11,"default","","",105,[[],["self"]]],[11,"from","","",105,[[["span"]],["self"]]],[11,"clone","","",106,[[["self"]],["dot3"]]],[11,"new","","",106,[[["span"]],["self"]]],[11,"default","","",106,[[],["self"]]],[11,"from","","",106,[[["span"]],["self"]]],[11,"clone","","",107,[[["self"]],["dotdoteq"]]],[11,"new","","",107,[[["span"]],["self"]]],[11,"default","","",107,[[],["self"]]],[11,"from","","",107,[[["span"]],["self"]]],[11,"clone","","",108,[[["self"]],["eq"]]],[11,"new","","",108,[[["span"]],["self"]]],[11,"default","","",108,[[],["self"]]],[11,"from","","",108,[[["span"]],["self"]]],[11,"clone","","",109,[[["self"]],["eqeq"]]],[11,"new","","",109,[[["span"]],["self"]]],[11,"default","","",109,[[],["self"]]],[11,"from","","",109,[[["span"]],["self"]]],[11,"clone","","",110,[[["self"]],["ge"]]],[11,"new","","",110,[[["span"]],["self"]]],[11,"default","","",110,[[],["self"]]],[11,"from","","",110,[[["span"]],["self"]]],[11,"clone","","",111,[[["self"]],["gt"]]],[11,"new","","",111,[[["span"]],["self"]]],[11,"default","","",111,[[],["self"]]],[11,"from","","",111,[[["span"]],["self"]]],[11,"clone","","",112,[[["self"]],["le"]]],[11,"new","","",112,[[["span"]],["self"]]],[11,"default","","",112,[[],["self"]]],[11,"from","","",112,[[["span"]],["self"]]],[11,"clone","","",113,[[["self"]],["lt"]]],[11,"new","","",113,[[["span"]],["self"]]],[11,"default","","",113,[[],["self"]]],[11,"from","","",113,[[["span"]],["self"]]],[11,"clone","","",114,[[["self"]],["muleq"]]],[11,"new","","",114,[[["span"]],["self"]]],[11,"default","","",114,[[],["self"]]],[11,"from","","",114,[[["span"]],["self"]]],[11,"clone","","",115,[[["self"]],["ne"]]],[11,"new","","",115,[[["span"]],["self"]]],[11,"default","","",115,[[],["self"]]],[11,"from","","",115,[[["span"]],["self"]]],[11,"clone","","",116,[[["self"]],["or"]]],[11,"new","","",116,[[["span"]],["self"]]],[11,"default","","",116,[[],["self"]]],[11,"from","","",116,[[["span"]],["self"]]],[11,"clone","","",117,[[["self"]],["oreq"]]],[11,"new","","",117,[[["span"]],["self"]]],[11,"default","","",117,[[],["self"]]],[11,"from","","",117,[[["span"]],["self"]]],[11,"clone","","",118,[[["self"]],["oror"]]],[11,"new","","",118,[[["span"]],["self"]]],[11,"default","","",118,[[],["self"]]],[11,"from","","",118,[[["span"]],["self"]]],[11,"clone","","",119,[[["self"]],["pound"]]],[11,"new","","",119,[[["span"]],["self"]]],[11,"default","","",119,[[],["self"]]],[11,"from","","",119,[[["span"]],["self"]]],[11,"clone","","",120,[[["self"]],["question"]]],[11,"new","","",120,[[["span"]],["self"]]],[11,"default","","",120,[[],["self"]]],[11,"from","","",120,[[["span"]],["self"]]],[11,"clone","","",121,[[["self"]],["rarrow"]]],[11,"new","","",121,[[["span"]],["self"]]],[11,"default","","",121,[[],["self"]]],[11,"from","","",121,[[["span"]],["self"]]],[11,"clone","","",122,[[["self"]],["larrow"]]],[11,"new","","",122,[[["span"]],["self"]]],[11,"default","","",122,[[],["self"]]],[11,"from","","",122,[[["span"]],["self"]]],[11,"clone","","",123,[[["self"]],["rem"]]],[11,"new","","",123,[[["span"]],["self"]]],[11,"default","","",123,[[],["self"]]],[11,"from","","",123,[[["span"]],["self"]]],[11,"clone","","",124,[[["self"]],["remeq"]]],[11,"new","","",124,[[["span"]],["self"]]],[11,"default","","",124,[[],["self"]]],[11,"from","","",124,[[["span"]],["self"]]],[11,"clone","","",125,[[["self"]],["fatarrow"]]],[11,"new","","",125,[[["span"]],["self"]]],[11,"default","","",125,[[],["self"]]],[11,"from","","",125,[[["span"]],["self"]]],[11,"clone","","",126,[[["self"]],["semi"]]],[11,"new","","",126,[[["span"]],["self"]]],[11,"default","","",126,[[],["self"]]],[11,"from","","",126,[[["span"]],["self"]]],[11,"clone","","",127,[[["self"]],["shl"]]],[11,"new","","",127,[[["span"]],["self"]]],[11,"default","","",127,[[],["self"]]],[11,"from","","",127,[[["span"]],["self"]]],[11,"clone","","",128,[[["self"]],["shleq"]]],[11,"new","","",128,[[["span"]],["self"]]],[11,"default","","",128,[[],["self"]]],[11,"from","","",128,[[["span"]],["self"]]],[11,"clone","","",129,[[["self"]],["shr"]]],[11,"new","","",129,[[["span"]],["self"]]],[11,"default","","",129,[[],["self"]]],[11,"from","","",129,[[["span"]],["self"]]],[11,"clone","","",130,[[["self"]],["shreq"]]],[11,"new","","",130,[[["span"]],["self"]]],[11,"default","","",130,[[],["self"]]],[11,"from","","",130,[[["span"]],["self"]]],[11,"clone","","",131,[[["self"]],["star"]]],[11,"new","","",131,[[["span"]],["self"]]],[11,"default","","",131,[[],["self"]]],[11,"from","","",131,[[["span"]],["self"]]],[11,"clone","","",132,[[["self"]],["sub"]]],[11,"new","","",132,[[["span"]],["self"]]],[11,"default","","",132,[[],["self"]]],[11,"from","","",132,[[["span"]],["self"]]],[11,"clone","","",133,[[["self"]],["subeq"]]],[11,"new","","",133,[[["span"]],["self"]]],[11,"default","","",133,[[],["self"]]],[11,"from","","",133,[[["span"]],["self"]]],[11,"to_tokens","","",89,[[["self"],["tokenstream"]]]],[11,"parse","","",89,[[["cursor"]],["presult",["add"]]]],[11,"description","","",89,[[],["option",["str"]]]],[11,"to_tokens","","",90,[[["self"],["tokenstream"]]]],[11,"parse","","",90,[[["cursor"]],["presult",["addeq"]]]],[11,"description","","",90,[[],["option",["str"]]]],[11,"to_tokens","","",91,[[["self"],["tokenstream"]]]],[11,"parse","","",91,[[["cursor"]],["presult",["and"]]]],[11,"description","","",91,[[],["option",["str"]]]],[11,"to_tokens","","",92,[[["self"],["tokenstream"]]]],[11,"parse","","",92,[[["cursor"]],["presult",["andand"]]]],[11,"description","","",92,[[],["option",["str"]]]],[11,"to_tokens","","",93,[[["self"],["tokenstream"]]]],[11,"parse","","",93,[[["cursor"]],["presult",["andeq"]]]],[11,"description","","",93,[[],["option",["str"]]]],[11,"to_tokens","","",94,[[["self"],["tokenstream"]]]],[11,"parse","","",94,[[["cursor"]],["presult",["at"]]]],[11,"description","","",94,[[],["option",["str"]]]],[11,"to_tokens","","",95,[[["self"],["tokenstream"]]]],[11,"parse","","",95,[[["cursor"]],["presult",["bang"]]]],[11,"description","","",95,[[],["option",["str"]]]],[11,"to_tokens","","",96,[[["self"],["tokenstream"]]]],[11,"parse","","",96,[[["cursor"]],["presult",["caret"]]]],[11,"description","","",96,[[],["option",["str"]]]],[11,"to_tokens","","",97,[[["self"],["tokenstream"]]]],[11,"parse","","",97,[[["cursor"]],["presult",["careteq"]]]],[11,"description","","",97,[[],["option",["str"]]]],[11,"to_tokens","","",98,[[["self"],["tokenstream"]]]],[11,"parse","","",98,[[["cursor"]],["presult",["colon"]]]],[11,"description","","",98,[[],["option",["str"]]]],[11,"to_tokens","","",99,[[["self"],["tokenstream"]]]],[11,"parse","","",99,[[["cursor"]],["presult",["colon2"]]]],[11,"description","","",99,[[],["option",["str"]]]],[11,"to_tokens","","",100,[[["self"],["tokenstream"]]]],[11,"parse","","",100,[[["cursor"]],["presult",["comma"]]]],[11,"description","","",100,[[],["option",["str"]]]],[11,"to_tokens","","",101,[[["self"],["tokenstream"]]]],[11,"parse","","",101,[[["cursor"]],["presult",["div"]]]],[11,"description","","",101,[[],["option",["str"]]]],[11,"to_tokens","","",102,[[["self"],["tokenstream"]]]],[11,"parse","","",102,[[["cursor"]],["presult",["diveq"]]]],[11,"description","","",102,[[],["option",["str"]]]],[11,"to_tokens","","",103,[[["self"],["tokenstream"]]]],[11,"parse","","",103,[[["cursor"]],["presult",["dollar"]]]],[11,"description","","",103,[[],["option",["str"]]]],[11,"to_tokens","","",104,[[["self"],["tokenstream"]]]],[11,"parse","","",104,[[["cursor"]],["presult",["dot"]]]],[11,"description","","",104,[[],["option",["str"]]]],[11,"to_tokens","","",105,[[["self"],["tokenstream"]]]],[11,"parse","","",105,[[["cursor"]],["presult",["dot2"]]]],[11,"description","","",105,[[],["option",["str"]]]],[11,"to_tokens","","",106,[[["self"],["tokenstream"]]]],[11,"parse","","",106,[[["cursor"]],["presult",["dot3"]]]],[11,"description","","",106,[[],["option",["str"]]]],[11,"to_tokens","","",107,[[["self"],["tokenstream"]]]],[11,"parse","","",107,[[["cursor"]],["presult",["dotdoteq"]]]],[11,"description","","",107,[[],["option",["str"]]]],[11,"to_tokens","","",108,[[["self"],["tokenstream"]]]],[11,"parse","","",108,[[["cursor"]],["presult",["eq"]]]],[11,"description","","",108,[[],["option",["str"]]]],[11,"to_tokens","","",109,[[["self"],["tokenstream"]]]],[11,"parse","","",109,[[["cursor"]],["presult",["eqeq"]]]],[11,"description","","",109,[[],["option",["str"]]]],[11,"to_tokens","","",110,[[["self"],["tokenstream"]]]],[11,"parse","","",110,[[["cursor"]],["presult",["ge"]]]],[11,"description","","",110,[[],["option",["str"]]]],[11,"to_tokens","","",111,[[["self"],["tokenstream"]]]],[11,"parse","","",111,[[["cursor"]],["presult",["gt"]]]],[11,"description","","",111,[[],["option",["str"]]]],[11,"to_tokens","","",112,[[["self"],["tokenstream"]]]],[11,"parse","","",112,[[["cursor"]],["presult",["le"]]]],[11,"description","","",112,[[],["option",["str"]]]],[11,"to_tokens","","",113,[[["self"],["tokenstream"]]]],[11,"parse","","",113,[[["cursor"]],["presult",["lt"]]]],[11,"description","","",113,[[],["option",["str"]]]],[11,"to_tokens","","",114,[[["self"],["tokenstream"]]]],[11,"parse","","",114,[[["cursor"]],["presult",["muleq"]]]],[11,"description","","",114,[[],["option",["str"]]]],[11,"to_tokens","","",115,[[["self"],["tokenstream"]]]],[11,"parse","","",115,[[["cursor"]],["presult",["ne"]]]],[11,"description","","",115,[[],["option",["str"]]]],[11,"to_tokens","","",116,[[["self"],["tokenstream"]]]],[11,"parse","","",116,[[["cursor"]],["presult",["or"]]]],[11,"description","","",116,[[],["option",["str"]]]],[11,"to_tokens","","",117,[[["self"],["tokenstream"]]]],[11,"parse","","",117,[[["cursor"]],["presult",["oreq"]]]],[11,"description","","",117,[[],["option",["str"]]]],[11,"to_tokens","","",118,[[["self"],["tokenstream"]]]],[11,"parse","","",118,[[["cursor"]],["presult",["oror"]]]],[11,"description","","",118,[[],["option",["str"]]]],[11,"to_tokens","","",119,[[["self"],["tokenstream"]]]],[11,"parse","","",119,[[["cursor"]],["presult",["pound"]]]],[11,"description","","",119,[[],["option",["str"]]]],[11,"to_tokens","","",120,[[["self"],["tokenstream"]]]],[11,"parse","","",120,[[["cursor"]],["presult",["question"]]]],[11,"description","","",120,[[],["option",["str"]]]],[11,"to_tokens","","",121,[[["self"],["tokenstream"]]]],[11,"parse","","",121,[[["cursor"]],["presult",["rarrow"]]]],[11,"description","","",121,[[],["option",["str"]]]],[11,"to_tokens","","",122,[[["self"],["tokenstream"]]]],[11,"parse","","",122,[[["cursor"]],["presult",["larrow"]]]],[11,"description","","",122,[[],["option",["str"]]]],[11,"to_tokens","","",123,[[["self"],["tokenstream"]]]],[11,"parse","","",123,[[["cursor"]],["presult",["rem"]]]],[11,"description","","",123,[[],["option",["str"]]]],[11,"to_tokens","","",124,[[["self"],["tokenstream"]]]],[11,"parse","","",124,[[["cursor"]],["presult",["remeq"]]]],[11,"description","","",124,[[],["option",["str"]]]],[11,"to_tokens","","",125,[[["self"],["tokenstream"]]]],[11,"parse","","",125,[[["cursor"]],["presult",["fatarrow"]]]],[11,"description","","",125,[[],["option",["str"]]]],[11,"to_tokens","","",126,[[["self"],["tokenstream"]]]],[11,"parse","","",126,[[["cursor"]],["presult",["semi"]]]],[11,"description","","",126,[[],["option",["str"]]]],[11,"to_tokens","","",127,[[["self"],["tokenstream"]]]],[11,"parse","","",127,[[["cursor"]],["presult",["shl"]]]],[11,"description","","",127,[[],["option",["str"]]]],[11,"to_tokens","","",128,[[["self"],["tokenstream"]]]],[11,"parse","","",128,[[["cursor"]],["presult",["shleq"]]]],[11,"description","","",128,[[],["option",["str"]]]],[11,"to_tokens","","",129,[[["self"],["tokenstream"]]]],[11,"parse","","",129,[[["cursor"]],["presult",["shr"]]]],[11,"description","","",129,[[],["option",["str"]]]],[11,"to_tokens","","",130,[[["self"],["tokenstream"]]]],[11,"parse","","",130,[[["cursor"]],["presult",["shreq"]]]],[11,"description","","",130,[[],["option",["str"]]]],[11,"to_tokens","","",131,[[["self"],["tokenstream"]]]],[11,"parse","","",131,[[["cursor"]],["presult",["star"]]]],[11,"description","","",131,[[],["option",["str"]]]],[11,"to_tokens","","",132,[[["self"],["tokenstream"]]]],[11,"parse","","",132,[[["cursor"]],["presult",["sub"]]]],[11,"description","","",132,[[],["option",["str"]]]],[11,"to_tokens","","",133,[[["self"],["tokenstream"]]]],[11,"parse","","",133,[[["cursor"]],["presult",["subeq"]]]],[11,"description","","",133,[[],["option",["str"]]]],[11,"clone","","",134,[[["self"]],["brace"]]],[11,"default","","",134,[[],["self"]]],[11,"surround","","",134,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",134,[[["cursor"],["f"]],["presult"]]],[11,"from","","",134,[[["span"]],["self"]]],[11,"clone","","",135,[[["self"]],["bracket"]]],[11,"default","","",135,[[],["self"]]],[11,"surround","","",135,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",135,[[["cursor"],["f"]],["presult"]]],[11,"from","","",135,[[["span"]],["self"]]],[11,"clone","","",136,[[["self"]],["paren"]]],[11,"default","","",136,[[],["self"]]],[11,"surround","","",136,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",136,[[["cursor"],["f"]],["presult"]]],[11,"from","","",136,[[["span"]],["self"]]],[11,"clone","","",137,[[["self"]],["group"]]],[11,"default","","",137,[[],["self"]]],[11,"surround","","",137,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",137,[[["cursor"],["f"]],["presult"]]],[11,"from","","",137,[[["span"]],["self"]]],[11,"clone","","",138,[[["self"]],["as"]]],[11,"default","","",138,[[],["self"]]],[11,"to_tokens","","",138,[[["self"],["tokenstream"]]]],[11,"parse","","",138,[[["cursor"]],["presult",["as"]]]],[11,"description","","",138,[[],["option",["str"]]]],[11,"from","","",138,[[["span"]],["self"]]],[11,"clone","","",139,[[["self"]],["auto"]]],[11,"default","","",139,[[],["self"]]],[11,"to_tokens","","",139,[[["self"],["tokenstream"]]]],[11,"parse","","",139,[[["cursor"]],["presult",["auto"]]]],[11,"description","","",139,[[],["option",["str"]]]],[11,"from","","",139,[[["span"]],["self"]]],[11,"clone","","",140,[[["self"]],["box"]]],[11,"default","","",140,[[],["self"]]],[11,"to_tokens","","",140,[[["self"],["tokenstream"]]]],[11,"parse","","",140,[[["cursor"]],["presult",["box"]]]],[11,"description","","",140,[[],["option",["str"]]]],[11,"from","","",140,[[["span"]],["self"]]],[11,"clone","","",141,[[["self"]],["break"]]],[11,"default","","",141,[[],["self"]]],[11,"to_tokens","","",141,[[["self"],["tokenstream"]]]],[11,"parse","","",141,[[["cursor"]],["presult",["break"]]]],[11,"description","","",141,[[],["option",["str"]]]],[11,"from","","",141,[[["span"]],["self"]]],[11,"clone","","",142,[[["self"]],["capself"]]],[11,"default","","",142,[[],["self"]]],[11,"to_tokens","","",142,[[["self"],["tokenstream"]]]],[11,"parse","","",142,[[["cursor"]],["presult",["capself"]]]],[11,"description","","",142,[[],["option",["str"]]]],[11,"from","","",142,[[["span"]],["self"]]],[11,"clone","","",143,[[["self"]],["catch"]]],[11,"default","","",143,[[],["self"]]],[11,"to_tokens","","",143,[[["self"],["tokenstream"]]]],[11,"parse","","",143,[[["cursor"]],["presult",["catch"]]]],[11,"description","","",143,[[],["option",["str"]]]],[11,"from","","",143,[[["span"]],["self"]]],[11,"clone","","",144,[[["self"]],["const"]]],[11,"default","","",144,[[],["self"]]],[11,"to_tokens","","",144,[[["self"],["tokenstream"]]]],[11,"parse","","",144,[[["cursor"]],["presult",["const"]]]],[11,"description","","",144,[[],["option",["str"]]]],[11,"from","","",144,[[["span"]],["self"]]],[11,"clone","","",145,[[["self"]],["continue"]]],[11,"default","","",145,[[],["self"]]],[11,"to_tokens","","",145,[[["self"],["tokenstream"]]]],[11,"parse","","",145,[[["cursor"]],["presult",["continue"]]]],[11,"description","","",145,[[],["option",["str"]]]],[11,"from","","",145,[[["span"]],["self"]]],[11,"clone","","",146,[[["self"]],["crate"]]],[11,"default","","",146,[[],["self"]]],[11,"to_tokens","","",146,[[["self"],["tokenstream"]]]],[11,"parse","","",146,[[["cursor"]],["presult",["crate"]]]],[11,"description","","",146,[[],["option",["str"]]]],[11,"from","","",146,[[["span"]],["self"]]],[11,"clone","","",147,[[["self"]],["default"]]],[11,"default","","",147,[[],["self"]]],[11,"to_tokens","","",147,[[["self"],["tokenstream"]]]],[11,"parse","","",147,[[["cursor"]],["presult",["default"]]]],[11,"description","","",147,[[],["option",["str"]]]],[11,"from","","",147,[[["span"]],["self"]]],[11,"clone","","",148,[[["self"]],["do"]]],[11,"default","","",148,[[],["self"]]],[11,"to_tokens","","",148,[[["self"],["tokenstream"]]]],[11,"parse","","",148,[[["cursor"]],["presult",["do"]]]],[11,"description","","",148,[[],["option",["str"]]]],[11,"from","","",148,[[["span"]],["self"]]],[11,"clone","","",149,[[["self"]],["dyn"]]],[11,"default","","",149,[[],["self"]]],[11,"to_tokens","","",149,[[["self"],["tokenstream"]]]],[11,"parse","","",149,[[["cursor"]],["presult",["dyn"]]]],[11,"description","","",149,[[],["option",["str"]]]],[11,"from","","",149,[[["span"]],["self"]]],[11,"clone","","",150,[[["self"]],["else"]]],[11,"default","","",150,[[],["self"]]],[11,"to_tokens","","",150,[[["self"],["tokenstream"]]]],[11,"parse","","",150,[[["cursor"]],["presult",["else"]]]],[11,"description","","",150,[[],["option",["str"]]]],[11,"from","","",150,[[["span"]],["self"]]],[11,"clone","","",151,[[["self"]],["enum"]]],[11,"default","","",151,[[],["self"]]],[11,"to_tokens","","",151,[[["self"],["tokenstream"]]]],[11,"parse","","",151,[[["cursor"]],["presult",["enum"]]]],[11,"description","","",151,[[],["option",["str"]]]],[11,"from","","",151,[[["span"]],["self"]]],[11,"clone","","",152,[[["self"]],["extern"]]],[11,"default","","",152,[[],["self"]]],[11,"to_tokens","","",152,[[["self"],["tokenstream"]]]],[11,"parse","","",152,[[["cursor"]],["presult",["extern"]]]],[11,"description","","",152,[[],["option",["str"]]]],[11,"from","","",152,[[["span"]],["self"]]],[11,"clone","","",153,[[["self"]],["fn"]]],[11,"default","","",153,[[],["self"]]],[11,"to_tokens","","",153,[[["self"],["tokenstream"]]]],[11,"parse","","",153,[[["cursor"]],["presult",["fn"]]]],[11,"description","","",153,[[],["option",["str"]]]],[11,"from","","",153,[[["span"]],["self"]]],[11,"clone","","",154,[[["self"]],["for"]]],[11,"default","","",154,[[],["self"]]],[11,"to_tokens","","",154,[[["self"],["tokenstream"]]]],[11,"parse","","",154,[[["cursor"]],["presult",["for"]]]],[11,"description","","",154,[[],["option",["str"]]]],[11,"from","","",154,[[["span"]],["self"]]],[11,"clone","","",155,[[["self"]],["if"]]],[11,"default","","",155,[[],["self"]]],[11,"to_tokens","","",155,[[["self"],["tokenstream"]]]],[11,"parse","","",155,[[["cursor"]],["presult",["if"]]]],[11,"description","","",155,[[],["option",["str"]]]],[11,"from","","",155,[[["span"]],["self"]]],[11,"clone","","",156,[[["self"]],["impl"]]],[11,"default","","",156,[[],["self"]]],[11,"to_tokens","","",156,[[["self"],["tokenstream"]]]],[11,"parse","","",156,[[["cursor"]],["presult",["impl"]]]],[11,"description","","",156,[[],["option",["str"]]]],[11,"from","","",156,[[["span"]],["self"]]],[11,"clone","","",157,[[["self"]],["in"]]],[11,"default","","",157,[[],["self"]]],[11,"to_tokens","","",157,[[["self"],["tokenstream"]]]],[11,"parse","","",157,[[["cursor"]],["presult",["in"]]]],[11,"description","","",157,[[],["option",["str"]]]],[11,"from","","",157,[[["span"]],["self"]]],[11,"clone","","",158,[[["self"]],["let"]]],[11,"default","","",158,[[],["self"]]],[11,"to_tokens","","",158,[[["self"],["tokenstream"]]]],[11,"parse","","",158,[[["cursor"]],["presult",["let"]]]],[11,"description","","",158,[[],["option",["str"]]]],[11,"from","","",158,[[["span"]],["self"]]],[11,"clone","","",159,[[["self"]],["loop"]]],[11,"default","","",159,[[],["self"]]],[11,"to_tokens","","",159,[[["self"],["tokenstream"]]]],[11,"parse","","",159,[[["cursor"]],["presult",["loop"]]]],[11,"description","","",159,[[],["option",["str"]]]],[11,"from","","",159,[[["span"]],["self"]]],[11,"clone","","",160,[[["self"]],["macro"]]],[11,"default","","",160,[[],["self"]]],[11,"to_tokens","","",160,[[["self"],["tokenstream"]]]],[11,"parse","","",160,[[["cursor"]],["presult",["macro"]]]],[11,"description","","",160,[[],["option",["str"]]]],[11,"from","","",160,[[["span"]],["self"]]],[11,"clone","","",161,[[["self"]],["match"]]],[11,"default","","",161,[[],["self"]]],[11,"to_tokens","","",161,[[["self"],["tokenstream"]]]],[11,"parse","","",161,[[["cursor"]],["presult",["match"]]]],[11,"description","","",161,[[],["option",["str"]]]],[11,"from","","",161,[[["span"]],["self"]]],[11,"clone","","",162,[[["self"]],["mod"]]],[11,"default","","",162,[[],["self"]]],[11,"to_tokens","","",162,[[["self"],["tokenstream"]]]],[11,"parse","","",162,[[["cursor"]],["presult",["mod"]]]],[11,"description","","",162,[[],["option",["str"]]]],[11,"from","","",162,[[["span"]],["self"]]],[11,"clone","","",163,[[["self"]],["move"]]],[11,"default","","",163,[[],["self"]]],[11,"to_tokens","","",163,[[["self"],["tokenstream"]]]],[11,"parse","","",163,[[["cursor"]],["presult",["move"]]]],[11,"description","","",163,[[],["option",["str"]]]],[11,"from","","",163,[[["span"]],["self"]]],[11,"clone","","",164,[[["self"]],["mut"]]],[11,"default","","",164,[[],["self"]]],[11,"to_tokens","","",164,[[["self"],["tokenstream"]]]],[11,"parse","","",164,[[["cursor"]],["presult",["mut"]]]],[11,"description","","",164,[[],["option",["str"]]]],[11,"from","","",164,[[["span"]],["self"]]],[11,"clone","","",165,[[["self"]],["pub"]]],[11,"default","","",165,[[],["self"]]],[11,"to_tokens","","",165,[[["self"],["tokenstream"]]]],[11,"parse","","",165,[[["cursor"]],["presult",["pub"]]]],[11,"description","","",165,[[],["option",["str"]]]],[11,"from","","",165,[[["span"]],["self"]]],[11,"clone","","",166,[[["self"]],["ref"]]],[11,"default","","",166,[[],["self"]]],[11,"to_tokens","","",166,[[["self"],["tokenstream"]]]],[11,"parse","","",166,[[["cursor"]],["presult",["ref"]]]],[11,"description","","",166,[[],["option",["str"]]]],[11,"from","","",166,[[["span"]],["self"]]],[11,"clone","","",167,[[["self"]],["return"]]],[11,"default","","",167,[[],["self"]]],[11,"to_tokens","","",167,[[["self"],["tokenstream"]]]],[11,"parse","","",167,[[["cursor"]],["presult",["return"]]]],[11,"description","","",167,[[],["option",["str"]]]],[11,"from","","",167,[[["span"]],["self"]]],[11,"clone","","",168,[[["self"]],["self_"]]],[11,"default","","",168,[[],["self"]]],[11,"to_tokens","","",168,[[["self"],["tokenstream"]]]],[11,"parse","","",168,[[["cursor"]],["presult",["self_"]]]],[11,"description","","",168,[[],["option",["str"]]]],[11,"from","","",168,[[["span"]],["self"]]],[11,"clone","","",169,[[["self"]],["static"]]],[11,"default","","",169,[[],["self"]]],[11,"to_tokens","","",169,[[["self"],["tokenstream"]]]],[11,"parse","","",169,[[["cursor"]],["presult",["static"]]]],[11,"description","","",169,[[],["option",["str"]]]],[11,"from","","",169,[[["span"]],["self"]]],[11,"clone","","",170,[[["self"]],["struct"]]],[11,"default","","",170,[[],["self"]]],[11,"to_tokens","","",170,[[["self"],["tokenstream"]]]],[11,"parse","","",170,[[["cursor"]],["presult",["struct"]]]],[11,"description","","",170,[[],["option",["str"]]]],[11,"from","","",170,[[["span"]],["self"]]],[11,"clone","","",171,[[["self"]],["super"]]],[11,"default","","",171,[[],["self"]]],[11,"to_tokens","","",171,[[["self"],["tokenstream"]]]],[11,"parse","","",171,[[["cursor"]],["presult",["super"]]]],[11,"description","","",171,[[],["option",["str"]]]],[11,"from","","",171,[[["span"]],["self"]]],[11,"clone","","",172,[[["self"]],["trait"]]],[11,"default","","",172,[[],["self"]]],[11,"to_tokens","","",172,[[["self"],["tokenstream"]]]],[11,"parse","","",172,[[["cursor"]],["presult",["trait"]]]],[11,"description","","",172,[[],["option",["str"]]]],[11,"from","","",172,[[["span"]],["self"]]],[11,"clone","","",173,[[["self"]],["type"]]],[11,"default","","",173,[[],["self"]]],[11,"to_tokens","","",173,[[["self"],["tokenstream"]]]],[11,"parse","","",173,[[["cursor"]],["presult",["type"]]]],[11,"description","","",173,[[],["option",["str"]]]],[11,"from","","",173,[[["span"]],["self"]]],[11,"clone","","",174,[[["self"]],["union"]]],[11,"default","","",174,[[],["self"]]],[11,"to_tokens","","",174,[[["self"],["tokenstream"]]]],[11,"parse","","",174,[[["cursor"]],["presult",["union"]]]],[11,"description","","",174,[[],["option",["str"]]]],[11,"from","","",174,[[["span"]],["self"]]],[11,"clone","","",175,[[["self"]],["unsafe"]]],[11,"default","","",175,[[],["self"]]],[11,"to_tokens","","",175,[[["self"],["tokenstream"]]]],[11,"parse","","",175,[[["cursor"]],["presult",["unsafe"]]]],[11,"description","","",175,[[],["option",["str"]]]],[11,"from","","",175,[[["span"]],["self"]]],[11,"clone","","",176,[[["self"]],["use"]]],[11,"default","","",176,[[],["self"]]],[11,"to_tokens","","",176,[[["self"],["tokenstream"]]]],[11,"parse","","",176,[[["cursor"]],["presult",["use"]]]],[11,"description","","",176,[[],["option",["str"]]]],[11,"from","","",176,[[["span"]],["self"]]],[11,"clone","","",177,[[["self"]],["where"]]],[11,"default","","",177,[[],["self"]]],[11,"to_tokens","","",177,[[["self"],["tokenstream"]]]],[11,"parse","","",177,[[["cursor"]],["presult",["where"]]]],[11,"description","","",177,[[],["option",["str"]]]],[11,"from","","",177,[[["span"]],["self"]]],[11,"clone","","",178,[[["self"]],["while"]]],[11,"default","","",178,[[],["self"]]],[11,"to_tokens","","",178,[[["self"],["tokenstream"]]]],[11,"parse","","",178,[[["cursor"]],["presult",["while"]]]],[11,"description","","",178,[[],["option",["str"]]]],[11,"from","","",178,[[["span"]],["self"]]],[11,"clone","","",179,[[["self"]],["yield"]]],[11,"default","","",179,[[],["self"]]],[11,"to_tokens","","",179,[[["self"],["tokenstream"]]]],[11,"parse","","",179,[[["cursor"]],["presult",["yield"]]]],[11,"description","","",179,[[],["option",["str"]]]],[11,"from","","",179,[[["span"]],["self"]]],[11,"from","syn","",180,[[["self_"]],["ident"]]],[11,"from","","",180,[[["capself"]],["ident"]]],[11,"from","","",180,[[["super"]],["ident"]]],[11,"from","","",180,[[["crate"]],["ident"]]],[11,"from","","",180,[[["extern"]],["ident"]]],[11,"parse_inner","","",0,[[["cursor"]],["presult"]]],[11,"parse_outer","","",0,[[["cursor"]],["presult"]]],[11,"to_tokens","","",0,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",1,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",2,[[["self"],["tokenstream"]]]],[11,"clone","","",0,[[["self"]],["attribute"]]],[11,"interpret_meta","","Parses the tokens after the path as a `Meta` if possible.",0,[[["self"]],["option",["meta"]]]],[11,"clone","","",63,[[["self"]],["attrstyle"]]],[11,"clone","","",64,[[["self"]],["meta"]]],[11,"from","","",64,[[["ident"]],["meta"]]],[11,"clone","","",1,[[["self"]],["metalist"]]],[11,"from","","",64,[[["metalist"]],["meta"]]],[11,"clone","","",2,[[["self"]],["metanamevalue"]]],[11,"from","","",64,[[["metanamevalue"]],["meta"]]],[11,"to_tokens","","",64,[[["self"],["tokenstream"]]]],[11,"name","","Returns the identifier that begins this structured meta item.",64,[[["self"]],["ident"]]],[11,"clone","","",65,[[["self"]],["nestedmeta"]]],[11,"from","","",65,[[["meta"]],["nestedmeta"]]],[11,"from","","",65,[[["lit"]],["nestedmeta"]]],[11,"to_tokens","","",65,[[["self"],["tokenstream"]]]],[11,"parse","","",6,[[["cursor"]],["presult"]]],[11,"description","","",6,[[],["option",["str"]]]],[11,"parse","","",4,[[["cursor"]],["presult"]]],[11,"description","","",4,[[],["option",["str"]]]],[11,"parse","","",5,[[["cursor"]],["presult"]]],[11,"description","","",5,[[],["option",["str"]]]],[11,"parse_named","","",3,[[["cursor"]],["presult"]]],[11,"parse_unnamed","","",3,[[["cursor"]],["presult"]]],[11,"parse","","",67,[[["cursor"]],["presult"]]],[11,"description","","",67,[[],["option",["str"]]]],[11,"to_tokens","","",6,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",4,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",5,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",3,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",8,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",7,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",9,[[["self"],["tokenstream"]]]],[11,"clone","","",6,[[["self"]],["variant"]]],[11,"clone","","",66,[[["self"]],["fields"]]],[11,"clone","","",4,[[["self"]],["fieldsnamed"]]],[11,"from","","",66,[[["fieldsnamed"]],["fields"]]],[11,"clone","","",5,[[["self"]],["fieldsunnamed"]]],[11,"from","","",66,[[["fieldsunnamed"]],["fields"]]],[11,"to_tokens","","",66,[[["self"],["tokenstream"]]]],[11,"iter","","Get an iterator over the [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",66,[[["self"]],["iter",["field"]]]],[11,"clone","","",3,[[["self"]],["field"]]],[11,"clone","","",67,[[["self"]],["visibility"]]],[11,"clone","","",8,[[["self"]],["vispublic"]]],[11,"from","","",67,[[["vispublic"]],["visibility"]]],[11,"clone","","",7,[[["self"]],["viscrate"]]],[11,"from","","",67,[[["viscrate"]],["visibility"]]],[11,"clone","","",9,[[["self"]],["visrestricted"]]],[11,"from","","",67,[[["visrestricted"]],["visibility"]]],[11,"to_tokens","","",67,[[["self"],["tokenstream"]]]],[11,"parse","","",68,[[["cursor"]],["presult"]]],[11,"description","","",68,[[],["option",["str"]]]],[11,"parse","","",15,[[["cursor"]],["presult"]]],[11,"description","","",15,[[],["option",["str"]]]],[11,"parse","","",16,[[["cursor"]],["presult"]]],[11,"description","","",16,[[],["option",["str"]]]],[11,"parse","","",17,[[["cursor"]],["presult"]]],[11,"description","","",17,[[],["option",["str"]]]],[11,"parse","","",69,[[["cursor"]],["presult"]]],[11,"description","","",69,[[],["option",["str"]]]],[11,"parse","","",20,[[["cursor"]],["presult"]]],[11,"description","","",20,[[],["option",["str"]]]],[11,"to_tokens","","",11,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",10,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",18,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",15,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",12,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",13,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",69,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",20,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",14,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",17,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",16,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",19,[[["self"],["tokenstream"]]]],[11,"clone","","",68,[[["self"]],["expr"]]],[11,"clone","","",181,[[["self"]],["exprbox"]]],[11,"from","","",68,[[["exprbox"]],["expr"]]],[11,"clone","","",182,[[["self"]],["exprinplace"]]],[11,"from","","",68,[[["exprinplace"]],["expr"]]],[11,"clone","","",183,[[["self"]],["exprarray"]]],[11,"from","","",68,[[["exprarray"]],["expr"]]],[11,"clone","","",11,[[["self"]],["exprcall"]]],[11,"from","","",68,[[["exprcall"]],["expr"]]],[11,"clone","","",184,[[["self"]],["exprmethodcall"]]],[11,"from","","",68,[[["exprmethodcall"]],["expr"]]],[11,"clone","","",185,[[["self"]],["exprtuple"]]],[11,"from","","",68,[[["exprtuple"]],["expr"]]],[11,"clone","","",10,[[["self"]],["exprbinary"]]],[11,"from","","",68,[[["exprbinary"]],["expr"]]],[11,"clone","","",18,[[["self"]],["exprunary"]]],[11,"from","","",68,[[["exprunary"]],["expr"]]],[11,"clone","","",15,[[["self"]],["exprlit"]]],[11,"from","","",68,[[["exprlit"]],["expr"]]],[11,"clone","","",12,[[["self"]],["exprcast"]]],[11,"from","","",68,[[["exprcast"]],["expr"]]],[11,"clone","","",186,[[["self"]],["exprtype"]]],[11,"from","","",68,[[["exprtype"]],["expr"]]],[11,"clone","","",187,[[["self"]],["exprif"]]],[11,"from","","",68,[[["exprif"]],["expr"]]],[11,"clone","","",188,[[["self"]],["expriflet"]]],[11,"from","","",68,[[["expriflet"]],["expr"]]],[11,"clone","","",189,[[["self"]],["exprwhile"]]],[11,"from","","",68,[[["exprwhile"]],["expr"]]],[11,"clone","","",190,[[["self"]],["exprwhilelet"]]],[11,"from","","",68,[[["exprwhilelet"]],["expr"]]],[11,"clone","","",191,[[["self"]],["exprforloop"]]],[11,"from","","",68,[[["exprforloop"]],["expr"]]],[11,"clone","","",192,[[["self"]],["exprloop"]]],[11,"from","","",68,[[["exprloop"]],["expr"]]],[11,"clone","","",193,[[["self"]],["exprmatch"]]],[11,"from","","",68,[[["exprmatch"]],["expr"]]],[11,"clone","","",194,[[["self"]],["exprclosure"]]],[11,"from","","",68,[[["exprclosure"]],["expr"]]],[11,"clone","","",195,[[["self"]],["exprunsafe"]]],[11,"from","","",68,[[["exprunsafe"]],["expr"]]],[11,"clone","","",196,[[["self"]],["exprblock"]]],[11,"from","","",68,[[["exprblock"]],["expr"]]],[11,"clone","","",197,[[["self"]],["exprassign"]]],[11,"from","","",68,[[["exprassign"]],["expr"]]],[11,"clone","","",198,[[["self"]],["exprassignop"]]],[11,"from","","",68,[[["exprassignop"]],["expr"]]],[11,"clone","","",13,[[["self"]],["exprfield"]]],[11,"from","","",68,[[["exprfield"]],["expr"]]],[11,"clone","","",14,[[["self"]],["exprindex"]]],[11,"from","","",68,[[["exprindex"]],["expr"]]],[11,"clone","","",199,[[["self"]],["exprrange"]]],[11,"from","","",68,[[["exprrange"]],["expr"]]],[11,"clone","","",17,[[["self"]],["exprpath"]]],[11,"from","","",68,[[["exprpath"]],["expr"]]],[11,"clone","","",200,[[["self"]],["exprreference"]]],[11,"from","","",68,[[["exprreference"]],["expr"]]],[11,"clone","","",201,[[["self"]],["exprbreak"]]],[11,"from","","",68,[[["exprbreak"]],["expr"]]],[11,"clone","","",202,[[["self"]],["exprcontinue"]]],[11,"from","","",68,[[["exprcontinue"]],["expr"]]],[11,"clone","","",203,[[["self"]],["exprreturn"]]],[11,"from","","",68,[[["exprreturn"]],["expr"]]],[11,"clone","","",204,[[["self"]],["exprmacro"]]],[11,"from","","",68,[[["exprmacro"]],["expr"]]],[11,"clone","","",205,[[["self"]],["exprstruct"]]],[11,"from","","",68,[[["exprstruct"]],["expr"]]],[11,"clone","","",206,[[["self"]],["exprrepeat"]]],[11,"from","","",68,[[["exprrepeat"]],["expr"]]],[11,"clone","","",16,[[["self"]],["exprparen"]]],[11,"from","","",68,[[["exprparen"]],["expr"]]],[11,"clone","","",207,[[["self"]],["exprgroup"]]],[11,"from","","",68,[[["exprgroup"]],["expr"]]],[11,"clone","","",208,[[["self"]],["exprtry"]]],[11,"from","","",68,[[["exprtry"]],["expr"]]],[11,"clone","","",209,[[["self"]],["exprcatch"]]],[11,"from","","",68,[[["exprcatch"]],["expr"]]],[11,"clone","","",210,[[["self"]],["expryield"]]],[11,"from","","",68,[[["expryield"]],["expr"]]],[11,"clone","","",19,[[["self"]],["exprverbatim"]]],[11,"from","","",68,[[["exprverbatim"]],["expr"]]],[11,"to_tokens","","",68,[[["self"],["tokenstream"]]]],[11,"clone","","",69,[[["self"]],["member"]]],[11,"clone","","",20,[[["self"]],["index"]]],[11,"from","","",20,[[["usize"]],["index"]]],[11,"parse","","",23,[[["cursor"]],["presult"]]],[11,"description","","",23,[[],["option",["str"]]]],[11,"parse","","",70,[[["cursor"]],["presult"]]],[11,"description","","",70,[[],["option",["str"]]]],[11,"parse","","",24,[[["cursor"]],["presult"]]],[11,"description","","",24,[[],["option",["str"]]]],[11,"parse","","",21,[[["cursor"]],["presult"]]],[11,"description","","",21,[[],["option",["str"]]]],[11,"parse","","",29,[[["cursor"]],["presult"]]],[11,"description","","",29,[[],["option",["str"]]]],[11,"parse","","",72,[[["cursor"]],["presult"]]],[11,"description","","",72,[[],["option",["str"]]]],[11,"parse","","",28,[[["cursor"]],["presult"]]],[11,"description","","",28,[[],["option",["str"]]]],[11,"parse","","",71,[[["cursor"]],["presult"]]],[11,"description","","",71,[[],["option",["str"]]]],[11,"parse","","",22,[[["cursor"]],["presult"]]],[11,"description","","",22,[[],["option",["str"]]]],[11,"parse","","",30,[[["cursor"]],["presult"]]],[11,"description","","",30,[[],["option",["str"]]]],[11,"parse","","",73,[[["cursor"]],["presult"]]],[11,"description","","",73,[[],["option",["str"]]]],[11,"to_tokens","","",23,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",211,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",212,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",213,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",21,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",24,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",29,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",28,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",71,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",22,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",30,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",27,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",26,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",25,[[["self"],["tokenstream"]]]],[11,"default","","",23,[[],["generics"]]],[11,"clone","","",23,[[["self"]],["generics"]]],[11,"clone","","",70,[[["self"]],["genericparam"]]],[11,"clone","","",29,[[["self"]],["typeparam"]]],[11,"from","","",70,[[["typeparam"]],["genericparam"]]],[11,"clone","","",24,[[["self"]],["lifetimedef"]]],[11,"from","","",70,[[["lifetimedef"]],["genericparam"]]],[11,"clone","","",22,[[["self"]],["constparam"]]],[11,"from","","",70,[[["constparam"]],["genericparam"]]],[11,"to_tokens","","",70,[[["self"],["tokenstream"]]]],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",23,[[["self"]],["typeparams"]]],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",23,[[["self"]],["typeparamsmut"]]],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",23,[[["self"]],["lifetimes"]]],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",23,[[["self"]],["lifetimesmut"]]],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",23,[[["self"]],["constparams"]]],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",23,[[["self"]],["constparamsmut"]]],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one present already.",23,[[["self"]],["whereclause"]]],[11,"clone","","",211,[[["self"]],["implgenerics"]]],[11,"clone","","",212,[[["self"]],["typegenerics"]]],[11,"clone","","",213,[[["self"]],["turbofish"]]],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",23,N],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",212,[[["self"]],["turbofish"]]],[11,"default","","",21,[[],["boundlifetimes"]]],[11,"clone","","",21,[[["self"]],["boundlifetimes"]]],[11,"new","","",24,[[["lifetime"]],["self"]]],[11,"from","","",29,[[["ident"]],["self"]]],[11,"clone","","",72,[[["self"]],["typeparambound"]]],[11,"from","","",72,[[["traitbound"]],["typeparambound"]]],[11,"from","","",72,[[["lifetime"]],["typeparambound"]]],[11,"to_tokens","","",72,[[["self"],["tokenstream"]]]],[11,"clone","","",28,[[["self"]],["traitbound"]]],[11,"clone","","",71,[[["self"]],["traitboundmodifier"]]],[11,"clone","","",30,[[["self"]],["whereclause"]]],[11,"clone","","",73,[[["self"]],["wherepredicate"]]],[11,"clone","","",27,[[["self"]],["predicatetype"]]],[11,"from","","",73,[[["predicatetype"]],["wherepredicate"]]],[11,"clone","","",26,[[["self"]],["predicatelifetime"]]],[11,"from","","",73,[[["predicatelifetime"]],["wherepredicate"]]],[11,"clone","","",25,[[["self"]],["predicateeq"]]],[11,"from","","",73,[[["predicateeq"]],["wherepredicate"]]],[11,"to_tokens","","",73,[[["self"],["tokenstream"]]]],[11,"parse","","",31,[[["cursor"]],["presult"]]],[11,"description","","",31,[[],["option",["str"]]]],[11,"to_tokens","","",31,[[["self"],["tokenstream"]]]],[11,"clone","","",31,[[["self"]],["lifetime"]]],[11,"new","","",31,[[["str"],["span"]],["self"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"eq","","",31,[[["self"],["lifetime"]],["bool"]]],[11,"partial_cmp","","",31,[[["self"],["lifetime"]],["option",["ordering"]]]],[11,"cmp","","",31,[[["self"],["lifetime"]],["ordering"]]],[11,"hash","","",31,[[["self"],["h"]]]],[11,"parse","","",76,[[["cursor"]],["presult"]]],[11,"description","","",76,[[],["option",["str"]]]],[11,"parse","","",214,[[["cursor"]],["presult"]]],[11,"description","","",214,[[],["option",["str"]]]],[11,"parse","","",215,[[["cursor"]],["presult"]]],[11,"description","","",215,[[],["option",["str"]]]],[11,"parse","","",216,[[["cursor"]],["presult"]]],[11,"description","","",216,[[],["option",["str"]]]],[11,"parse","","",217,[[["cursor"]],["presult"]]],[11,"description","","",217,[[],["option",["str"]]]],[11,"parse","","",218,[[["cursor"]],["presult"]]],[11,"description","","",218,[[],["option",["str"]]]],[11,"parse","","",219,[[["cursor"]],["presult"]]],[11,"description","","",219,[[],["option",["str"]]]],[11,"parse","","",32,[[["cursor"]],["presult"]]],[11,"description","","",32,[[],["option",["str"]]]],[11,"to_tokens","","",214,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",215,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",216,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",217,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",218,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",219,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",32,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",33,[[["self"],["tokenstream"]]]],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",76,[[["literal"]],["self"]]],[11,"clone","","",76,[[["self"]],["lit"]]],[11,"clone","","",214,[[["self"]],["litstr"]]],[11,"from","","",76,[[["litstr"]],["lit"]]],[11,"clone","","",215,[[["self"]],["litbytestr"]]],[11,"from","","",76,[[["litbytestr"]],["lit"]]],[11,"clone","","",216,[[["self"]],["litbyte"]]],[11,"from","","",76,[[["litbyte"]],["lit"]]],[11,"clone","","",217,[[["self"]],["litchar"]]],[11,"from","","",76,[[["litchar"]],["lit"]]],[11,"clone","","",218,[[["self"]],["litint"]]],[11,"from","","",76,[[["litint"]],["lit"]]],[11,"clone","","",219,[[["self"]],["litfloat"]]],[11,"from","","",76,[[["litfloat"]],["lit"]]],[11,"clone","","",32,[[["self"]],["litbool"]]],[11,"from","","",76,[[["litbool"]],["lit"]]],[11,"clone","","",33,[[["self"]],["litverbatim"]]],[11,"from","","",76,[[["litverbatim"]],["lit"]]],[11,"to_tokens","","",76,[[["self"],["tokenstream"]]]],[11,"new","","",214,[[["str"],["span"]],["self"]]],[11,"value","","",214,[[["self"]],["string"]]],[11,"parse","","Parse a syntax tree node from the content of this string literal.",214,[[["self"]],["result",["parseerror"]]]],[11,"span","","",214,[[["self"]],["span"]]],[11,"set_span","","",214,[[["self"],["span"]]]],[11,"new","","",215,N],[11,"value","","",215,[[["self"]],["vec",["u8"]]]],[11,"span","","",215,[[["self"]],["span"]]],[11,"set_span","","",215,[[["self"],["span"]]]],[11,"new","","",216,[[["u8"],["span"]],["self"]]],[11,"value","","",216,[[["self"]],["u8"]]],[11,"span","","",216,[[["self"]],["span"]]],[11,"set_span","","",216,[[["self"],["span"]]]],[11,"new","","",217,[[["char"],["span"]],["self"]]],[11,"value","","",217,[[["self"]],["char"]]],[11,"span","","",217,[[["self"]],["span"]]],[11,"set_span","","",217,[[["self"],["span"]]]],[11,"new","","",218,[[["u64"],["intsuffix"],["span"]],["self"]]],[11,"value","","",218,[[["self"]],["u64"]]],[11,"suffix","","",218,[[["self"]],["intsuffix"]]],[11,"span","","",218,[[["self"]],["span"]]],[11,"set_span","","",218,[[["self"],["span"]]]],[11,"new","","",219,[[["f64"],["floatsuffix"],["span"]],["self"]]],[11,"value","","",219,[[["self"]],["f64"]]],[11,"suffix","","",219,[[["self"]],["floatsuffix"]]],[11,"span","","",219,[[["self"]],["span"]]],[11,"set_span","","",219,[[["self"],["span"]]]],[11,"span","","",33,[[["self"]],["span"]]],[11,"set_span","","",33,[[["self"],["span"]]]],[11,"clone","","",77,[[["self"]],["strstyle"]]],[11,"clone","","",75,[[["self"]],["intsuffix"]]],[11,"clone","","",74,[[["self"]],["floatsuffix"]]],[11,"parse","","",34,[[["cursor"]],["presult"]]],[11,"description","","",34,[[],["option",["str"]]]],[11,"to_tokens","","",34,[[["self"],["tokenstream"]]]],[11,"clone","","",34,[[["self"]],["macro"]]],[11,"clone","","",78,[[["self"]],["macrodelimiter"]]],[11,"parse","","",38,[[["cursor"]],["presult"]]],[11,"description","","",38,[[],["option",["str"]]]],[11,"to_tokens","","",38,[[["self"],["tokenstream"]]]],[11,"clone","","",38,[[["self"]],["deriveinput"]]],[11,"clone","","",79,[[["self"]],["data"]]],[11,"clone","","",36,[[["self"]],["datastruct"]]],[11,"from","","",79,[[["datastruct"]],["data"]]],[11,"clone","","",35,[[["self"]],["dataenum"]]],[11,"from","","",79,[[["dataenum"]],["data"]]],[11,"clone","","",37,[[["self"]],["dataunion"]]],[11,"from","","",79,[[["dataunion"]],["data"]]],[11,"parse_binop","","",80,[[["cursor"]],["presult"]]],[11,"parse","","",81,[[["cursor"]],["presult"]]],[11,"description","","",81,[[],["option",["str"]]]],[11,"to_tokens","","",80,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",81,[[["self"],["tokenstream"]]]],[11,"clone","","",80,[[["self"]],["binop"]]],[11,"clone","","",81,[[["self"]],["unop"]]],[11,"parse","","",84,[[["cursor"]],["presult"]]],[11,"description","","",84,[[],["option",["str"]]]],[11,"without_plus","","",84,[[["cursor"]],["presult"]]],[11,"parse","","",52,[[["cursor"]],["presult"]]],[11,"description","","",52,[[],["option",["str"]]]],[11,"parse","","",41,[[["cursor"]],["presult"]]],[11,"description","","",41,[[],["option",["str"]]]],[11,"parse","","",50,[[["cursor"]],["presult"]]],[11,"description","","",50,[[],["option",["str"]]]],[11,"parse","","",51,[[["cursor"]],["presult"]]],[11,"description","","",51,[[],["option",["str"]]]],[11,"parse","","",42,[[["cursor"]],["presult"]]],[11,"description","","",42,[[],["option",["str"]]]],[11,"parse","","",47,[[["cursor"]],["presult"]]],[11,"description","","",47,[[],["option",["str"]]]],[11,"parse","","",45,[[["cursor"]],["presult"]]],[11,"description","","",45,[[],["option",["str"]]]],[11,"parse","","",54,[[["cursor"]],["presult"]]],[11,"description","","",54,[[],["option",["str"]]]],[11,"parse","","",46,[[["cursor"]],["presult"]]],[11,"description","","",46,[[],["option",["str"]]]],[11,"parse","","",49,[[["cursor"]],["presult"]]],[11,"description","","",49,[[],["option",["str"]]]],[11,"without_plus","","",83,[[["cursor"]],["presult"]]],[11,"parse","","",83,[[["cursor"]],["presult"]]],[11,"description","","",83,[[],["option",["str"]]]],[11,"parse","","",53,[[["cursor"]],["presult"]]],[11,"description","","",53,[[],["option",["str"]]]],[11,"without_plus","","",53,[[["cursor"]],["presult"]]],[11,"parse","","",44,[[["cursor"]],["presult"]]],[11,"description","","",44,[[],["option",["str"]]]],[11,"parse","","",43,[[["cursor"]],["presult"]]],[11,"description","","",43,[[],["option",["str"]]]],[11,"parse","","",48,[[["cursor"]],["presult"]]],[11,"description","","",48,[[],["option",["str"]]]],[11,"parse","","",40,[[["cursor"]],["presult"]]],[11,"description","","",40,[[],["option",["str"]]]],[11,"parse","","",82,[[["cursor"]],["presult"]]],[11,"description","","",82,[[],["option",["str"]]]],[11,"parse","","",39,[[["cursor"]],["presult"]]],[11,"description","","",39,[[],["option",["str"]]]],[11,"to_tokens","","",52,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",41,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",50,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",51,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",42,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",47,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",54,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",49,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",53,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",44,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",43,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",48,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",45,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",46,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",55,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",83,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",40,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",82,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",39,[[["self"],["tokenstream"]]]],[11,"clone","","",84,[[["self"]],["type"]]],[11,"clone","","",52,[[["self"]],["typeslice"]]],[11,"from","","",84,[[["typeslice"]],["type"]]],[11,"clone","","",41,[[["self"]],["typearray"]]],[11,"from","","",84,[[["typearray"]],["type"]]],[11,"clone","","",50,[[["self"]],["typeptr"]]],[11,"from","","",84,[[["typeptr"]],["type"]]],[11,"clone","","",51,[[["self"]],["typereference"]]],[11,"from","","",84,[[["typereference"]],["type"]]],[11,"clone","","",42,[[["self"]],["typebarefn"]]],[11,"from","","",84,[[["typebarefn"]],["type"]]],[11,"clone","","",47,[[["self"]],["typenever"]]],[11,"from","","",84,[[["typenever"]],["type"]]],[11,"clone","","",54,[[["self"]],["typetuple"]]],[11,"from","","",84,[[["typetuple"]],["type"]]],[11,"clone","","",49,[[["self"]],["typepath"]]],[11,"from","","",84,[[["typepath"]],["type"]]],[11,"clone","","",53,[[["self"]],["typetraitobject"]]],[11,"from","","",84,[[["typetraitobject"]],["type"]]],[11,"clone","","",44,[[["self"]],["typeimpltrait"]]],[11,"from","","",84,[[["typeimpltrait"]],["type"]]],[11,"clone","","",48,[[["self"]],["typeparen"]]],[11,"from","","",84,[[["typeparen"]],["type"]]],[11,"clone","","",43,[[["self"]],["typegroup"]]],[11,"from","","",84,[[["typegroup"]],["type"]]],[11,"clone","","",45,[[["self"]],["typeinfer"]]],[11,"from","","",84,[[["typeinfer"]],["type"]]],[11,"clone","","",46,[[["self"]],["typemacro"]]],[11,"from","","",84,[[["typemacro"]],["type"]]],[11,"clone","","",55,[[["self"]],["typeverbatim"]]],[11,"from","","",84,[[["typeverbatim"]],["type"]]],[11,"to_tokens","","",84,[[["self"],["tokenstream"]]]],[11,"clone","","",39,[[["self"]],["abi"]]],[11,"clone","","",40,[[["self"]],["barefnarg"]]],[11,"clone","","",82,[[["self"]],["barefnargname"]]],[11,"clone","","",83,[[["self"]],["returntype"]]],[11,"parse","","",60,[[["cursor"]],["presult"]]],[11,"description","","",60,[[],["option",["str"]]]],[11,"parse","","",85,[[["cursor"]],["presult"]]],[11,"parse","","",57,[[["cursor"]],["presult"]]],[11,"description","","",57,[[],["option",["str"]]]],[11,"parse","","",59,[[["cursor"]],["presult"]]],[11,"description","","",59,[[],["option",["str"]]]],[11,"parse","","",61,[[["cursor"]],["presult"]]],[11,"description","","",61,[[],["option",["str"]]]],[11,"parse","","",58,[[["cursor"]],["presult"]]],[11,"description","","",58,[[],["option",["str"]]]],[11,"parse_mod_style","","",60,[[["cursor"]],["presult"]]],[11,"to_tokens","","",60,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",61,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",86,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",85,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",57,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",58,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",59,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",56,[[["self"],["tokenstream"]]]],[11,"clone","","",60,[[["self"]],["path"]]],[11,"global","","",60,[[["self"]],["bool"]]],[11,"clone","","",56,[[["self"]],["pathtokens"]]],[11,"from","","",60,[[["t"]],["self"]]],[11,"clone","","",61,[[["self"]],["pathsegment"]]],[11,"from","","",61,[[["t"]],["self"]]],[11,"clone","","",86,[[["self"]],["patharguments"]]],[11,"default","","",86,[[],["self"]]],[11,"is_empty","","",86,[[["self"]],["bool"]]],[11,"clone","","",85,[[["self"]],["genericargument"]]],[11,"clone","","",57,[[["self"]],["anglebracketedgenericarguments"]]],[11,"clone","","",58,[[["self"]],["binding"]]],[11,"clone","","",59,[[["self"]],["parenthesizedgenericarguments"]]],[11,"clone","","",62,[[["self"]],["qself"]]],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",N,N],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",N,N],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",N,N],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",220,[[["tokenstream"]],["tokenbuffer"]]],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",220,[[["tokenstream"]],["tokenbuffer"]]],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",220,[[["self"]],["cursor"]]],[11,"clone","","",221,[[["self"]],["cursor"]]],[11,"eq","","",221,[[["self"],["cursor"]],["bool"]]],[11,"ne","","",221,[[["self"],["cursor"]],["bool"]]],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",221,[[],["self"]]],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",221,[[["self"]],["bool"]]],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",221,[[["self"],["delimiter"]],["option"]]],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along with a cursor pointing at the next `TokenTree`.",221,[[["self"]],["option"]]],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along with a cursor pointing at the next `TokenTree`.",221,[[["self"]],["option"]]],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",221,[[["self"]],["option"]]],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",221,[[["self"]],["tokenstream"]]],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",221,[[["self"]],["option"]]],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",221,[[["self"]],["span"]]],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by punctuation.",N,N],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",N,N],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",N,N],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",N,N],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",N,N],[3,"IntoIter","","An iterator over owned values of type `T`.",N,N],[3,"Iter","","An iterator over borrowed values of type `&T`.",N,N],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",N,N],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",N,N],[13,"Punctuated","","",222,N],[13,"End","","",222,N],[11,"to_tokens","","",223,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",222,[[["self"],["tokenstream"]]]],[11,"clone","","",223,[[["self"]],["punctuated"]]],[11,"new","","Creates an empty punctuated sequence.",223,[[],["punctuated"]]],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",223,[[["self"]],["bool"]]],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",223,[[["self"]],["usize"]]],[11,"first","","Borrows the first punctuated pair in this sequence.",223,[[["self"]],["option",["pair"]]]],[11,"last","","Borrows the last punctuated pair in this sequence.",223,[[["self"]],["option",["pair"]]]],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",223,[[["self"]],["option",["pair"]]]],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",223,[[["self"]],["iter"]]],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",223,[[["self"]],["itermut"]]],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",223,[[["self"]],["pairs"]]],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",223,[[["self"]],["pairsmut"]]],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",223,[[["self"]],["intopairs"]]],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",223,[[["self"],["t"]]]],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",223,[[["self"],["p"]]]],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",223,[[["self"]],["option",["pair"]]]],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",223,[[["self"]],["bool"]]],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",223,[[["self"]],["bool"]]],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",223,[[["self"],["t"]]]],[11,"insert","","Inserts an element at position `index`.",223,[[["self"],["usize"],["t"]]]],[11,"from_iter","","",223,[[["i"]],["self"]]],[11,"extend","","",223,[[["self"],["i"]]]],[11,"from_iter","","",223,[[["i"]],["self"]]],[11,"extend","","",223,[[["self"],["i"]]]],[11,"into_iter","","",223,N],[11,"default","","",223,[[],["self"]]],[11,"next","","",224,[[["self"]],["option"]]],[11,"len","","",224,[[["self"]],["usize"]]],[11,"next","","",225,[[["self"]],["option"]]],[11,"len","","",225,[[["self"]],["usize"]]],[11,"next","","",226,[[["self"]],["option"]]],[11,"len","","",226,[[["self"]],["usize"]]],[11,"next","","",227,[[["self"]],["option"]]],[11,"len","","",227,[[["self"]],["usize"]]],[11,"next","","",228,[[["self"]],["option"]]],[11,"len","","",228,[[["self"]],["usize"]]],[11,"next","","",229,[[["self"]],["option"]]],[11,"len","","",229,[[["self"]],["usize"]]],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",222,[[["self"]],["t"]]],[11,"value","","Borrows the syntax tree node from this punctuated pair.",222,[[["self"]],["t"]]],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",222,[[["self"]],["t"]]],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",222,[[["self"]],["option"]]],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",222,[[["t"],["option"]],["self"]]],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",222,N],[11,"index","","",223,N],[11,"index_mut","","",223,N],[11,"parse_separated","","Parse zero or more syntax tree nodes with punctuation in between and no trailing punctuation.",223,[[["cursor"]],["presult"]]],[11,"parse_separated_nonempty","","Parse one or more syntax tree nodes with punctuation in bewteen and no trailing punctuation. allowing trailing punctuation.",223,[[["cursor"]],["presult"]]],[11,"parse_terminated","","Parse zero or more syntax tree nodes with punctuation in between and optional trailing punctuation.",223,[[["cursor"]],["presult"]]],[11,"parse_terminated_nonempty","","Parse one or more syntax tree nodes with punctuation in between and optional trailing punctuation.",223,[[["cursor"]],["presult"]]],[11,"parse_separated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",223,N],[11,"parse_separated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",223,N],[11,"parse_terminated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",223,N],[11,"parse_terminated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",223,N],[0,"synom","syn","Parsing interface for parsing a token stream into a syntax tree node.",N,N],[3,"ParseError","syn::synom","Error returned when a `Synom` parser cannot parse the input tokens.",N,N],[0,"ext","","Extension traits that are made available within the `call!` parser.",N,N],[8,"IdentExt","syn::synom::ext","Additional parsing methods for `Ident`.",N,N],[10,"parse_any","","Parses any identifier including keywords.",230,[[["cursor"]],["presult"]]],[11,"parse_any","syn","",180,[[["cursor"]],["presult"]]],[6,"PResult","syn::synom","The result of a `Synom` parser.",N,N],[8,"Synom","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",N,N],[10,"parse","","",231,[[["cursor"]],["presult"]]],[11,"description","","A short name of the type being parsed.",231,[[],["option",["str"]]]],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",N,N],[16,"Output","","",232,N],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",232,[[["self"],["tokenstream"]],["result",["parseerror"]]]],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",232,[[["self"],["tokenstream"]],["result",["parseerror"]]]],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",232,[[["self"],["str"]],["result",["parseerror"]]]],[11,"parse","syn","",180,[[["cursor"]],["presult"]]],[11,"description","","",180,[[],["option",["str"]]]],[0,"spanned","","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",233,[[["self"]],["span"]]],[0,"visit","syn","Syntax tree traversal to walk a shared borrow of a syntax tree.",N,N],[5,"visit_abi","syn::visit","",N,[[["v"],["abi"]]]],[5,"visit_angle_bracketed_generic_arguments","","",N,[[["v"],["anglebracketedgenericarguments"]]]],[5,"visit_attr_style","","",N,[[["v"],["attrstyle"]]]],[5,"visit_attribute","","",N,[[["v"],["attribute"]]]],[5,"visit_bare_fn_arg","","",N,[[["v"],["barefnarg"]]]],[5,"visit_bare_fn_arg_name","","",N,[[["v"],["barefnargname"]]]],[5,"visit_bin_op","","",N,[[["v"],["binop"]]]],[5,"visit_binding","","",N,[[["v"],["binding"]]]],[5,"visit_bound_lifetimes","","",N,[[["v"],["boundlifetimes"]]]],[5,"visit_const_param","","",N,[[["v"],["constparam"]]]],[5,"visit_data","","",N,[[["v"],["data"]]]],[5,"visit_data_enum","","",N,[[["v"],["dataenum"]]]],[5,"visit_data_struct","","",N,[[["v"],["datastruct"]]]],[5,"visit_data_union","","",N,[[["v"],["dataunion"]]]],[5,"visit_derive_input","","",N,[[["v"],["deriveinput"]]]],[5,"visit_expr","","",N,[[["v"],["expr"]]]],[5,"visit_expr_binary","","",N,[[["v"],["exprbinary"]]]],[5,"visit_expr_call","","",N,[[["v"],["exprcall"]]]],[5,"visit_expr_cast","","",N,[[["v"],["exprcast"]]]],[5,"visit_expr_field","","",N,[[["v"],["exprfield"]]]],[5,"visit_expr_index","","",N,[[["v"],["exprindex"]]]],[5,"visit_expr_lit","","",N,[[["v"],["exprlit"]]]],[5,"visit_expr_paren","","",N,[[["v"],["exprparen"]]]],[5,"visit_expr_path","","",N,[[["v"],["exprpath"]]]],[5,"visit_expr_unary","","",N,[[["v"],["exprunary"]]]],[5,"visit_expr_verbatim","","",N,[[["v"],["exprverbatim"]]]],[5,"visit_field","","",N,[[["v"],["field"]]]],[5,"visit_fields","","",N,[[["v"],["fields"]]]],[5,"visit_fields_named","","",N,[[["v"],["fieldsnamed"]]]],[5,"visit_fields_unnamed","","",N,[[["v"],["fieldsunnamed"]]]],[5,"visit_generic_argument","","",N,[[["v"],["genericargument"]]]],[5,"visit_generic_param","","",N,[[["v"],["genericparam"]]]],[5,"visit_generics","","",N,[[["v"],["generics"]]]],[5,"visit_ident","","",N,[[["v"],["ident"]]]],[5,"visit_index","","",N,[[["v"],["index"]]]],[5,"visit_lifetime","","",N,[[["v"],["lifetime"]]]],[5,"visit_lifetime_def","","",N,[[["v"],["lifetimedef"]]]],[5,"visit_lit","","",N,[[["v"],["lit"]]]],[5,"visit_lit_bool","","",N,[[["v"],["litbool"]]]],[5,"visit_lit_byte","","",N,[[["v"],["litbyte"]]]],[5,"visit_lit_byte_str","","",N,[[["v"],["litbytestr"]]]],[5,"visit_lit_char","","",N,[[["v"],["litchar"]]]],[5,"visit_lit_float","","",N,[[["v"],["litfloat"]]]],[5,"visit_lit_int","","",N,[[["v"],["litint"]]]],[5,"visit_lit_str","","",N,[[["v"],["litstr"]]]],[5,"visit_lit_verbatim","","",N,[[["v"],["litverbatim"]]]],[5,"visit_macro","","",N,[[["v"],["macro"]]]],[5,"visit_macro_delimiter","","",N,[[["v"],["macrodelimiter"]]]],[5,"visit_member","","",N,[[["v"],["member"]]]],[5,"visit_meta","","",N,[[["v"],["meta"]]]],[5,"visit_meta_list","","",N,[[["v"],["metalist"]]]],[5,"visit_meta_name_value","","",N,[[["v"],["metanamevalue"]]]],[5,"visit_nested_meta","","",N,[[["v"],["nestedmeta"]]]],[5,"visit_parenthesized_generic_arguments","","",N,[[["v"],["parenthesizedgenericarguments"]]]],[5,"visit_path","","",N,[[["v"],["path"]]]],[5,"visit_path_arguments","","",N,[[["v"],["patharguments"]]]],[5,"visit_path_segment","","",N,[[["v"],["pathsegment"]]]],[5,"visit_predicate_eq","","",N,[[["v"],["predicateeq"]]]],[5,"visit_predicate_lifetime","","",N,[[["v"],["predicatelifetime"]]]],[5,"visit_predicate_type","","",N,[[["v"],["predicatetype"]]]],[5,"visit_qself","","",N,[[["v"],["qself"]]]],[5,"visit_return_type","","",N,[[["v"],["returntype"]]]],[5,"visit_span","","",N,[[["v"],["span"]]]],[5,"visit_trait_bound","","",N,[[["v"],["traitbound"]]]],[5,"visit_trait_bound_modifier","","",N,[[["v"],["traitboundmodifier"]]]],[5,"visit_type","","",N,[[["v"],["type"]]]],[5,"visit_type_array","","",N,[[["v"],["typearray"]]]],[5,"visit_type_bare_fn","","",N,[[["v"],["typebarefn"]]]],[5,"visit_type_group","","",N,[[["v"],["typegroup"]]]],[5,"visit_type_impl_trait","","",N,[[["v"],["typeimpltrait"]]]],[5,"visit_type_infer","","",N,[[["v"],["typeinfer"]]]],[5,"visit_type_macro","","",N,[[["v"],["typemacro"]]]],[5,"visit_type_never","","",N,[[["v"],["typenever"]]]],[5,"visit_type_param","","",N,[[["v"],["typeparam"]]]],[5,"visit_type_param_bound","","",N,[[["v"],["typeparambound"]]]],[5,"visit_type_paren","","",N,[[["v"],["typeparen"]]]],[5,"visit_type_path","","",N,[[["v"],["typepath"]]]],[5,"visit_type_ptr","","",N,[[["v"],["typeptr"]]]],[5,"visit_type_reference","","",N,[[["v"],["typereference"]]]],[5,"visit_type_slice","","",N,[[["v"],["typeslice"]]]],[5,"visit_type_trait_object","","",N,[[["v"],["typetraitobject"]]]],[5,"visit_type_tuple","","",N,[[["v"],["typetuple"]]]],[5,"visit_type_verbatim","","",N,[[["v"],["typeverbatim"]]]],[5,"visit_un_op","","",N,[[["v"],["unop"]]]],[5,"visit_variant","","",N,[[["v"],["variant"]]]],[5,"visit_vis_crate","","",N,[[["v"],["viscrate"]]]],[5,"visit_vis_public","","",N,[[["v"],["vispublic"]]]],[5,"visit_vis_restricted","","",N,[[["v"],["visrestricted"]]]],[5,"visit_visibility","","",N,[[["v"],["visibility"]]]],[5,"visit_where_clause","","",N,[[["v"],["whereclause"]]]],[5,"visit_where_predicate","","",N,[[["v"],["wherepredicate"]]]],[8,"Visit","","Syntax tree traversal to walk a shared borrow of a syntax tree.",N,N],[11,"visit_abi","","",234,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments","","",234,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_attr_style","","",234,[[["self"],["attrstyle"]]]],[11,"visit_attribute","","",234,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg","","",234,[[["self"],["barefnarg"]]]],[11,"visit_bare_fn_arg_name","","",234,[[["self"],["barefnargname"]]]],[11,"visit_bin_op","","",234,[[["self"],["binop"]]]],[11,"visit_binding","","",234,[[["self"],["binding"]]]],[11,"visit_bound_lifetimes","","",234,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param","","",234,[[["self"],["constparam"]]]],[11,"visit_data","","",234,[[["self"],["data"]]]],[11,"visit_data_enum","","",234,[[["self"],["dataenum"]]]],[11,"visit_data_struct","","",234,[[["self"],["datastruct"]]]],[11,"visit_data_union","","",234,[[["self"],["dataunion"]]]],[11,"visit_derive_input","","",234,[[["self"],["deriveinput"]]]],[11,"visit_expr","","",234,[[["self"],["expr"]]]],[11,"visit_expr_binary","","",234,[[["self"],["exprbinary"]]]],[11,"visit_expr_call","","",234,[[["self"],["exprcall"]]]],[11,"visit_expr_cast","","",234,[[["self"],["exprcast"]]]],[11,"visit_expr_field","","",234,[[["self"],["exprfield"]]]],[11,"visit_expr_index","","",234,[[["self"],["exprindex"]]]],[11,"visit_expr_lit","","",234,[[["self"],["exprlit"]]]],[11,"visit_expr_paren","","",234,[[["self"],["exprparen"]]]],[11,"visit_expr_path","","",234,[[["self"],["exprpath"]]]],[11,"visit_expr_unary","","",234,[[["self"],["exprunary"]]]],[11,"visit_expr_verbatim","","",234,[[["self"],["exprverbatim"]]]],[11,"visit_field","","",234,[[["self"],["field"]]]],[11,"visit_fields","","",234,[[["self"],["fields"]]]],[11,"visit_fields_named","","",234,[[["self"],["fieldsnamed"]]]],[11,"visit_fields_unnamed","","",234,[[["self"],["fieldsunnamed"]]]],[11,"visit_generic_argument","","",234,[[["self"],["genericargument"]]]],[11,"visit_generic_param","","",234,[[["self"],["genericparam"]]]],[11,"visit_generics","","",234,[[["self"],["generics"]]]],[11,"visit_ident","","",234,[[["self"],["ident"]]]],[11,"visit_index","","",234,[[["self"],["index"]]]],[11,"visit_lifetime","","",234,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def","","",234,[[["self"],["lifetimedef"]]]],[11,"visit_lit","","",234,[[["self"],["lit"]]]],[11,"visit_lit_bool","","",234,[[["self"],["litbool"]]]],[11,"visit_lit_byte","","",234,[[["self"],["litbyte"]]]],[11,"visit_lit_byte_str","","",234,[[["self"],["litbytestr"]]]],[11,"visit_lit_char","","",234,[[["self"],["litchar"]]]],[11,"visit_lit_float","","",234,[[["self"],["litfloat"]]]],[11,"visit_lit_int","","",234,[[["self"],["litint"]]]],[11,"visit_lit_str","","",234,[[["self"],["litstr"]]]],[11,"visit_lit_verbatim","","",234,[[["self"],["litverbatim"]]]],[11,"visit_macro","","",234,[[["self"],["macro"]]]],[11,"visit_macro_delimiter","","",234,[[["self"],["macrodelimiter"]]]],[11,"visit_member","","",234,[[["self"],["member"]]]],[11,"visit_meta","","",234,[[["self"],["meta"]]]],[11,"visit_meta_list","","",234,[[["self"],["metalist"]]]],[11,"visit_meta_name_value","","",234,[[["self"],["metanamevalue"]]]],[11,"visit_nested_meta","","",234,[[["self"],["nestedmeta"]]]],[11,"visit_parenthesized_generic_arguments","","",234,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_path","","",234,[[["self"],["path"]]]],[11,"visit_path_arguments","","",234,[[["self"],["patharguments"]]]],[11,"visit_path_segment","","",234,[[["self"],["pathsegment"]]]],[11,"visit_predicate_eq","","",234,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime","","",234,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type","","",234,[[["self"],["predicatetype"]]]],[11,"visit_qself","","",234,[[["self"],["qself"]]]],[11,"visit_return_type","","",234,[[["self"],["returntype"]]]],[11,"visit_span","","",234,[[["self"],["span"]]]],[11,"visit_trait_bound","","",234,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier","","",234,[[["self"],["traitboundmodifier"]]]],[11,"visit_type","","",234,[[["self"],["type"]]]],[11,"visit_type_array","","",234,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn","","",234,[[["self"],["typebarefn"]]]],[11,"visit_type_group","","",234,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait","","",234,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer","","",234,[[["self"],["typeinfer"]]]],[11,"visit_type_macro","","",234,[[["self"],["typemacro"]]]],[11,"visit_type_never","","",234,[[["self"],["typenever"]]]],[11,"visit_type_param","","",234,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound","","",234,[[["self"],["typeparambound"]]]],[11,"visit_type_paren","","",234,[[["self"],["typeparen"]]]],[11,"visit_type_path","","",234,[[["self"],["typepath"]]]],[11,"visit_type_ptr","","",234,[[["self"],["typeptr"]]]],[11,"visit_type_reference","","",234,[[["self"],["typereference"]]]],[11,"visit_type_slice","","",234,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object","","",234,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple","","",234,[[["self"],["typetuple"]]]],[11,"visit_type_verbatim","","",234,[[["self"],["typeverbatim"]]]],[11,"visit_un_op","","",234,[[["self"],["unop"]]]],[11,"visit_variant","","",234,[[["self"],["variant"]]]],[11,"visit_vis_crate","","",234,[[["self"],["viscrate"]]]],[11,"visit_vis_public","","",234,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted","","",234,[[["self"],["visrestricted"]]]],[11,"visit_visibility","","",234,[[["self"],["visibility"]]]],[11,"visit_where_clause","","",234,[[["self"],["whereclause"]]]],[11,"visit_where_predicate","","",234,[[["self"],["wherepredicate"]]]],[11,"fmt","syn::synom","",235,[[["self"],["formatter"]],["result"]]],[11,"description","","",235,[[["self"]],["str"]]],[11,"fmt","","",235,[[["self"],["formatter"]],["result"]]],[14,"named","syn","Define a parser function with the signature expected by syn parser combinators.",N,N],[14,"call","","Invoke the given parser function with zero or more arguments.",N,N],[14,"map","","Transform the result of a parser by applying a function or closure.",N,N],[14,"not","","Invert the result of a parser by parsing successfully if the given parser fails to parse and vice versa.",N,N],[14,"cond","","Execute a parser only if a condition is met, otherwise return None.",N,N],[14,"cond_reduce","","Execute a parser only if a condition is met, otherwise fail to parse.",N,N],[14,"many0","","Parse zero or more values using the given parser.",N,N],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",N,N],[14,"value","","Produce the given value without parsing anything.",N,N],[14,"reject","","Unconditionally fail to parse anything.",N,N],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",N,N],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",N,N],[14,"do_parse","","Run a series of parsers, optionally naming each intermediate result, followed by a step to combine the intermediate results.",N,N],[14,"input_end","","Parse nothing and succeed only if the end of the enclosing block has been reached.",N,N],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",N,N],[14,"epsilon","","Parses nothing and always succeeds.",N,N],[14,"syn","","Parse any type that implements the `Synom` trait.",N,N],[14,"custom_keyword","","Parse the given word as a keyword.",N,N],[14,"parens","","Parse inside of `(` `)` parentheses.",N,N],[14,"brackets","","Parse inside of `[` `]` square brackets.",N,N],[14,"braces","","Parse inside of `{` `}` curly braces.",N,N],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",N,N],[14,"punct","","Parse a single Rust punctuation token.",N,N],[14,"keyword","","Parse a single Rust keyword token.",N,N],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",N,N],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",180,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",180,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",180,N],[11,"clone","","",180,[[["self"]],["ident"]]],[11,"partial_cmp","","",180,[[["self"],["ident"]],["option",["ordering"]]]],[11,"fmt","","",180,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",180,[[["self"],["formatter"]],["result",["error"]]]],[11,"cmp","","",180,[[["self"],["ident"]],["ordering"]]],[11,"eq","","",180,[[["self"],["t"]],["bool"]]],[11,"eq","","",180,[[["self"],["ident"]],["bool"]]],[11,"hash","","",180,N],[11,"to_tokens","","",180,N],[11,"visit_abi","syn::visit","",234,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments","","",234,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_attr_style","","",234,[[["self"],["attrstyle"]]]],[11,"visit_attribute","","",234,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg","","",234,[[["self"],["barefnarg"]]]],[11,"visit_bare_fn_arg_name","","",234,[[["self"],["barefnargname"]]]],[11,"visit_bin_op","","",234,[[["self"],["binop"]]]],[11,"visit_binding","","",234,[[["self"],["binding"]]]],[11,"visit_bound_lifetimes","","",234,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param","","",234,[[["self"],["constparam"]]]],[11,"visit_data","","",234,[[["self"],["data"]]]],[11,"visit_data_enum","","",234,[[["self"],["dataenum"]]]],[11,"visit_data_struct","","",234,[[["self"],["datastruct"]]]],[11,"visit_data_union","","",234,[[["self"],["dataunion"]]]],[11,"visit_derive_input","","",234,[[["self"],["deriveinput"]]]],[11,"visit_expr","","",234,[[["self"],["expr"]]]],[11,"visit_expr_binary","","",234,[[["self"],["exprbinary"]]]],[11,"visit_expr_call","","",234,[[["self"],["exprcall"]]]],[11,"visit_expr_cast","","",234,[[["self"],["exprcast"]]]],[11,"visit_expr_field","","",234,[[["self"],["exprfield"]]]],[11,"visit_expr_index","","",234,[[["self"],["exprindex"]]]],[11,"visit_expr_lit","","",234,[[["self"],["exprlit"]]]],[11,"visit_expr_paren","","",234,[[["self"],["exprparen"]]]],[11,"visit_expr_path","","",234,[[["self"],["exprpath"]]]],[11,"visit_expr_unary","","",234,[[["self"],["exprunary"]]]],[11,"visit_expr_verbatim","","",234,[[["self"],["exprverbatim"]]]],[11,"visit_field","","",234,[[["self"],["field"]]]],[11,"visit_fields","","",234,[[["self"],["fields"]]]],[11,"visit_fields_named","","",234,[[["self"],["fieldsnamed"]]]],[11,"visit_fields_unnamed","","",234,[[["self"],["fieldsunnamed"]]]],[11,"visit_generic_argument","","",234,[[["self"],["genericargument"]]]],[11,"visit_generic_param","","",234,[[["self"],["genericparam"]]]],[11,"visit_generics","","",234,[[["self"],["generics"]]]],[11,"visit_ident","","",234,[[["self"],["ident"]]]],[11,"visit_index","","",234,[[["self"],["index"]]]],[11,"visit_lifetime","","",234,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def","","",234,[[["self"],["lifetimedef"]]]],[11,"visit_lit","","",234,[[["self"],["lit"]]]],[11,"visit_lit_bool","","",234,[[["self"],["litbool"]]]],[11,"visit_lit_byte","","",234,[[["self"],["litbyte"]]]],[11,"visit_lit_byte_str","","",234,[[["self"],["litbytestr"]]]],[11,"visit_lit_char","","",234,[[["self"],["litchar"]]]],[11,"visit_lit_float","","",234,[[["self"],["litfloat"]]]],[11,"visit_lit_int","","",234,[[["self"],["litint"]]]],[11,"visit_lit_str","","",234,[[["self"],["litstr"]]]],[11,"visit_lit_verbatim","","",234,[[["self"],["litverbatim"]]]],[11,"visit_macro","","",234,[[["self"],["macro"]]]],[11,"visit_macro_delimiter","","",234,[[["self"],["macrodelimiter"]]]],[11,"visit_member","","",234,[[["self"],["member"]]]],[11,"visit_meta","","",234,[[["self"],["meta"]]]],[11,"visit_meta_list","","",234,[[["self"],["metalist"]]]],[11,"visit_meta_name_value","","",234,[[["self"],["metanamevalue"]]]],[11,"visit_nested_meta","","",234,[[["self"],["nestedmeta"]]]],[11,"visit_parenthesized_generic_arguments","","",234,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_path","","",234,[[["self"],["path"]]]],[11,"visit_path_arguments","","",234,[[["self"],["patharguments"]]]],[11,"visit_path_segment","","",234,[[["self"],["pathsegment"]]]],[11,"visit_predicate_eq","","",234,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime","","",234,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type","","",234,[[["self"],["predicatetype"]]]],[11,"visit_qself","","",234,[[["self"],["qself"]]]],[11,"visit_return_type","","",234,[[["self"],["returntype"]]]],[11,"visit_span","","",234,[[["self"],["span"]]]],[11,"visit_trait_bound","","",234,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier","","",234,[[["self"],["traitboundmodifier"]]]],[11,"visit_type","","",234,[[["self"],["type"]]]],[11,"visit_type_array","","",234,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn","","",234,[[["self"],["typebarefn"]]]],[11,"visit_type_group","","",234,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait","","",234,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer","","",234,[[["self"],["typeinfer"]]]],[11,"visit_type_macro","","",234,[[["self"],["typemacro"]]]],[11,"visit_type_never","","",234,[[["self"],["typenever"]]]],[11,"visit_type_param","","",234,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound","","",234,[[["self"],["typeparambound"]]]],[11,"visit_type_paren","","",234,[[["self"],["typeparen"]]]],[11,"visit_type_path","","",234,[[["self"],["typepath"]]]],[11,"visit_type_ptr","","",234,[[["self"],["typeptr"]]]],[11,"visit_type_reference","","",234,[[["self"],["typereference"]]]],[11,"visit_type_slice","","",234,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object","","",234,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple","","",234,[[["self"],["typetuple"]]]],[11,"visit_type_verbatim","","",234,[[["self"],["typeverbatim"]]]],[11,"visit_un_op","","",234,[[["self"],["unop"]]]],[11,"visit_variant","","",234,[[["self"],["variant"]]]],[11,"visit_vis_crate","","",234,[[["self"],["viscrate"]]]],[11,"visit_vis_public","","",234,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted","","",234,[[["self"],["visrestricted"]]]],[11,"visit_visibility","","",234,[[["self"],["visibility"]]]],[11,"visit_where_clause","","",234,[[["self"],["whereclause"]]]],[11,"visit_where_predicate","","",234,[[["self"],["wherepredicate"]]]]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprBinary"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprField"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[3,"ExprVerbatim"],[3,"Index"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"Lifetime"],[3,"LitBool"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"PathTokens"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Underscore"],[3,"Apostrophe"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"As"],[3,"Auto"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Catch"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Type"],[3,"Union"],[3,"Unsafe"],[3,"Use"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Ident"],[3,"ExprBox"],[3,"ExprInPlace"],[3,"ExprArray"],[3,"ExprMethodCall"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprIf"],[3,"ExprIfLet"],[3,"ExprWhile"],[3,"ExprWhileLet"],[3,"ExprForLoop"],[3,"ExprLoop"],[3,"ExprMatch"],[3,"ExprClosure"],[3,"ExprUnsafe"],[3,"ExprBlock"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprBreak"],[3,"ExprContinue"],[3,"ExprReturn"],[3,"ExprMacro"],[3,"ExprStruct"],[3,"ExprRepeat"],[3,"ExprGroup"],[3,"ExprTry"],[3,"ExprCatch"],[3,"ExprYield"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"IdentExt"],[8,"Synom"],[8,"Parser"],[8,"Spanned"],[8,"Visit"],[3,"ParseError"]]};
searchIndex["time"]={"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",N,N],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",N,N],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",N,N],[12,"sec","","",0,N],[12,"nsec","","",0,N],[3,"PreciseTime","","An opaque structure representing a moment in time.",N,N],[3,"SteadyTime","","A structure representing a moment in time.",N,N],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",N,N],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,N],[12,"tm_min","","Minutes after the hour - [0, 59]",1,N],[12,"tm_hour","","Hours after midnight - [0, 23]",1,N],[12,"tm_mday","","Day of the month - [1, 31]",1,N],[12,"tm_mon","","Months since January - [0, 11]",1,N],[12,"tm_year","","Years since 1900",1,N],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,N],[12,"tm_yday","","Days since January 1 - [0, 365]",1,N],[12,"tm_isdst","","Daylight Saving Time flag.",1,N],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is `-7*60*60 = -25200`.",1,N],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",1,N],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",N,N],[4,"ParseError","","",N,N],[13,"InvalidSecond","","",2,N],[13,"InvalidMinute","","",2,N],[13,"InvalidHour","","",2,N],[13,"InvalidDay","","",2,N],[13,"InvalidMonth","","",2,N],[13,"InvalidYear","","",2,N],[13,"InvalidDayOfWeek","","",2,N],[13,"InvalidDayOfMonth","","",2,N],[13,"InvalidDayOfYear","","",2,N],[13,"InvalidZoneOffset","","",2,N],[13,"InvalidTime","","",2,N],[13,"InvalidSecondsSinceEpoch","","",2,N],[13,"MissingFormatConverter","","",2,N],[13,"InvalidFormatSpecifier","","",2,N],[13,"UnexpectedCharacter","","",2,N],[5,"strptime","","Parses the time from the string according to the format string.",N,[[["str"],["str"]],["result",["tm","parseerror"]]]],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",N,[[],["timespec"]]],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",N,[[],["u64"]]],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",N,[[],["f64"]]],[5,"tzset","","",N,[[]]],[5,"empty_tm","","",N,[[],["tm"]]],[5,"at_utc","","Returns the specified time in UTC",N,[[["timespec"]],["tm"]]],[5,"now_utc","","Returns the current time in UTC",N,[[],["tm"]]],[5,"at","","Returns the specified time in the local timezone",N,[[["timespec"]],["tm"]]],[5,"now","","Returns the current time in the local timezone",N,[[],["tm"]]],[5,"strftime","","Formats the time according to the format string.",N,[[["str"],["tm"]],["result",["string","parseerror"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["duration"]]],[11,"eq","","",4,[[["self"],["duration"]],["bool"]]],[11,"ne","","",4,[[["self"],["duration"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["duration"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["duration"]],["bool"]]],[11,"le","","",4,[[["self"],["duration"]],["bool"]]],[11,"gt","","",4,[[["self"],["duration"]],["bool"]]],[11,"ge","","",4,[[["self"],["duration"]],["bool"]]],[11,"cmp","","",4,[[["self"],["duration"]],["ordering"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,[[["i64"]],["duration"]]],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,[[["i64"]],["duration"]]],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,[[["i64"]],["duration"]]],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,[[["i64"]],["duration"]]],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,[[["i64"]],["duration"]]],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,[[["i64"]],["duration"]]],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,[[["i64"]],["duration"]]],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,[[["i64"]],["duration"]]],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,[[["f"]],["duration"]]],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,[[["self"]],["i64"]]],[11,"num_days","","Returns the total number of whole days in the duration.",4,[[["self"]],["i64"]]],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,[[["self"]],["i64"]]],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,[[["self"]],["i64"]]],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,[[["self"]],["i64"]]],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,[[["self"]],["i64"]]],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",4,[[["self"]],["option",["i64"]]]],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",4,[[["self"]],["option",["i64"]]]],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,[[["self"],["duration"]],["option",["duration"]]]],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,[[["self"],["duration"]],["option",["duration"]]]],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,[[],["duration"]]],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,[[],["duration"]]],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,[[],["duration"]]],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,[[["self"]],["bool"]]],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,[[["stdduration"]],["result",["duration","outofrangeerror"]]]],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,[[["self"]],["result",["stdduration","outofrangeerror"]]]],[11,"neg","","",4,[[["self"]],["duration"]]],[11,"add","","",4,[[["self"],["duration"]],["duration"]]],[11,"sub","","",4,[[["self"],["duration"]],["duration"]]],[11,"mul","","",4,[[["self"],["i32"]],["duration"]]],[11,"div","","",4,[[["self"],["i32"]],["duration"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["outofrangeerror"]]],[11,"eq","","",5,[[["self"],["outofrangeerror"]],["bool"]]],[11,"ne","","",5,[[["self"],["outofrangeerror"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"clone","","",0,[[["self"]],["timespec"]]],[11,"eq","","",0,[[["self"],["timespec"]],["bool"]]],[11,"ne","","",0,[[["self"],["timespec"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["timespec"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["timespec"]],["bool"]]],[11,"le","","",0,[[["self"],["timespec"]],["bool"]]],[11,"gt","","",0,[[["self"],["timespec"]],["bool"]]],[11,"ge","","",0,[[["self"],["timespec"]],["bool"]]],[11,"cmp","","",0,[[["self"],["timespec"]],["ordering"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"new","","",0,[[["i64"],["i32"]],["timespec"]]],[11,"add","","",0,[[["self"],["duration"]],["timespec"]]],[11,"sub","","",0,[[["self"],["duration"]],["timespec"]]],[11,"sub","","",0,[[["self"],["timespec"]],["duration"]]],[11,"clone","","",6,[[["self"]],["precisetime"]]],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,[[],["precisetime"]]],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,[[["self"],["precisetime"]],["duration"]]],[11,"clone","","",7,[[["self"]],["steadytime"]]],[11,"partial_cmp","","",7,[[["self"],["steadytime"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"le","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"gt","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"ge","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"cmp","","",7,[[["self"],["steadytime"]],["ordering"]]],[11,"eq","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"ne","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,[[],["steadytime"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"sub","","",7,[[["self"],["steadytime"]],["duration"]]],[11,"sub","","",7,[[["self"],["duration"]],["steadytime"]]],[11,"add","","",7,[[["self"],["duration"]],["steadytime"]]],[11,"clone","","",1,[[["self"]],["tm"]]],[11,"eq","","",1,[[["self"],["tm"]],["bool"]]],[11,"ne","","",1,[[["self"],["tm"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"add","","The resulting Tm is in UTC.",1,[[["self"],["duration"]],["tm"]]],[11,"sub","","The resulting Tm is in UTC.",1,[[["self"],["duration"]],["tm"]]],[11,"sub","","",1,[[["self"],["tm"]],["duration"]]],[11,"partial_cmp","","",1,[[["self"],["tm"]],["option",["ordering"]]]],[11,"cmp","","",1,[[["self"],["tm"]],["ordering"]]],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,[[["self"]],["timespec"]]],[11,"to_local","","Convert time to the local timezone",1,[[["self"]],["tm"]]],[11,"to_utc","","Convert time to the UTC",1,[[["self"]],["tm"]]],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,[[["self"]],["tmfmt"]]],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,[[["self"]],["tmfmt"]]],[11,"strftime","","Formats the time according to the format string.",1,[[["self"],["str"]],["result",["tmfmt","parseerror"]]]],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,[[["self"]],["tmfmt"]]],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,[[["self"]],["tmfmt"]]],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,[[["self"]],["tmfmt"]]],[11,"eq","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"ne","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["parseerror"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["tiny_keccak"]={"doc":"An implementation of the FIPS-202-defined SHA-3 and SHAKE functions.","items":[[3,"Keccak","tiny_keccak","This structure should be used to create keccak/sha3 hash.",N,N],[3,"XofReader","","",N,N],[5,"keccakf","","keccak-f[1600]",N,N],[5,"shake128","","",N,N],[5,"shake256","","",N,N],[5,"keccak224","","",N,N],[5,"keccak256","","",N,N],[5,"keccak384","","",N,N],[5,"keccak512","","",N,N],[5,"sha3_224","","",N,N],[5,"sha3_256","","",N,N],[5,"sha3_384","","",N,N],[5,"sha3_512","","",N,N],[11,"clone","","",0,[[["self"]],["self"]]],[11,"new","","",0,[[["usize"],["u8"]],["keccak"]]],[11,"new_shake128","","",0,[[],["keccak"]]],[11,"shake128","","",0,N],[11,"new_shake256","","",0,[[],["keccak"]]],[11,"shake256","","",0,N],[11,"new_keccak224","","",0,[[],["keccak"]]],[11,"keccak224","","",0,N],[11,"new_keccak256","","",0,[[],["keccak"]]],[11,"keccak256","","",0,N],[11,"new_keccak384","","",0,[[],["keccak"]]],[11,"keccak384","","",0,N],[11,"new_keccak512","","",0,[[],["keccak"]]],[11,"keccak512","","",0,N],[11,"new_sha3_224","","",0,[[],["keccak"]]],[11,"sha3_224","","",0,N],[11,"new_sha3_256","","",0,[[],["keccak"]]],[11,"sha3_256","","",0,N],[11,"new_sha3_384","","",0,[[],["keccak"]]],[11,"sha3_384","","",0,N],[11,"new_sha3_512","","",0,[[],["keccak"]]],[11,"sha3_512","","",0,N],[11,"update","","",0,N],[11,"keccakf","","",0,[[["self"]]]],[11,"finalize","","",0,N],[11,"absorb","","",0,N],[11,"pad","","",0,[[["self"]]]],[11,"fill_block","","",0,[[["self"]]]],[11,"squeeze","","",0,N],[11,"xof","","",0,[[["self"]],["xofreader"]]],[11,"squeeze","","",1,N]],"paths":[[3,"Keccak"],[3,"XofReader"]]};
searchIndex["uint"]={"doc":"Efficient large, fixed-size big integers and hashes.","items":[[4,"FromDecStrErr","uint","Conversion from decimal string error",N,N],[13,"InvalidCharacter","","Char not from range 0-9",0,N],[13,"InvalidLength","","Value does not fit into type",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["fromdecstrerr"]],["bool"]]],[14,"construct_uint","","",N,N]],"paths":[[4,"FromDecStrErr"]]};
searchIndex["unicode_xid"]={"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",N,N],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",N,N],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,[[["self"]],["bool"]]],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,[[["self"]],["bool"]]]],"paths":[[8,"UnicodeXID"]]};
searchIndex["untrusted"]={"doc":"untrusted.rs: Safe, fast, zero-panic, zero-crashing, zero-allocation parsing of untrusted inputs in Rust.","items":[[3,"Input","untrusted","A wrapper around `&'a [u8]` that helps in writing panic-free code.",N,N],[3,"Reader","","A read-only, forward-only* cursor into the data in an `Input`.",N,N],[3,"Mark","","An index into the already-parsed input of a `Reader`.",N,N],[3,"EndOfInput","","The error type used to indicate the end of the input was reached before the operation could be completed.",N,N],[5,"read_all_optional","","Calls `read` with the given input as a `Reader`, ensuring that `read` consumed the entire input. When `input` is `None`, `read` will be called with `None`.",N,[[["option",["input"]],["e"],["f"]],["result"]]],[11,"clone","","",0,[[["self"]],["input"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["input"]],["bool"]]],[11,"ne","","",0,[[["self"],["input"]],["bool"]]],[11,"from","","Construct a new `Input` for the given input `bytes`.",0,N],[11,"is_empty","","Returns `true` if the input is empty and false otherwise.",0,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over the input.",0,N],[11,"len","","Returns the length of the `Input`.",0,[[["self"]],["usize"]]],[11,"read_all","","Calls `read` with the given input as a `Reader`, ensuring that `read` consumed the entire input. If `read` does not consume the entire input, `incomplete_read` is returned.",0,[[["self"],["e"],["f"]],["result"]]],[11,"read_all_mut","","Like `read_all`, except taking an `FnMut`.",0,[[["self"],["e"],["f"]],["result"]]],[11,"as_slice_less_safe","","Access the input as a slice so it can be processed by functions that are not written using the Input/Reader framework.",0,N],[11,"eq","","",0,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new Reader for the given input. Use `read_all`, `read_all_mut`, or `read_all_optional` instead of `Reader::new` whenever possible.",1,[[["input"]],["reader"]]],[11,"at_end","","Returns `true` if the reader is at the end of the input, and `false` otherwise.",1,[[["self"]],["bool"]]],[11,"get_input_between_marks","","Returns an `Input` for already-parsed input that has had its boundaries marked using `mark`.",1,[[["self"],["mark"],["mark"]],["result",["input","endofinput"]]]],[11,"mark","","Return the current position of the `Reader` for future use in a call to `get_input_between_marks`.",1,[[["self"]],["mark"]]],[11,"peek","","Returns `true` if there is at least one more byte in the input and that byte is equal to `b`, and false otherwise.",1,[[["self"],["u8"]],["bool"]]],[11,"read_byte","","Reads the next input byte.",1,[[["self"]],["result",["u8","endofinput"]]]],[11,"skip","","Skips `num_bytes` of the input.",1,[[["self"],["usize"]],["result",["endofinput"]]]],[11,"skip_and_get_input","","Skips `num_bytes` of the input, returning the skipped input as an `Input`.",1,[[["self"],["usize"]],["result",["input","endofinput"]]]],[11,"skip_to_end","","Skips the reader to the end of the input, returning the skipped input as an `Input`.",1,[[["self"]],["input"]]],[11,"clone","","",2,[[["self"]],["endofinput"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["endofinput"]],["bool"]]]],"paths":[[3,"Input"],[3,"Reader"],[3,"EndOfInput"]]};
initSearch(searchIndex);
